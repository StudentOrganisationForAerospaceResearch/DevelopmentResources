ARM GAS  /tmp/cc6ZjiVz.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	pxCurrentTCB
  18              		.section	.bss.pxCurrentTCB,"aw",%nobits
  19              		.align	2
  22              	pxCurrentTCB:
  23 0000 00000000 		.space	4
  24              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  25              		.align	2
  28              	pxReadyTasksLists:
  29 0000 00000000 		.space	140
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  31              		.align	2
  34              	xDelayedTaskList1:
  35 0000 00000000 		.space	20
  35      00000000 
  35      00000000 
  35      00000000 
  35      00000000 
  36              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  37              		.align	2
  40              	xDelayedTaskList2:
  41 0000 00000000 		.space	20
  41      00000000 
  41      00000000 
  41      00000000 
  41      00000000 
  42              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  43              		.align	2
  46              	pxDelayedTaskList:
  47 0000 00000000 		.space	4
  48              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  49              		.align	2
  52              	pxOverflowDelayedTaskList:
  53 0000 00000000 		.space	4
  54              		.section	.bss.xPendingReadyList,"aw",%nobits
  55              		.align	2
  58              	xPendingReadyList:
  59 0000 00000000 		.space	20
ARM GAS  /tmp/cc6ZjiVz.s 			page 2


  59      00000000 
  59      00000000 
  59      00000000 
  59      00000000 
  60              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  61              		.align	2
  64              	xTasksWaitingTermination:
  65 0000 00000000 		.space	20
  65      00000000 
  65      00000000 
  65      00000000 
  65      00000000 
  66              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  67              		.align	2
  70              	uxDeletedTasksWaitingCleanUp:
  71 0000 00000000 		.space	4
  72              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  73              		.align	2
  76              	xSuspendedTaskList:
  77 0000 00000000 		.space	20
  77      00000000 
  77      00000000 
  77      00000000 
  77      00000000 
  78              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  79              		.align	2
  82              	uxCurrentNumberOfTasks:
  83 0000 00000000 		.space	4
  84              		.section	.bss.xTickCount,"aw",%nobits
  85              		.align	2
  88              	xTickCount:
  89 0000 00000000 		.space	4
  90              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  91              		.align	2
  94              	uxTopReadyPriority:
  95 0000 00000000 		.space	4
  96              		.section	.bss.xSchedulerRunning,"aw",%nobits
  97              		.align	2
 100              	xSchedulerRunning:
 101 0000 00000000 		.space	4
 102              		.section	.bss.uxPendedTicks,"aw",%nobits
 103              		.align	2
 106              	uxPendedTicks:
 107 0000 00000000 		.space	4
 108              		.section	.bss.xYieldPending,"aw",%nobits
 109              		.align	2
 112              	xYieldPending:
 113 0000 00000000 		.space	4
 114              		.section	.bss.xNumOfOverflows,"aw",%nobits
 115              		.align	2
 118              	xNumOfOverflows:
 119 0000 00000000 		.space	4
 120              		.section	.bss.uxTaskNumber,"aw",%nobits
 121              		.align	2
 124              	uxTaskNumber:
 125 0000 00000000 		.space	4
 126              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
ARM GAS  /tmp/cc6ZjiVz.s 			page 3


 127              		.align	2
 130              	xNextTaskUnblockTime:
 131 0000 00000000 		.space	4
 132              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 133              		.align	2
 136              	xIdleTaskHandle:
 137 0000 00000000 		.space	4
 138              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 139              		.align	2
 142              	uxSchedulerSuspended:
 143 0000 00000000 		.space	4
 144              		.section	.text.xTaskCreate,"ax",%progbits
 145              		.align	1
 146              		.global	xTaskCreate
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu fpv4-sp-d16
 152              	xTaskCreate:
 153              	.LFB5:
 154              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
ARM GAS  /tmp/cc6ZjiVz.s 			page 4


  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
ARM GAS  /tmp/cc6ZjiVz.s 			page 5


  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
ARM GAS  /tmp/cc6ZjiVz.s 			page 6


 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc6ZjiVz.s 			page 7


 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cc6ZjiVz.s 			page 8


 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
ARM GAS  /tmp/cc6ZjiVz.s 			page 9


 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static variables must be declared volatile. */
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
ARM GAS  /tmp/cc6ZjiVz.s 			page 10


 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFA
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a t
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of e
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint +e956 */
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  /tmp/cc6ZjiVz.s 			page 11


 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask );
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvInitialiseTaskLists( void );
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static void prvDeleteTCB( TCB_t *pxTCB );
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvCheckTasksWaitingTermination( void );
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
ARM GAS  /tmp/cc6ZjiVz.s 			page 12


 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const Base
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArr
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcN
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte );
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static TickType_t prvGetExpectedIdleTime( void );
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
ARM GAS  /tmp/cc6ZjiVz.s 			page 13


 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ); /*lint !e971 Unqualified char types are allowed f
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB );
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc6ZjiVz.s 			page 14


 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				this task had a statically allocated stack in case it is
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
ARM GAS  /tmp/cc6ZjiVz.s 			page 15


 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const uint16_t usStackDepth,
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 155              		.loc 1 682 0
 156              		.cfi_startproc
 157              		@ args = 8, pretend = 0, frame = 32
 158              		@ frame_needed = 1, uses_anonymous_args = 0
 159 0000 80B5     		push	{r7, lr}
 160              	.LCFI0:
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 7, -8
 163              		.cfi_offset 14, -4
 164 0002 8CB0     		sub	sp, sp, #48
 165              	.LCFI1:
 166              		.cfi_def_cfa_offset 56
 167 0004 04AF     		add	r7, sp, #16
 168              	.LCFI2:
 169              		.cfi_def_cfa 7, 40
 170 0006 F860     		str	r0, [r7, #12]
 171 0008 B960     		str	r1, [r7, #8]
 172 000a 3B60     		str	r3, [r7]
 173 000c 1346     		mov	r3, r2	@ movhi
 174 000e FB80     		strh	r3, [r7, #6]	@ movhi
 175              	.LBB90:
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
ARM GAS  /tmp/cc6ZjiVz.s 			page 16


 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 176              		.loc 1 716 0
 177 0010 FB88     		ldrh	r3, [r7, #6]
 178 0012 9B00     		lsls	r3, r3, #2
 179 0014 1846     		mov	r0, r3
 180 0016 FFF7FEFF 		bl	pvPortMalloc
 181 001a 7861     		str	r0, [r7, #20]
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 182              		.loc 1 718 0
 183 001c 7B69     		ldr	r3, [r7, #20]
 184 001e 002B     		cmp	r3, #0
 185 0020 0ED0     		beq	.L2
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 186              		.loc 1 721 0
 187 0022 5420     		movs	r0, #84
 188 0024 FFF7FEFF 		bl	pvPortMalloc
 189 0028 F861     		str	r0, [r7, #28]
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 190              		.loc 1 723 0
 191 002a FB69     		ldr	r3, [r7, #28]
 192 002c 002B     		cmp	r3, #0
 193 002e 03D0     		beq	.L3
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 194              		.loc 1 726 0
 195 0030 FB69     		ldr	r3, [r7, #28]
 196 0032 7A69     		ldr	r2, [r7, #20]
 197 0034 1A63     		str	r2, [r3, #48]
 198 0036 05E0     		b	.L5
 199              	.L3:
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
ARM GAS  /tmp/cc6ZjiVz.s 			page 17


 200              		.loc 1 732 0
 201 0038 7869     		ldr	r0, [r7, #20]
 202 003a FFF7FEFF 		bl	vPortFree
 203 003e 01E0     		b	.L5
 204              	.L2:
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 205              		.loc 1 737 0
 206 0040 0023     		movs	r3, #0
 207 0042 FB61     		str	r3, [r7, #28]
 208              	.L5:
 209              	.LBE90:
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 210              		.loc 1 742 0
 211 0044 FB69     		ldr	r3, [r7, #28]
 212 0046 002B     		cmp	r3, #0
 213 0048 13D0     		beq	.L6
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 214              		.loc 1 752 0
 215 004a FA88     		ldrh	r2, [r7, #6]
 216 004c 0023     		movs	r3, #0
 217 004e 0393     		str	r3, [sp, #12]
 218 0050 FB69     		ldr	r3, [r7, #28]
 219 0052 0293     		str	r3, [sp, #8]
 220 0054 FB6A     		ldr	r3, [r7, #44]
 221 0056 0193     		str	r3, [sp, #4]
 222 0058 BB6A     		ldr	r3, [r7, #40]
 223 005a 0093     		str	r3, [sp]
 224 005c 3B68     		ldr	r3, [r7]
 225 005e B968     		ldr	r1, [r7, #8]
 226 0060 F868     		ldr	r0, [r7, #12]
 227 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 228              		.loc 1 753 0
 229 0066 F869     		ldr	r0, [r7, #28]
 230 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 231              		.loc 1 754 0
 232 006c 0123     		movs	r3, #1
 233 006e BB61     		str	r3, [r7, #24]
 234 0070 02E0     		b	.L7
ARM GAS  /tmp/cc6ZjiVz.s 			page 18


 235              	.L6:
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 236              		.loc 1 758 0
 237 0072 4FF0FF33 		mov	r3, #-1
 238 0076 BB61     		str	r3, [r7, #24]
 239              	.L7:
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 240              		.loc 1 761 0
 241 0078 BB69     		ldr	r3, [r7, #24]
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 242              		.loc 1 762 0
 243 007a 1846     		mov	r0, r3
 244 007c 2037     		adds	r7, r7, #32
 245              	.LCFI3:
 246              		.cfi_def_cfa_offset 8
 247 007e BD46     		mov	sp, r7
 248              	.LCFI4:
 249              		.cfi_def_cfa_register 13
 250              		@ sp needed
 251 0080 80BD     		pop	{r7, pc}
 252              		.cfi_endproc
 253              	.LFE5:
 255              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 256              		.align	1
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 260              		.fpu fpv4-sp-d16
 262              	prvInitialiseNewTask:
 263              	.LFB6:
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 264              		.loc 1 775 0
 265              		.cfi_startproc
 266              		@ args = 16, pretend = 0, frame = 32
 267              		@ frame_needed = 1, uses_anonymous_args = 0
 268 0000 80B5     		push	{r7, lr}
 269              	.LCFI5:
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
 272              		.cfi_offset 14, -4
ARM GAS  /tmp/cc6ZjiVz.s 			page 19


 273 0002 88B0     		sub	sp, sp, #32
 274              	.LCFI6:
 275              		.cfi_def_cfa_offset 40
 276 0004 00AF     		add	r7, sp, #0
 277              	.LCFI7:
 278              		.cfi_def_cfa_register 7
 279 0006 F860     		str	r0, [r7, #12]
 280 0008 B960     		str	r1, [r7, #8]
 281 000a 7A60     		str	r2, [r7, #4]
 282 000c 3B60     		str	r3, [r7]
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 283              		.loc 1 807 0
 284 000e 3B6B     		ldr	r3, [r7, #48]
 285 0010 1A6B     		ldr	r2, [r3, #48]
 286 0012 7B68     		ldr	r3, [r7, #4]
 287 0014 03F18043 		add	r3, r3, #1073741824
 288 0018 013B     		subs	r3, r3, #1
 289 001a 9B00     		lsls	r3, r3, #2
 290 001c 1344     		add	r3, r3, r2
 291 001e BB61     		str	r3, [r7, #24]
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 292              		.loc 1 808 0
 293 0020 BB69     		ldr	r3, [r7, #24]
 294 0022 23F00703 		bic	r3, r3, #7
 295 0026 BB61     		str	r3, [r7, #24]
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc6ZjiVz.s 			page 20


 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 296              		.loc 1 811 0
 297 0028 BB69     		ldr	r3, [r7, #24]
 298 002a 03F00703 		and	r3, r3, #7
 299 002e 002B     		cmp	r3, #0
 300 0030 09D0     		beq	.L10
 301              	.LBB91:
 302              	.LBB92:
 303              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
ARM GAS  /tmp/cc6ZjiVz.s 			page 21


  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
ARM GAS  /tmp/cc6ZjiVz.s 			page 22


 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
ARM GAS  /tmp/cc6ZjiVz.s 			page 23


 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/cc6ZjiVz.s 			page 24


 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 304              		.loc 2 237 0 discriminator 1
 305              		.syntax unified
 306              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 307 0032 4FF05003 			mov r3, #80												
 308 0036 83F31188 		msr basepri, r3											
 309 003a BFF36F8F 		isb														
 310 003e BFF34F8F 		dsb														
 311              	
 312              	@ 0 "" 2
 313              		.thumb
 314              		.syntax unified
 315 0042 7B61     		str	r3, [r7, #20]
 316              	.L11:
 317              	.LBE92:
 318              	.LBE91:
 319              		.loc 1 811 0 discriminator 1
 320 0044 FEE7     		b	.L11
 321              	.L10:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 322              		.loc 1 827 0
 323 0046 0023     		movs	r3, #0
 324 0048 FB61     		str	r3, [r7, #28]
 325 004a 12E0     		b	.L12
ARM GAS  /tmp/cc6ZjiVz.s 			page 25


 326              	.L15:
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 327              		.loc 1 829 0
 328 004c BA68     		ldr	r2, [r7, #8]
 329 004e FB69     		ldr	r3, [r7, #28]
 330 0050 1344     		add	r3, r3, r2
 331 0052 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 332 0054 3A6B     		ldr	r2, [r7, #48]
 333 0056 FB69     		ldr	r3, [r7, #28]
 334 0058 1344     		add	r3, r3, r2
 335 005a 3433     		adds	r3, r3, #52
 336 005c 0A46     		mov	r2, r1
 337 005e 1A70     		strb	r2, [r3]
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 338              		.loc 1 834 0
 339 0060 BA68     		ldr	r2, [r7, #8]
 340 0062 FB69     		ldr	r3, [r7, #28]
 341 0064 1344     		add	r3, r3, r2
 342 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 343 0068 002B     		cmp	r3, #0
 344 006a 06D0     		beq	.L18
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 345              		.loc 1 827 0 discriminator 2
 346 006c FB69     		ldr	r3, [r7, #28]
 347 006e 0133     		adds	r3, r3, #1
 348 0070 FB61     		str	r3, [r7, #28]
 349              	.L12:
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 350              		.loc 1 827 0 is_stmt 0 discriminator 1
 351 0072 FB69     		ldr	r3, [r7, #28]
 352 0074 0F2B     		cmp	r3, #15
 353 0076 E9D9     		bls	.L15
 354 0078 00E0     		b	.L14
 355              	.L18:
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 356              		.loc 1 836 0 is_stmt 1
 357 007a 00BF     		nop
 358              	.L14:
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 359              		.loc 1 846 0
 360 007c 3B6B     		ldr	r3, [r7, #48]
 361 007e 0022     		movs	r2, #0
ARM GAS  /tmp/cc6ZjiVz.s 			page 26


 362 0080 83F84320 		strb	r2, [r3, #67]
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 363              		.loc 1 850 0
 364 0084 BB6A     		ldr	r3, [r7, #40]
 365 0086 062B     		cmp	r3, #6
 366 0088 01D9     		bls	.L16
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 367              		.loc 1 852 0
 368 008a 0623     		movs	r3, #6
 369 008c BB62     		str	r3, [r7, #40]
 370              	.L16:
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 371              		.loc 1 859 0
 372 008e 3B6B     		ldr	r3, [r7, #48]
 373 0090 BA6A     		ldr	r2, [r7, #40]
 374 0092 DA62     		str	r2, [r3, #44]
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 375              		.loc 1 862 0
 376 0094 3B6B     		ldr	r3, [r7, #48]
 377 0096 BA6A     		ldr	r2, [r7, #40]
 378 0098 5A64     		str	r2, [r3, #68]
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 379              		.loc 1 863 0
 380 009a 3B6B     		ldr	r3, [r7, #48]
 381 009c 0022     		movs	r2, #0
 382 009e 9A64     		str	r2, [r3, #72]
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 383              		.loc 1 867 0
 384 00a0 3B6B     		ldr	r3, [r7, #48]
 385 00a2 0433     		adds	r3, r3, #4
 386 00a4 1846     		mov	r0, r3
 387 00a6 FFF7FEFF 		bl	vListInitialiseItem
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 388              		.loc 1 868 0
 389 00aa 3B6B     		ldr	r3, [r7, #48]
 390 00ac 1833     		adds	r3, r3, #24
 391 00ae 1846     		mov	r0, r3
 392 00b0 FFF7FEFF 		bl	vListInitialiseItem
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
ARM GAS  /tmp/cc6ZjiVz.s 			page 27


 393              		.loc 1 872 0
 394 00b4 3B6B     		ldr	r3, [r7, #48]
 395 00b6 3A6B     		ldr	r2, [r7, #48]
 396 00b8 1A61     		str	r2, [r3, #16]
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 397              		.loc 1 875 0
 398 00ba BB6A     		ldr	r3, [r7, #40]
 399 00bc C3F10702 		rsb	r2, r3, #7
 400 00c0 3B6B     		ldr	r3, [r7, #48]
 401 00c2 9A61     		str	r2, [r3, #24]
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 402              		.loc 1 876 0
 403 00c4 3B6B     		ldr	r3, [r7, #48]
 404 00c6 3A6B     		ldr	r2, [r7, #48]
 405 00c8 5A62     		str	r2, [r3, #36]
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  /tmp/cc6ZjiVz.s 			page 28


 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 406              		.loc 1 918 0
 407 00ca 3B6B     		ldr	r3, [r7, #48]
 408 00cc 0022     		movs	r2, #0
 409 00ce DA64     		str	r2, [r3, #76]
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 410              		.loc 1 919 0
 411 00d0 3B6B     		ldr	r3, [r7, #48]
 412 00d2 0022     		movs	r2, #0
 413 00d4 83F85020 		strb	r2, [r3, #80]
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the	top of stack variable is updated. */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 414              		.loc 1 946 0
 415 00d8 3A68     		ldr	r2, [r7]
 416 00da F968     		ldr	r1, [r7, #12]
 417 00dc B869     		ldr	r0, [r7, #24]
 418 00de FFF7FEFF 		bl	pxPortInitialiseStack
 419 00e2 0246     		mov	r2, r0
 420 00e4 3B6B     		ldr	r3, [r7, #48]
 421 00e6 1A60     		str	r2, [r3]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 422              		.loc 1 950 0
 423 00e8 FB6A     		ldr	r3, [r7, #44]
 424 00ea 002B     		cmp	r3, #0
 425 00ec 02D0     		beq	.L19
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
ARM GAS  /tmp/cc6ZjiVz.s 			page 29


 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 426              		.loc 1 954 0
 427 00ee FB6A     		ldr	r3, [r7, #44]
 428 00f0 3A6B     		ldr	r2, [r7, #48]
 429 00f2 1A60     		str	r2, [r3]
 430              	.L19:
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 431              		.loc 1 960 0
 432 00f4 00BF     		nop
 433 00f6 2037     		adds	r7, r7, #32
 434              	.LCFI8:
 435              		.cfi_def_cfa_offset 8
 436 00f8 BD46     		mov	sp, r7
 437              	.LCFI9:
 438              		.cfi_def_cfa_register 13
 439              		@ sp needed
 440 00fa 80BD     		pop	{r7, pc}
 441              		.cfi_endproc
 442              	.LFE6:
 444              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 445              		.align	1
 446              		.syntax unified
 447              		.thumb
 448              		.thumb_func
 449              		.fpu fpv4-sp-d16
 451              	prvAddNewTaskToReadyList:
 452              	.LFB7:
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 453              		.loc 1 964 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 8
 456              		@ frame_needed = 1, uses_anonymous_args = 0
 457 0000 80B5     		push	{r7, lr}
 458              	.LCFI10:
 459              		.cfi_def_cfa_offset 8
 460              		.cfi_offset 7, -8
 461              		.cfi_offset 14, -4
 462 0002 82B0     		sub	sp, sp, #8
 463              	.LCFI11:
 464              		.cfi_def_cfa_offset 16
 465 0004 00AF     		add	r7, sp, #0
 466              	.LCFI12:
 467              		.cfi_def_cfa_register 7
 468 0006 7860     		str	r0, [r7, #4]
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 469              		.loc 1 967 0
 470 0008 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  /tmp/cc6ZjiVz.s 			page 30


 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 471              		.loc 1 969 0
 472 000c 2A4B     		ldr	r3, .L25
 473 000e 1B68     		ldr	r3, [r3]
 474 0010 0133     		adds	r3, r3, #1
 475 0012 294A     		ldr	r2, .L25
 476 0014 1360     		str	r3, [r2]
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 477              		.loc 1 970 0
 478 0016 294B     		ldr	r3, .L25+4
 479 0018 1B68     		ldr	r3, [r3]
 480 001a 002B     		cmp	r3, #0
 481 001c 09D1     		bne	.L21
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 482              		.loc 1 974 0
 483 001e 274A     		ldr	r2, .L25+4
 484 0020 7B68     		ldr	r3, [r7, #4]
 485 0022 1360     		str	r3, [r2]
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 486              		.loc 1 976 0
 487 0024 244B     		ldr	r3, .L25
 488 0026 1B68     		ldr	r3, [r3]
 489 0028 012B     		cmp	r3, #1
 490 002a 10D1     		bne	.L22
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 491              		.loc 1 981 0
 492 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 493 0030 0DE0     		b	.L22
 494              	.L21:
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 495              		.loc 1 993 0
 496 0032 234B     		ldr	r3, .L25+8
 497 0034 1B68     		ldr	r3, [r3]
 498 0036 002B     		cmp	r3, #0
 499 0038 09D1     		bne	.L22
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
ARM GAS  /tmp/cc6ZjiVz.s 			page 31


 500              		.loc 1 995 0
 501 003a 204B     		ldr	r3, .L25+4
 502 003c 1B68     		ldr	r3, [r3]
 503 003e DA6A     		ldr	r2, [r3, #44]
 504 0040 7B68     		ldr	r3, [r7, #4]
 505 0042 DB6A     		ldr	r3, [r3, #44]
 506 0044 9A42     		cmp	r2, r3
 507 0046 02D8     		bhi	.L22
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 508              		.loc 1 997 0
 509 0048 1C4A     		ldr	r2, .L25+4
 510 004a 7B68     		ldr	r3, [r7, #4]
 511 004c 1360     		str	r3, [r2]
 512              	.L22:
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 513              		.loc 1 1010 0
 514 004e 1D4B     		ldr	r3, .L25+12
 515 0050 1B68     		ldr	r3, [r3]
 516 0052 0133     		adds	r3, r3, #1
 517 0054 1B4A     		ldr	r2, .L25+12
 518 0056 1360     		str	r3, [r2]
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 519              		.loc 1 1020 0
 520 0058 7B68     		ldr	r3, [r7, #4]
 521 005a DB6A     		ldr	r3, [r3, #44]
 522 005c 0122     		movs	r2, #1
 523 005e 9A40     		lsls	r2, r2, r3
 524 0060 194B     		ldr	r3, .L25+16
 525 0062 1B68     		ldr	r3, [r3]
 526 0064 1343     		orrs	r3, r3, r2
 527 0066 184A     		ldr	r2, .L25+16
 528 0068 1360     		str	r3, [r2]
 529 006a 7B68     		ldr	r3, [r7, #4]
 530 006c DA6A     		ldr	r2, [r3, #44]
 531 006e 1346     		mov	r3, r2
ARM GAS  /tmp/cc6ZjiVz.s 			page 32


 532 0070 9B00     		lsls	r3, r3, #2
 533 0072 1344     		add	r3, r3, r2
 534 0074 9B00     		lsls	r3, r3, #2
 535 0076 154A     		ldr	r2, .L25+20
 536 0078 1A44     		add	r2, r2, r3
 537 007a 7B68     		ldr	r3, [r7, #4]
 538 007c 0433     		adds	r3, r3, #4
 539 007e 1946     		mov	r1, r3
 540 0080 1046     		mov	r0, r2
 541 0082 FFF7FEFF 		bl	vListInsertEnd
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 542              		.loc 1 1024 0
 543 0086 FFF7FEFF 		bl	vPortExitCritical
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 544              		.loc 1 1026 0
 545 008a 0D4B     		ldr	r3, .L25+8
 546 008c 1B68     		ldr	r3, [r3]
 547 008e 002B     		cmp	r3, #0
 548 0090 0ED0     		beq	.L24
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 549              		.loc 1 1030 0
 550 0092 0A4B     		ldr	r3, .L25+4
 551 0094 1B68     		ldr	r3, [r3]
 552 0096 DA6A     		ldr	r2, [r3, #44]
 553 0098 7B68     		ldr	r3, [r7, #4]
 554 009a DB6A     		ldr	r3, [r3, #44]
 555 009c 9A42     		cmp	r2, r3
 556 009e 07D2     		bcs	.L24
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 557              		.loc 1 1032 0
 558 00a0 0B4B     		ldr	r3, .L25+24
 559 00a2 4FF08052 		mov	r2, #268435456
 560 00a6 1A60     		str	r2, [r3]
 561              		.syntax unified
 562              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 563 00a8 BFF34F8F 		dsb
 564              	@ 0 "" 2
 565              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 566 00ac BFF36F8F 		isb
 567              	@ 0 "" 2
 568              		.thumb
 569              		.syntax unified
 570              	.L24:
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cc6ZjiVz.s 			page 33


1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 571              		.loc 1 1043 0
 572 00b0 00BF     		nop
 573 00b2 0837     		adds	r7, r7, #8
 574              	.LCFI13:
 575              		.cfi_def_cfa_offset 8
 576 00b4 BD46     		mov	sp, r7
 577              	.LCFI14:
 578              		.cfi_def_cfa_register 13
 579              		@ sp needed
 580 00b6 80BD     		pop	{r7, pc}
 581              	.L26:
 582              		.align	2
 583              	.L25:
 584 00b8 00000000 		.word	uxCurrentNumberOfTasks
 585 00bc 00000000 		.word	pxCurrentTCB
 586 00c0 00000000 		.word	xSchedulerRunning
 587 00c4 00000000 		.word	uxTaskNumber
 588 00c8 00000000 		.word	uxTopReadyPriority
 589 00cc 00000000 		.word	pxReadyTasksLists
 590 00d0 04ED00E0 		.word	-536810236
 591              		.cfi_endproc
 592              	.LFE7:
 594              		.section	.text.vTaskDelete,"ax",%progbits
 595              		.align	1
 596              		.global	vTaskDelete
 597              		.syntax unified
 598              		.thumb
 599              		.thumb_func
 600              		.fpu fpv4-sp-d16
 602              	vTaskDelete:
 603              	.LFB8:
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 604              		.loc 1 1049 0
 605              		.cfi_startproc
 606              		@ args = 0, pretend = 0, frame = 16
 607              		@ frame_needed = 1, uses_anonymous_args = 0
 608 0000 80B5     		push	{r7, lr}
 609              	.LCFI15:
 610              		.cfi_def_cfa_offset 8
 611              		.cfi_offset 7, -8
 612              		.cfi_offset 14, -4
 613 0002 84B0     		sub	sp, sp, #16
 614              	.LCFI16:
 615              		.cfi_def_cfa_offset 24
 616 0004 00AF     		add	r7, sp, #0
 617              	.LCFI17:
 618              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cc6ZjiVz.s 			page 34


 619 0006 7860     		str	r0, [r7, #4]
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 620              		.loc 1 1052 0
 621 0008 FFF7FEFF 		bl	vPortEnterCritical
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 622              		.loc 1 1056 0
 623 000c 7B68     		ldr	r3, [r7, #4]
 624 000e 002B     		cmp	r3, #0
 625 0010 02D1     		bne	.L28
 626              		.loc 1 1056 0 is_stmt 0 discriminator 1
 627 0012 384B     		ldr	r3, .L39
 628 0014 1B68     		ldr	r3, [r3]
 629 0016 00E0     		b	.L29
 630              	.L28:
 631              		.loc 1 1056 0 discriminator 2
 632 0018 7B68     		ldr	r3, [r7, #4]
 633              	.L29:
 634              		.loc 1 1056 0 discriminator 4
 635 001a FB60     		str	r3, [r7, #12]
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 636              		.loc 1 1059 0 is_stmt 1 discriminator 4
 637 001c FB68     		ldr	r3, [r7, #12]
 638 001e 0433     		adds	r3, r3, #4
 639 0020 1846     		mov	r0, r3
 640 0022 FFF7FEFF 		bl	uxListRemove
 641 0026 0346     		mov	r3, r0
 642 0028 002B     		cmp	r3, #0
 643 002a 15D1     		bne	.L30
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 644              		.loc 1 1061 0
 645 002c FB68     		ldr	r3, [r7, #12]
 646 002e DA6A     		ldr	r2, [r3, #44]
 647 0030 3149     		ldr	r1, .L39+4
 648 0032 1346     		mov	r3, r2
 649 0034 9B00     		lsls	r3, r3, #2
 650 0036 1344     		add	r3, r3, r2
 651 0038 9B00     		lsls	r3, r3, #2
 652 003a 0B44     		add	r3, r3, r1
 653 003c 1B68     		ldr	r3, [r3]
 654 003e 002B     		cmp	r3, #0
 655 0040 0AD1     		bne	.L30
 656              		.loc 1 1061 0 is_stmt 0 discriminator 1
 657 0042 FB68     		ldr	r3, [r7, #12]
 658 0044 DB6A     		ldr	r3, [r3, #44]
 659 0046 0122     		movs	r2, #1
 660 0048 02FA03F3 		lsl	r3, r2, r3
 661 004c DA43     		mvns	r2, r3
 662 004e 2B4B     		ldr	r3, .L39+8
 663 0050 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc6ZjiVz.s 			page 35


 664 0052 1340     		ands	r3, r3, r2
 665 0054 294A     		ldr	r2, .L39+8
 666 0056 1360     		str	r3, [r2]
 667              	.L30:
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 668              		.loc 1 1069 0 is_stmt 1
 669 0058 FB68     		ldr	r3, [r7, #12]
 670 005a 9B6A     		ldr	r3, [r3, #40]
 671 005c 002B     		cmp	r3, #0
 672 005e 04D0     		beq	.L32
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 673              		.loc 1 1071 0
 674 0060 FB68     		ldr	r3, [r7, #12]
 675 0062 1833     		adds	r3, r3, #24
 676 0064 1846     		mov	r0, r3
 677 0066 FFF7FEFF 		bl	uxListRemove
 678              	.L32:
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 679              		.loc 1 1082 0
 680 006a 254B     		ldr	r3, .L39+12
 681 006c 1B68     		ldr	r3, [r3]
 682 006e 0133     		adds	r3, r3, #1
 683 0070 234A     		ldr	r2, .L39+12
 684 0072 1360     		str	r3, [r2]
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 685              		.loc 1 1084 0
 686 0074 1F4B     		ldr	r3, .L39
 687 0076 1B68     		ldr	r3, [r3]
 688 0078 FA68     		ldr	r2, [r7, #12]
 689 007a 9A42     		cmp	r2, r3
 690 007c 0BD1     		bne	.L33
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
ARM GAS  /tmp/cc6ZjiVz.s 			page 36


 691              		.loc 1 1091 0
 692 007e FB68     		ldr	r3, [r7, #12]
 693 0080 0433     		adds	r3, r3, #4
 694 0082 1946     		mov	r1, r3
 695 0084 1F48     		ldr	r0, .L39+16
 696 0086 FFF7FEFF 		bl	vListInsertEnd
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 697              		.loc 1 1096 0
 698 008a 1F4B     		ldr	r3, .L39+20
 699 008c 1B68     		ldr	r3, [r3]
 700 008e 0133     		adds	r3, r3, #1
 701 0090 1D4A     		ldr	r2, .L39+20
 702 0092 1360     		str	r3, [r2]
 703 0094 09E0     		b	.L34
 704              	.L33:
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 705              		.loc 1 1107 0
 706 0096 1D4B     		ldr	r3, .L39+24
 707 0098 1B68     		ldr	r3, [r3]
 708 009a 013B     		subs	r3, r3, #1
 709 009c 1B4A     		ldr	r2, .L39+24
 710 009e 1360     		str	r3, [r2]
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 711              		.loc 1 1108 0
 712 00a0 F868     		ldr	r0, [r7, #12]
 713 00a2 FFF7FEFF 		bl	prvDeleteTCB
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 714              		.loc 1 1112 0
 715 00a6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 716              	.L34:
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 717              		.loc 1 1117 0
 718 00aa FFF7FEFF 		bl	vPortExitCritical
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
ARM GAS  /tmp/cc6ZjiVz.s 			page 37


1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 719              		.loc 1 1121 0
 720 00ae 184B     		ldr	r3, .L39+28
 721 00b0 1B68     		ldr	r3, [r3]
 722 00b2 002B     		cmp	r3, #0
 723 00b4 1AD0     		beq	.L38
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 724              		.loc 1 1123 0
 725 00b6 0F4B     		ldr	r3, .L39
 726 00b8 1B68     		ldr	r3, [r3]
 727 00ba FA68     		ldr	r2, [r7, #12]
 728 00bc 9A42     		cmp	r2, r3
 729 00be 15D1     		bne	.L38
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 730              		.loc 1 1125 0
 731 00c0 144B     		ldr	r3, .L39+32
 732 00c2 1B68     		ldr	r3, [r3]
 733 00c4 002B     		cmp	r3, #0
 734 00c6 09D0     		beq	.L36
 735              	.LBB93:
 736              	.LBB94:
 737              		.loc 2 237 0 discriminator 1
 738              		.syntax unified
 739              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 740 00c8 4FF05003 			mov r3, #80												
 741 00cc 83F31188 		msr basepri, r3											
 742 00d0 BFF36F8F 		isb														
 743 00d4 BFF34F8F 		dsb														
 744              	
 745              	@ 0 "" 2
 746              		.thumb
 747              		.syntax unified
 748 00d8 BB60     		str	r3, [r7, #8]
 749              	.L37:
 750              	.LBE94:
 751              	.LBE93:
 752              		.loc 1 1125 0 discriminator 1
 753 00da FEE7     		b	.L37
 754              	.L36:
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 755              		.loc 1 1126 0
 756 00dc 0E4B     		ldr	r3, .L39+36
 757 00de 4FF08052 		mov	r2, #268435456
 758 00e2 1A60     		str	r2, [r3]
 759              		.syntax unified
 760              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 761 00e4 BFF34F8F 		dsb
 762              	@ 0 "" 2
 763              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 764 00e8 BFF36F8F 		isb
 765              	@ 0 "" 2
 766              		.thumb
 767              		.syntax unified
 768              	.L38:
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cc6ZjiVz.s 			page 38


1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 769              		.loc 1 1133 0
 770 00ec 00BF     		nop
 771 00ee 1037     		adds	r7, r7, #16
 772              	.LCFI18:
 773              		.cfi_def_cfa_offset 8
 774 00f0 BD46     		mov	sp, r7
 775              	.LCFI19:
 776              		.cfi_def_cfa_register 13
 777              		@ sp needed
 778 00f2 80BD     		pop	{r7, pc}
 779              	.L40:
 780              		.align	2
 781              	.L39:
 782 00f4 00000000 		.word	pxCurrentTCB
 783 00f8 00000000 		.word	pxReadyTasksLists
 784 00fc 00000000 		.word	uxTopReadyPriority
 785 0100 00000000 		.word	uxTaskNumber
 786 0104 00000000 		.word	xTasksWaitingTermination
 787 0108 00000000 		.word	uxDeletedTasksWaitingCleanUp
 788 010c 00000000 		.word	uxCurrentNumberOfTasks
 789 0110 00000000 		.word	xSchedulerRunning
 790 0114 00000000 		.word	uxSchedulerSuspended
 791 0118 04ED00E0 		.word	-536810236
 792              		.cfi_endproc
 793              	.LFE8:
 795              		.section	.text.vTaskDelay,"ax",%progbits
 796              		.align	1
 797              		.global	vTaskDelay
 798              		.syntax unified
 799              		.thumb
 800              		.thumb_func
 801              		.fpu fpv4-sp-d16
 803              	vTaskDelay:
 804              	.LFB9:
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cc6ZjiVz.s 			page 39


1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
ARM GAS  /tmp/cc6ZjiVz.s 			page 40


1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 805              		.loc 1 1225 0
 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 16
 808              		@ frame_needed = 1, uses_anonymous_args = 0
 809 0000 80B5     		push	{r7, lr}
 810              	.LCFI20:
 811              		.cfi_def_cfa_offset 8
 812              		.cfi_offset 7, -8
 813              		.cfi_offset 14, -4
 814 0002 84B0     		sub	sp, sp, #16
 815              	.LCFI21:
 816              		.cfi_def_cfa_offset 24
 817 0004 00AF     		add	r7, sp, #0
 818              	.LCFI22:
 819              		.cfi_def_cfa_register 7
 820 0006 7860     		str	r0, [r7, #4]
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 821              		.loc 1 1226 0
 822 0008 0023     		movs	r3, #0
 823 000a FB60     		str	r3, [r7, #12]
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 824              		.loc 1 1229 0
 825 000c 7B68     		ldr	r3, [r7, #4]
 826 000e 002B     		cmp	r3, #0
 827 0010 16D0     		beq	.L42
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 828              		.loc 1 1231 0
 829 0012 134B     		ldr	r3, .L47
 830 0014 1B68     		ldr	r3, [r3]
 831 0016 002B     		cmp	r3, #0
 832 0018 09D0     		beq	.L43
 833              	.LBB95:
 834              	.LBB96:
 835              		.loc 2 237 0 discriminator 1
 836              		.syntax unified
 837              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/cc6ZjiVz.s 			page 41


 838 001a 4FF05003 			mov r3, #80												
 839 001e 83F31188 		msr basepri, r3											
 840 0022 BFF36F8F 		isb														
 841 0026 BFF34F8F 		dsb														
 842              	
 843              	@ 0 "" 2
 844              		.thumb
 845              		.syntax unified
 846 002a BB60     		str	r3, [r7, #8]
 847              	.L44:
 848              	.LBE96:
 849              	.LBE95:
 850              		.loc 1 1231 0 discriminator 1
 851 002c FEE7     		b	.L44
 852              	.L43:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 853              		.loc 1 1232 0
 854 002e FFF7FEFF 		bl	vTaskSuspendAll
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 855              		.loc 1 1243 0
 856 0032 0021     		movs	r1, #0
 857 0034 7868     		ldr	r0, [r7, #4]
 858 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 859              		.loc 1 1245 0
 860 003a FFF7FEFF 		bl	xTaskResumeAll
 861 003e F860     		str	r0, [r7, #12]
 862              	.L42:
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 863              		.loc 1 1254 0
 864 0040 FB68     		ldr	r3, [r7, #12]
 865 0042 002B     		cmp	r3, #0
 866 0044 07D1     		bne	.L46
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 867              		.loc 1 1256 0
 868 0046 074B     		ldr	r3, .L47+4
 869 0048 4FF08052 		mov	r2, #268435456
ARM GAS  /tmp/cc6ZjiVz.s 			page 42


 870 004c 1A60     		str	r2, [r3]
 871              		.syntax unified
 872              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 873 004e BFF34F8F 		dsb
 874              	@ 0 "" 2
 875              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 876 0052 BFF36F8F 		isb
 877              	@ 0 "" 2
 878              		.thumb
 879              		.syntax unified
 880              	.L46:
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 881              		.loc 1 1262 0
 882 0056 00BF     		nop
 883 0058 1037     		adds	r7, r7, #16
 884              	.LCFI23:
 885              		.cfi_def_cfa_offset 8
 886 005a BD46     		mov	sp, r7
 887              	.LCFI24:
 888              		.cfi_def_cfa_register 13
 889              		@ sp needed
 890 005c 80BD     		pop	{r7, pc}
 891              	.L48:
 892 005e 00BF     		.align	2
 893              	.L47:
 894 0060 00000000 		.word	uxSchedulerSuspended
 895 0064 04ED00E0 		.word	-536810236
 896              		.cfi_endproc
 897              	.LFE9:
 899              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 900              		.align	1
 901              		.global	uxTaskPriorityGet
 902              		.syntax unified
 903              		.thumb
 904              		.thumb_func
 905              		.fpu fpv4-sp-d16
 907              	uxTaskPriorityGet:
 908              	.LFB10:
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc6ZjiVz.s 			page 43


1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
ARM GAS  /tmp/cc6ZjiVz.s 			page 44


1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 909              		.loc 1 1341 0
 910              		.cfi_startproc
 911              		@ args = 0, pretend = 0, frame = 16
 912              		@ frame_needed = 1, uses_anonymous_args = 0
 913 0000 80B5     		push	{r7, lr}
 914              	.LCFI25:
 915              		.cfi_def_cfa_offset 8
 916              		.cfi_offset 7, -8
 917              		.cfi_offset 14, -4
 918 0002 84B0     		sub	sp, sp, #16
 919              	.LCFI26:
 920              		.cfi_def_cfa_offset 24
 921 0004 00AF     		add	r7, sp, #0
 922              	.LCFI27:
 923              		.cfi_def_cfa_register 7
 924 0006 7860     		str	r0, [r7, #4]
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 925              		.loc 1 1345 0
 926 0008 FFF7FEFF 		bl	vPortEnterCritical
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 927              		.loc 1 1349 0
 928 000c 7B68     		ldr	r3, [r7, #4]
 929 000e 002B     		cmp	r3, #0
 930 0010 02D1     		bne	.L50
 931              		.loc 1 1349 0 is_stmt 0 discriminator 1
 932 0012 074B     		ldr	r3, .L53
 933 0014 1B68     		ldr	r3, [r3]
 934 0016 00E0     		b	.L51
 935              	.L50:
 936              		.loc 1 1349 0 discriminator 2
 937 0018 7B68     		ldr	r3, [r7, #4]
 938              	.L51:
 939              		.loc 1 1349 0 discriminator 4
 940 001a FB60     		str	r3, [r7, #12]
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 941              		.loc 1 1350 0 is_stmt 1 discriminator 4
 942 001c FB68     		ldr	r3, [r7, #12]
 943 001e DB6A     		ldr	r3, [r3, #44]
 944 0020 BB60     		str	r3, [r7, #8]
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 945              		.loc 1 1352 0 discriminator 4
 946 0022 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/cc6ZjiVz.s 			page 45


1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 947              		.loc 1 1354 0 discriminator 4
 948 0026 BB68     		ldr	r3, [r7, #8]
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 949              		.loc 1 1355 0 discriminator 4
 950 0028 1846     		mov	r0, r3
 951 002a 1037     		adds	r7, r7, #16
 952              	.LCFI28:
 953              		.cfi_def_cfa_offset 8
 954 002c BD46     		mov	sp, r7
 955              	.LCFI29:
 956              		.cfi_def_cfa_register 13
 957              		@ sp needed
 958 002e 80BD     		pop	{r7, pc}
 959              	.L54:
 960              		.align	2
 961              	.L53:
 962 0030 00000000 		.word	pxCurrentTCB
 963              		.cfi_endproc
 964              	.LFE10:
 966              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 967              		.align	1
 968              		.global	uxTaskPriorityGetFromISR
 969              		.syntax unified
 970              		.thumb
 971              		.thumb_func
 972              		.fpu fpv4-sp-d16
 974              	uxTaskPriorityGetFromISR:
 975              	.LFB11:
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976              		.loc 1 1363 0
 977              		.cfi_startproc
 978              		@ args = 0, pretend = 0, frame = 32
 979              		@ frame_needed = 1, uses_anonymous_args = 0
 980 0000 80B5     		push	{r7, lr}
 981              	.LCFI30:
 982              		.cfi_def_cfa_offset 8
 983              		.cfi_offset 7, -8
 984              		.cfi_offset 14, -4
 985 0002 88B0     		sub	sp, sp, #32
 986              	.LCFI31:
 987              		.cfi_def_cfa_offset 40
 988 0004 00AF     		add	r7, sp, #0
 989              	.LCFI32:
 990              		.cfi_def_cfa_register 7
 991 0006 7860     		str	r0, [r7, #4]
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc6ZjiVz.s 			page 46


1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 992              		.loc 1 1383 0
 993 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 994              	.LBB97:
 995              	.LBB98:
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 996              		.loc 2 253 0
 997              		.syntax unified
 998              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 999 000c EFF31182 			mrs r2, basepri											
 1000 0010 4FF05003 		mov r3, #80												
 1001 0014 83F31188 		msr basepri, r3											
 1002 0018 BFF36F8F 		isb														
 1003 001c BFF34F8F 		dsb														
 1004              	
 1005              	@ 0 "" 2
 1006              		.thumb
 1007              		.syntax unified
 1008 0020 3A61     		str	r2, [r7, #16]
 1009 0022 FB60     		str	r3, [r7, #12]
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
ARM GAS  /tmp/cc6ZjiVz.s 			page 47


 260:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1010              		.loc 2 265 0
 1011 0024 3B69     		ldr	r3, [r7, #16]
 1012              	.LBE98:
 1013              	.LBE97:
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1014              		.loc 1 1385 0
 1015 0026 FB61     		str	r3, [r7, #28]
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1016              		.loc 1 1389 0
 1017 0028 7B68     		ldr	r3, [r7, #4]
 1018 002a 002B     		cmp	r3, #0
 1019 002c 02D1     		bne	.L57
 1020              		.loc 1 1389 0 is_stmt 0 discriminator 1
 1021 002e 094B     		ldr	r3, .L60
 1022 0030 1B68     		ldr	r3, [r3]
 1023 0032 00E0     		b	.L58
 1024              	.L57:
 1025              		.loc 1 1389 0 discriminator 2
 1026 0034 7B68     		ldr	r3, [r7, #4]
 1027              	.L58:
 1028              		.loc 1 1389 0 discriminator 4
 1029 0036 BB61     		str	r3, [r7, #24]
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1030              		.loc 1 1390 0 is_stmt 1 discriminator 4
 1031 0038 BB69     		ldr	r3, [r7, #24]
 1032 003a DB6A     		ldr	r3, [r3, #44]
 1033 003c 7B61     		str	r3, [r7, #20]
 1034 003e FB69     		ldr	r3, [r7, #28]
 1035 0040 BB60     		str	r3, [r7, #8]
 1036              	.LBB99:
 1037              	.LBB100:
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1038              		.loc 2 271 0 discriminator 4
 1039 0042 BB68     		ldr	r3, [r7, #8]
 1040              		.syntax unified
 1041              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1042 0044 83F31188 			msr basepri, r3	
 1043              	@ 0 "" 2
 1044              		.thumb
 1045              		.syntax unified
 1046              	.LBE100:
 1047              	.LBE99:
ARM GAS  /tmp/cc6ZjiVz.s 			page 48


1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1048              		.loc 1 1394 0 discriminator 4
 1049 0048 7B69     		ldr	r3, [r7, #20]
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1050              		.loc 1 1395 0 discriminator 4
 1051 004a 1846     		mov	r0, r3
 1052 004c 2037     		adds	r7, r7, #32
 1053              	.LCFI33:
 1054              		.cfi_def_cfa_offset 8
 1055 004e BD46     		mov	sp, r7
 1056              	.LCFI34:
 1057              		.cfi_def_cfa_register 13
 1058              		@ sp needed
 1059 0050 80BD     		pop	{r7, pc}
 1060              	.L61:
 1061 0052 00BF     		.align	2
 1062              	.L60:
 1063 0054 00000000 		.word	pxCurrentTCB
 1064              		.cfi_endproc
 1065              	.LFE11:
 1067              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1068              		.align	1
 1069              		.global	vTaskPrioritySet
 1070              		.syntax unified
 1071              		.thumb
 1072              		.thumb_func
 1073              		.fpu fpv4-sp-d16
 1075              	vTaskPrioritySet:
 1076              	.LFB12:
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1077              		.loc 1 1403 0
 1078              		.cfi_startproc
 1079              		@ args = 0, pretend = 0, frame = 32
 1080              		@ frame_needed = 1, uses_anonymous_args = 0
 1081 0000 80B5     		push	{r7, lr}
 1082              	.LCFI35:
 1083              		.cfi_def_cfa_offset 8
 1084              		.cfi_offset 7, -8
 1085              		.cfi_offset 14, -4
 1086 0002 88B0     		sub	sp, sp, #32
 1087              	.LCFI36:
 1088              		.cfi_def_cfa_offset 40
 1089 0004 00AF     		add	r7, sp, #0
 1090              	.LCFI37:
 1091              		.cfi_def_cfa_register 7
 1092 0006 7860     		str	r0, [r7, #4]
 1093 0008 3960     		str	r1, [r7]
ARM GAS  /tmp/cc6ZjiVz.s 			page 49


1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1094              		.loc 1 1406 0
 1095 000a 0023     		movs	r3, #0
 1096 000c FB61     		str	r3, [r7, #28]
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1097              		.loc 1 1408 0
 1098 000e 3B68     		ldr	r3, [r7]
 1099 0010 062B     		cmp	r3, #6
 1100 0012 09D9     		bls	.L63
 1101              	.LBB101:
 1102              	.LBB102:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1103              		.loc 2 237 0 discriminator 1
 1104              		.syntax unified
 1105              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1106 0014 4FF05003 			mov r3, #80												
 1107 0018 83F31188 		msr basepri, r3											
 1108 001c BFF36F8F 		isb														
 1109 0020 BFF34F8F 		dsb														
 1110              	
 1111              	@ 0 "" 2
 1112              		.thumb
 1113              		.syntax unified
 1114 0024 FB60     		str	r3, [r7, #12]
 1115              	.L64:
 1116              	.LBE102:
 1117              	.LBE101:
 1118              		.loc 1 1408 0 discriminator 1
 1119 0026 FEE7     		b	.L64
 1120              	.L63:
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1121              		.loc 1 1411 0
 1122 0028 3B68     		ldr	r3, [r7]
 1123 002a 062B     		cmp	r3, #6
 1124 002c 01D9     		bls	.L65
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1125              		.loc 1 1413 0
 1126 002e 0623     		movs	r3, #6
 1127 0030 3B60     		str	r3, [r7]
 1128              	.L65:
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1129              		.loc 1 1420 0
 1130 0032 FFF7FEFF 		bl	vPortEnterCritical
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
ARM GAS  /tmp/cc6ZjiVz.s 			page 50


1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1131              		.loc 1 1424 0
 1132 0036 7B68     		ldr	r3, [r7, #4]
 1133 0038 002B     		cmp	r3, #0
 1134 003a 02D1     		bne	.L66
 1135              		.loc 1 1424 0 is_stmt 0 discriminator 1
 1136 003c 434B     		ldr	r3, .L77
 1137 003e 1B68     		ldr	r3, [r3]
 1138 0040 00E0     		b	.L67
 1139              	.L66:
 1140              		.loc 1 1424 0 discriminator 2
 1141 0042 7B68     		ldr	r3, [r7, #4]
 1142              	.L67:
 1143              		.loc 1 1424 0 discriminator 4
 1144 0044 BB61     		str	r3, [r7, #24]
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1145              		.loc 1 1430 0 is_stmt 1 discriminator 4
 1146 0046 BB69     		ldr	r3, [r7, #24]
 1147 0048 5B6C     		ldr	r3, [r3, #68]
 1148 004a 7B61     		str	r3, [r7, #20]
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1149              		.loc 1 1438 0 discriminator 4
 1150 004c 7A69     		ldr	r2, [r7, #20]
 1151 004e 3B68     		ldr	r3, [r7]
 1152 0050 9A42     		cmp	r2, r3
 1153 0052 74D0     		beq	.L68
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1154              		.loc 1 1442 0
 1155 0054 3A68     		ldr	r2, [r7]
 1156 0056 7B69     		ldr	r3, [r7, #20]
 1157 0058 9A42     		cmp	r2, r3
 1158 005a 0DD9     		bls	.L69
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1159              		.loc 1 1444 0
 1160 005c 3B4B     		ldr	r3, .L77
 1161 005e 1B68     		ldr	r3, [r3]
 1162 0060 BA69     		ldr	r2, [r7, #24]
 1163 0062 9A42     		cmp	r2, r3
 1164 0064 0FD0     		beq	.L70
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/cc6ZjiVz.s 			page 51


1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1165              		.loc 1 1449 0
 1166 0066 394B     		ldr	r3, .L77
 1167 0068 1B68     		ldr	r3, [r3]
 1168 006a DA6A     		ldr	r2, [r3, #44]
 1169 006c 3B68     		ldr	r3, [r7]
 1170 006e 9A42     		cmp	r2, r3
 1171 0070 09D8     		bhi	.L70
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1172              		.loc 1 1451 0
 1173 0072 0123     		movs	r3, #1
 1174 0074 FB61     		str	r3, [r7, #28]
 1175 0076 06E0     		b	.L70
 1176              	.L69:
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1177              		.loc 1 1465 0
 1178 0078 344B     		ldr	r3, .L77
 1179 007a 1B68     		ldr	r3, [r3]
 1180 007c BA69     		ldr	r2, [r7, #24]
 1181 007e 9A42     		cmp	r2, r3
 1182 0080 01D1     		bne	.L70
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1183              		.loc 1 1470 0
 1184 0082 0123     		movs	r3, #1
 1185 0084 FB61     		str	r3, [r7, #28]
 1186              	.L70:
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
ARM GAS  /tmp/cc6ZjiVz.s 			page 52


1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1187              		.loc 1 1482 0
 1188 0086 BB69     		ldr	r3, [r7, #24]
 1189 0088 DB6A     		ldr	r3, [r3, #44]
 1190 008a 3B61     		str	r3, [r7, #16]
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1191              		.loc 1 1488 0
 1192 008c BB69     		ldr	r3, [r7, #24]
 1193 008e 5A6C     		ldr	r2, [r3, #68]
 1194 0090 BB69     		ldr	r3, [r7, #24]
 1195 0092 DB6A     		ldr	r3, [r3, #44]
 1196 0094 9A42     		cmp	r2, r3
 1197 0096 02D1     		bne	.L71
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1198              		.loc 1 1490 0
 1199 0098 BB69     		ldr	r3, [r7, #24]
 1200 009a 3A68     		ldr	r2, [r7]
 1201 009c DA62     		str	r2, [r3, #44]
 1202              	.L71:
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1203              		.loc 1 1498 0
 1204 009e BB69     		ldr	r3, [r7, #24]
 1205 00a0 3A68     		ldr	r2, [r7]
 1206 00a2 5A64     		str	r2, [r3, #68]
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1207              		.loc 1 1508 0
 1208 00a4 BB69     		ldr	r3, [r7, #24]
 1209 00a6 9B69     		ldr	r3, [r3, #24]
 1210 00a8 002B     		cmp	r3, #0
 1211 00aa 04DB     		blt	.L72
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1212              		.loc 1 1510 0
 1213 00ac 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/cc6ZjiVz.s 			page 53


 1214 00ae C3F10702 		rsb	r2, r3, #7
 1215 00b2 BB69     		ldr	r3, [r7, #24]
 1216 00b4 9A61     		str	r2, [r3, #24]
 1217              	.L72:
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1218              		.loc 1 1521 0
 1219 00b6 BB69     		ldr	r3, [r7, #24]
 1220 00b8 5969     		ldr	r1, [r3, #20]
 1221 00ba 3A69     		ldr	r2, [r7, #16]
 1222 00bc 1346     		mov	r3, r2
 1223 00be 9B00     		lsls	r3, r3, #2
 1224 00c0 1344     		add	r3, r3, r2
 1225 00c2 9B00     		lsls	r3, r3, #2
 1226 00c4 224A     		ldr	r2, .L77+4
 1227 00c6 1344     		add	r3, r3, r2
 1228 00c8 9942     		cmp	r1, r3
 1229 00ca 01D1     		bne	.L73
 1230              		.loc 1 1521 0 is_stmt 0 discriminator 1
 1231 00cc 0123     		movs	r3, #1
 1232 00ce 00E0     		b	.L74
 1233              	.L73:
 1234              		.loc 1 1521 0 discriminator 2
 1235 00d0 0023     		movs	r3, #0
 1236              	.L74:
 1237              		.loc 1 1521 0 discriminator 4
 1238 00d2 002B     		cmp	r3, #0
 1239 00d4 28D0     		beq	.L75
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1240              		.loc 1 1526 0 is_stmt 1
 1241 00d6 BB69     		ldr	r3, [r7, #24]
 1242 00d8 0433     		adds	r3, r3, #4
 1243 00da 1846     		mov	r0, r3
 1244 00dc FFF7FEFF 		bl	uxListRemove
 1245 00e0 0346     		mov	r3, r0
 1246 00e2 002B     		cmp	r3, #0
 1247 00e4 09D1     		bne	.L76
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1248              		.loc 1 1531 0
 1249 00e6 0122     		movs	r2, #1
ARM GAS  /tmp/cc6ZjiVz.s 			page 54


 1250 00e8 3B69     		ldr	r3, [r7, #16]
 1251 00ea 02FA03F3 		lsl	r3, r2, r3
 1252 00ee DA43     		mvns	r2, r3
 1253 00f0 184B     		ldr	r3, .L77+8
 1254 00f2 1B68     		ldr	r3, [r3]
 1255 00f4 1340     		ands	r3, r3, r2
 1256 00f6 174A     		ldr	r2, .L77+8
 1257 00f8 1360     		str	r3, [r2]
 1258              	.L76:
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1259              		.loc 1 1537 0
 1260 00fa BB69     		ldr	r3, [r7, #24]
 1261 00fc DB6A     		ldr	r3, [r3, #44]
 1262 00fe 0122     		movs	r2, #1
 1263 0100 9A40     		lsls	r2, r2, r3
 1264 0102 144B     		ldr	r3, .L77+8
 1265 0104 1B68     		ldr	r3, [r3]
 1266 0106 1343     		orrs	r3, r3, r2
 1267 0108 124A     		ldr	r2, .L77+8
 1268 010a 1360     		str	r3, [r2]
 1269 010c BB69     		ldr	r3, [r7, #24]
 1270 010e DA6A     		ldr	r2, [r3, #44]
 1271 0110 1346     		mov	r3, r2
 1272 0112 9B00     		lsls	r3, r3, #2
 1273 0114 1344     		add	r3, r3, r2
 1274 0116 9B00     		lsls	r3, r3, #2
 1275 0118 0D4A     		ldr	r2, .L77+4
 1276 011a 1A44     		add	r2, r2, r3
 1277 011c BB69     		ldr	r3, [r7, #24]
 1278 011e 0433     		adds	r3, r3, #4
 1279 0120 1946     		mov	r1, r3
 1280 0122 1046     		mov	r0, r2
 1281 0124 FFF7FEFF 		bl	vListInsertEnd
 1282              	.L75:
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1283              		.loc 1 1544 0
 1284 0128 FB69     		ldr	r3, [r7, #28]
 1285 012a 002B     		cmp	r3, #0
 1286 012c 07D0     		beq	.L68
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1287              		.loc 1 1546 0
 1288 012e 0A4B     		ldr	r3, .L77+12
 1289 0130 4FF08052 		mov	r2, #268435456
 1290 0134 1A60     		str	r2, [r3]
 1291              		.syntax unified
ARM GAS  /tmp/cc6ZjiVz.s 			page 55


 1292              	@ 1546 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1293 0136 BFF34F8F 		dsb
 1294              	@ 0 "" 2
 1295              	@ 1546 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1296 013a BFF36F8F 		isb
 1297              	@ 0 "" 2
 1298              		.thumb
 1299              		.syntax unified
 1300              	.L68:
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1301              		.loc 1 1558 0
 1302 013e FFF7FEFF 		bl	vPortExitCritical
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1303              		.loc 1 1559 0
 1304 0142 00BF     		nop
 1305 0144 2037     		adds	r7, r7, #32
 1306              	.LCFI38:
 1307              		.cfi_def_cfa_offset 8
 1308 0146 BD46     		mov	sp, r7
 1309              	.LCFI39:
 1310              		.cfi_def_cfa_register 13
 1311              		@ sp needed
 1312 0148 80BD     		pop	{r7, pc}
 1313              	.L78:
 1314 014a 00BF     		.align	2
 1315              	.L77:
 1316 014c 00000000 		.word	pxCurrentTCB
 1317 0150 00000000 		.word	pxReadyTasksLists
 1318 0154 00000000 		.word	uxTopReadyPriority
 1319 0158 04ED00E0 		.word	-536810236
 1320              		.cfi_endproc
 1321              	.LFE12:
 1323              		.section	.text.vTaskSuspend,"ax",%progbits
 1324              		.align	1
 1325              		.global	vTaskSuspend
 1326              		.syntax unified
 1327              		.thumb
 1328              		.thumb_func
 1329              		.fpu fpv4-sp-d16
 1331              	vTaskSuspend:
 1332              	.LFB13:
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  /tmp/cc6ZjiVz.s 			page 56


1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1333              		.loc 1 1567 0
 1334              		.cfi_startproc
 1335              		@ args = 0, pretend = 0, frame = 16
 1336              		@ frame_needed = 1, uses_anonymous_args = 0
 1337 0000 80B5     		push	{r7, lr}
 1338              	.LCFI40:
 1339              		.cfi_def_cfa_offset 8
 1340              		.cfi_offset 7, -8
 1341              		.cfi_offset 14, -4
 1342 0002 84B0     		sub	sp, sp, #16
 1343              	.LCFI41:
 1344              		.cfi_def_cfa_offset 24
 1345 0004 00AF     		add	r7, sp, #0
 1346              	.LCFI42:
 1347              		.cfi_def_cfa_register 7
 1348 0006 7860     		str	r0, [r7, #4]
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1349              		.loc 1 1570 0
 1350 0008 FFF7FEFF 		bl	vPortEnterCritical
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1351              		.loc 1 1574 0
 1352 000c 7B68     		ldr	r3, [r7, #4]
 1353 000e 002B     		cmp	r3, #0
 1354 0010 02D1     		bne	.L80
 1355              		.loc 1 1574 0 is_stmt 0 discriminator 1
 1356 0012 374B     		ldr	r3, .L93
 1357 0014 1B68     		ldr	r3, [r3]
 1358 0016 00E0     		b	.L81
 1359              	.L80:
 1360              		.loc 1 1574 0 discriminator 2
 1361 0018 7B68     		ldr	r3, [r7, #4]
 1362              	.L81:
 1363              		.loc 1 1574 0 discriminator 4
 1364 001a FB60     		str	r3, [r7, #12]
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1365              		.loc 1 1580 0 is_stmt 1 discriminator 4
 1366 001c FB68     		ldr	r3, [r7, #12]
 1367 001e 0433     		adds	r3, r3, #4
 1368 0020 1846     		mov	r0, r3
 1369 0022 FFF7FEFF 		bl	uxListRemove
 1370 0026 0346     		mov	r3, r0
 1371 0028 002B     		cmp	r3, #0
 1372 002a 15D1     		bne	.L82
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cc6ZjiVz.s 			page 57


1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1373              		.loc 1 1582 0
 1374 002c FB68     		ldr	r3, [r7, #12]
 1375 002e DA6A     		ldr	r2, [r3, #44]
 1376 0030 3049     		ldr	r1, .L93+4
 1377 0032 1346     		mov	r3, r2
 1378 0034 9B00     		lsls	r3, r3, #2
 1379 0036 1344     		add	r3, r3, r2
 1380 0038 9B00     		lsls	r3, r3, #2
 1381 003a 0B44     		add	r3, r3, r1
 1382 003c 1B68     		ldr	r3, [r3]
 1383 003e 002B     		cmp	r3, #0
 1384 0040 0AD1     		bne	.L82
 1385              		.loc 1 1582 0 is_stmt 0 discriminator 1
 1386 0042 FB68     		ldr	r3, [r7, #12]
 1387 0044 DB6A     		ldr	r3, [r3, #44]
 1388 0046 0122     		movs	r2, #1
 1389 0048 02FA03F3 		lsl	r3, r2, r3
 1390 004c DA43     		mvns	r2, r3
 1391 004e 2A4B     		ldr	r3, .L93+8
 1392 0050 1B68     		ldr	r3, [r3]
 1393 0052 1340     		ands	r3, r3, r2
 1394 0054 284A     		ldr	r2, .L93+8
 1395 0056 1360     		str	r3, [r2]
 1396              	.L82:
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1397              		.loc 1 1590 0 is_stmt 1
 1398 0058 FB68     		ldr	r3, [r7, #12]
 1399 005a 9B6A     		ldr	r3, [r3, #40]
 1400 005c 002B     		cmp	r3, #0
 1401 005e 04D0     		beq	.L84
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1402              		.loc 1 1592 0
 1403 0060 FB68     		ldr	r3, [r7, #12]
 1404 0062 1833     		adds	r3, r3, #24
 1405 0064 1846     		mov	r0, r3
 1406 0066 FFF7FEFF 		bl	uxListRemove
 1407              	.L84:
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1408              		.loc 1 1599 0
 1409 006a FB68     		ldr	r3, [r7, #12]
 1410 006c 0433     		adds	r3, r3, #4
 1411 006e 1946     		mov	r1, r3
ARM GAS  /tmp/cc6ZjiVz.s 			page 58


 1412 0070 2248     		ldr	r0, .L93+12
 1413 0072 FFF7FEFF 		bl	vListInsertEnd
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1414              		.loc 1 1601 0
 1415 0076 FFF7FEFF 		bl	vPortExitCritical
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1416              		.loc 1 1603 0
 1417 007a 214B     		ldr	r3, .L93+16
 1418 007c 1B68     		ldr	r3, [r3]
 1419 007e 002B     		cmp	r3, #0
 1420 0080 05D0     		beq	.L85
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1421              		.loc 1 1607 0
 1422 0082 FFF7FEFF 		bl	vPortEnterCritical
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1423              		.loc 1 1609 0
 1424 0086 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1425              		.loc 1 1611 0
 1426 008a FFF7FEFF 		bl	vPortExitCritical
 1427              	.L85:
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1428              		.loc 1 1618 0
 1429 008e 184B     		ldr	r3, .L93
 1430 0090 1B68     		ldr	r3, [r3]
 1431 0092 FA68     		ldr	r2, [r7, #12]
 1432 0094 9A42     		cmp	r2, r3
 1433 0096 26D1     		bne	.L92
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1434              		.loc 1 1620 0
 1435 0098 194B     		ldr	r3, .L93+16
 1436 009a 1B68     		ldr	r3, [r3]
 1437 009c 002B     		cmp	r3, #0
 1438 009e 16D0     		beq	.L87
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1439              		.loc 1 1623 0
 1440 00a0 184B     		ldr	r3, .L93+20
 1441 00a2 1B68     		ldr	r3, [r3]
 1442 00a4 002B     		cmp	r3, #0
 1443 00a6 09D0     		beq	.L88
 1444              	.LBB103:
ARM GAS  /tmp/cc6ZjiVz.s 			page 59


 1445              	.LBB104:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1446              		.loc 2 237 0 discriminator 1
 1447              		.syntax unified
 1448              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1449 00a8 4FF05003 			mov r3, #80												
 1450 00ac 83F31188 		msr basepri, r3											
 1451 00b0 BFF36F8F 		isb														
 1452 00b4 BFF34F8F 		dsb														
 1453              	
 1454              	@ 0 "" 2
 1455              		.thumb
 1456              		.syntax unified
 1457 00b8 BB60     		str	r3, [r7, #8]
 1458              	.L89:
 1459              	.LBE104:
 1460              	.LBE103:
 1461              		.loc 1 1623 0 discriminator 1
 1462 00ba FEE7     		b	.L89
 1463              	.L88:
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1464              		.loc 1 1624 0
 1465 00bc 124B     		ldr	r3, .L93+24
 1466 00be 4FF08052 		mov	r2, #268435456
 1467 00c2 1A60     		str	r2, [r3]
 1468              		.syntax unified
 1469              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1470 00c4 BFF34F8F 		dsb
 1471              	@ 0 "" 2
 1472              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1473 00c8 BFF36F8F 		isb
 1474              	@ 0 "" 2
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cc6ZjiVz.s 			page 60


 1475              		.loc 1 1649 0
 1476              		.thumb
 1477              		.syntax unified
 1478 00cc 0BE0     		b	.L92
 1479              	.L87:
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1480              		.loc 1 1631 0
 1481 00ce 0B4B     		ldr	r3, .L93+12
 1482 00d0 1A68     		ldr	r2, [r3]
 1483 00d2 0E4B     		ldr	r3, .L93+28
 1484 00d4 1B68     		ldr	r3, [r3]
 1485 00d6 9A42     		cmp	r2, r3
 1486 00d8 03D1     		bne	.L91
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1487              		.loc 1 1637 0
 1488 00da 054B     		ldr	r3, .L93
 1489 00dc 0022     		movs	r2, #0
 1490 00de 1A60     		str	r2, [r3]
 1491              		.loc 1 1649 0
 1492 00e0 01E0     		b	.L92
 1493              	.L91:
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1494              		.loc 1 1641 0
 1495 00e2 FFF7FEFF 		bl	vTaskSwitchContext
 1496              	.L92:
 1497              		.loc 1 1649 0
 1498 00e6 00BF     		nop
 1499 00e8 1037     		adds	r7, r7, #16
 1500              	.LCFI43:
 1501              		.cfi_def_cfa_offset 8
 1502 00ea BD46     		mov	sp, r7
 1503              	.LCFI44:
 1504              		.cfi_def_cfa_register 13
 1505              		@ sp needed
 1506 00ec 80BD     		pop	{r7, pc}
 1507              	.L94:
 1508 00ee 00BF     		.align	2
 1509              	.L93:
 1510 00f0 00000000 		.word	pxCurrentTCB
 1511 00f4 00000000 		.word	pxReadyTasksLists
 1512 00f8 00000000 		.word	uxTopReadyPriority
 1513 00fc 00000000 		.word	xSuspendedTaskList
 1514 0100 00000000 		.word	xSchedulerRunning
 1515 0104 00000000 		.word	uxSchedulerSuspended
 1516 0108 04ED00E0 		.word	-536810236
 1517 010c 00000000 		.word	uxCurrentNumberOfTasks
 1518              		.cfi_endproc
 1519              	.LFE13:
 1521              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1522              		.align	1
 1523              		.syntax unified
 1524              		.thumb
 1525              		.thumb_func
 1526              		.fpu fpv4-sp-d16
 1528              	prvTaskIsTaskSuspended:
 1529              	.LFB14:
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc6ZjiVz.s 			page 61


1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1530              		.loc 1 1657 0
 1531              		.cfi_startproc
 1532              		@ args = 0, pretend = 0, frame = 24
 1533              		@ frame_needed = 1, uses_anonymous_args = 0
 1534              		@ link register save eliminated.
 1535 0000 80B4     		push	{r7}
 1536              	.LCFI45:
 1537              		.cfi_def_cfa_offset 4
 1538              		.cfi_offset 7, -4
 1539 0002 87B0     		sub	sp, sp, #28
 1540              	.LCFI46:
 1541              		.cfi_def_cfa_offset 32
 1542 0004 00AF     		add	r7, sp, #0
 1543              	.LCFI47:
 1544              		.cfi_def_cfa_register 7
 1545 0006 7860     		str	r0, [r7, #4]
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1546              		.loc 1 1658 0
 1547 0008 0023     		movs	r3, #0
 1548 000a 7B61     		str	r3, [r7, #20]
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1549              		.loc 1 1659 0
 1550 000c 7B68     		ldr	r3, [r7, #4]
 1551 000e 3B61     		str	r3, [r7, #16]
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 1552              		.loc 1 1665 0
 1553 0010 7B68     		ldr	r3, [r7, #4]
 1554 0012 002B     		cmp	r3, #0
 1555 0014 09D1     		bne	.L96
 1556              	.LBB105:
 1557              	.LBB106:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1558              		.loc 2 237 0 discriminator 1
 1559              		.syntax unified
 1560              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1561 0016 4FF05003 			mov r3, #80												
 1562 001a 83F31188 		msr basepri, r3											
 1563 001e BFF36F8F 		isb														
 1564 0022 BFF34F8F 		dsb														
 1565              	
 1566              	@ 0 "" 2
 1567              		.thumb
 1568              		.syntax unified
 1569 0026 FB60     		str	r3, [r7, #12]
 1570              	.L97:
ARM GAS  /tmp/cc6ZjiVz.s 			page 62


 1571              	.LBE106:
 1572              	.LBE105:
 1573              		.loc 1 1665 0 discriminator 1
 1574 0028 FEE7     		b	.L97
 1575              	.L96:
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1576              		.loc 1 1668 0
 1577 002a 3B69     		ldr	r3, [r7, #16]
 1578 002c 5B69     		ldr	r3, [r3, #20]
 1579 002e 0F4A     		ldr	r2, .L104
 1580 0030 9342     		cmp	r3, r2
 1581 0032 01D1     		bne	.L98
 1582              		.loc 1 1668 0 is_stmt 0 discriminator 1
 1583 0034 0123     		movs	r3, #1
 1584 0036 00E0     		b	.L99
 1585              	.L98:
 1586              		.loc 1 1668 0 discriminator 2
 1587 0038 0023     		movs	r3, #0
 1588              	.L99:
 1589              		.loc 1 1668 0 discriminator 4
 1590 003a 002B     		cmp	r3, #0
 1591 003c 0FD0     		beq	.L100
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1592              		.loc 1 1671 0 is_stmt 1
 1593 003e 3B69     		ldr	r3, [r7, #16]
 1594 0040 9B6A     		ldr	r3, [r3, #40]
 1595 0042 0B4A     		ldr	r2, .L104+4
 1596 0044 9342     		cmp	r3, r2
 1597 0046 0AD0     		beq	.L100
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 1598              		.loc 1 1675 0
 1599 0048 3B69     		ldr	r3, [r7, #16]
 1600 004a 9B6A     		ldr	r3, [r3, #40]
 1601 004c 002B     		cmp	r3, #0
 1602 004e 01D1     		bne	.L101
 1603              		.loc 1 1675 0 is_stmt 0 discriminator 1
 1604 0050 0123     		movs	r3, #1
 1605 0052 00E0     		b	.L102
 1606              	.L101:
 1607              		.loc 1 1675 0 discriminator 2
 1608 0054 0023     		movs	r3, #0
 1609              	.L102:
 1610              		.loc 1 1675 0 discriminator 4
 1611 0056 002B     		cmp	r3, #0
 1612 0058 01D0     		beq	.L100
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 1613              		.loc 1 1677 0 is_stmt 1
 1614 005a 0123     		movs	r3, #1
 1615 005c 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/cc6ZjiVz.s 			page 63


 1616              	.L100:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 1617              		.loc 1 1694 0
 1618 005e 7B69     		ldr	r3, [r7, #20]
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1619              		.loc 1 1695 0
 1620 0060 1846     		mov	r0, r3
 1621 0062 1C37     		adds	r7, r7, #28
 1622              	.LCFI48:
 1623              		.cfi_def_cfa_offset 4
 1624 0064 BD46     		mov	sp, r7
 1625              	.LCFI49:
 1626              		.cfi_def_cfa_register 13
 1627              		@ sp needed
 1628 0066 5DF8047B 		ldr	r7, [sp], #4
 1629              	.LCFI50:
 1630              		.cfi_restore 7
 1631              		.cfi_def_cfa_offset 0
 1632 006a 7047     		bx	lr
 1633              	.L105:
 1634              		.align	2
 1635              	.L104:
 1636 006c 00000000 		.word	xSuspendedTaskList
 1637 0070 00000000 		.word	xPendingReadyList
 1638              		.cfi_endproc
 1639              	.LFE14:
 1641              		.section	.text.vTaskResume,"ax",%progbits
 1642              		.align	1
 1643              		.global	vTaskResume
 1644              		.syntax unified
 1645              		.thumb
 1646              		.thumb_func
 1647              		.fpu fpv4-sp-d16
 1649              	vTaskResume:
 1650              	.LFB15:
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc6ZjiVz.s 			page 64


1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1651              		.loc 1 1703 0
 1652              		.cfi_startproc
 1653              		@ args = 0, pretend = 0, frame = 16
 1654              		@ frame_needed = 1, uses_anonymous_args = 0
 1655 0000 80B5     		push	{r7, lr}
 1656              	.LCFI51:
 1657              		.cfi_def_cfa_offset 8
 1658              		.cfi_offset 7, -8
 1659              		.cfi_offset 14, -4
 1660 0002 84B0     		sub	sp, sp, #16
 1661              	.LCFI52:
 1662              		.cfi_def_cfa_offset 24
 1663 0004 00AF     		add	r7, sp, #0
 1664              	.LCFI53:
 1665              		.cfi_def_cfa_register 7
 1666 0006 7860     		str	r0, [r7, #4]
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1667              		.loc 1 1704 0
 1668 0008 7B68     		ldr	r3, [r7, #4]
 1669 000a FB60     		str	r3, [r7, #12]
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 1670              		.loc 1 1707 0
 1671 000c 7B68     		ldr	r3, [r7, #4]
 1672 000e 002B     		cmp	r3, #0
 1673 0010 09D1     		bne	.L107
 1674              	.LBB107:
 1675              	.LBB108:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1676              		.loc 2 237 0 discriminator 1
 1677              		.syntax unified
 1678              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1679 0012 4FF05003 			mov r3, #80												
 1680 0016 83F31188 		msr basepri, r3											
 1681 001a BFF36F8F 		isb														
 1682 001e BFF34F8F 		dsb														
 1683              	
 1684              	@ 0 "" 2
 1685              		.thumb
 1686              		.syntax unified
 1687 0022 BB60     		str	r3, [r7, #8]
 1688              	.L108:
 1689              	.LBE108:
 1690              	.LBE107:
 1691              		.loc 1 1707 0 discriminator 1
 1692 0024 FEE7     		b	.L108
 1693              	.L107:
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1694              		.loc 1 1711 0
 1695 0026 FB68     		ldr	r3, [r7, #12]
 1696 0028 002B     		cmp	r3, #0
ARM GAS  /tmp/cc6ZjiVz.s 			page 65


 1697 002a 39D0     		beq	.L111
 1698              		.loc 1 1711 0 is_stmt 0 discriminator 1
 1699 002c 1E4B     		ldr	r3, .L112
 1700 002e 1B68     		ldr	r3, [r3]
 1701 0030 FA68     		ldr	r2, [r7, #12]
 1702 0032 9A42     		cmp	r2, r3
 1703 0034 34D0     		beq	.L111
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1704              		.loc 1 1713 0 is_stmt 1
 1705 0036 FFF7FEFF 		bl	vPortEnterCritical
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1706              		.loc 1 1715 0
 1707 003a F868     		ldr	r0, [r7, #12]
 1708 003c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1709 0040 0346     		mov	r3, r0
 1710 0042 002B     		cmp	r3, #0
 1711 0044 2AD0     		beq	.L110
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1712              		.loc 1 1721 0
 1713 0046 FB68     		ldr	r3, [r7, #12]
 1714 0048 0433     		adds	r3, r3, #4
 1715 004a 1846     		mov	r0, r3
 1716 004c FFF7FEFF 		bl	uxListRemove
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1717              		.loc 1 1722 0
 1718 0050 FB68     		ldr	r3, [r7, #12]
 1719 0052 DB6A     		ldr	r3, [r3, #44]
 1720 0054 0122     		movs	r2, #1
 1721 0056 9A40     		lsls	r2, r2, r3
 1722 0058 144B     		ldr	r3, .L112+4
 1723 005a 1B68     		ldr	r3, [r3]
 1724 005c 1343     		orrs	r3, r3, r2
 1725 005e 134A     		ldr	r2, .L112+4
 1726 0060 1360     		str	r3, [r2]
 1727 0062 FB68     		ldr	r3, [r7, #12]
 1728 0064 DA6A     		ldr	r2, [r3, #44]
 1729 0066 1346     		mov	r3, r2
 1730 0068 9B00     		lsls	r3, r3, #2
 1731 006a 1344     		add	r3, r3, r2
 1732 006c 9B00     		lsls	r3, r3, #2
 1733 006e 104A     		ldr	r2, .L112+8
 1734 0070 1A44     		add	r2, r2, r3
 1735 0072 FB68     		ldr	r3, [r7, #12]
 1736 0074 0433     		adds	r3, r3, #4
 1737 0076 1946     		mov	r1, r3
 1738 0078 1046     		mov	r0, r2
 1739 007a FFF7FEFF 		bl	vListInsertEnd
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
ARM GAS  /tmp/cc6ZjiVz.s 			page 66


 1740              		.loc 1 1725 0
 1741 007e FB68     		ldr	r3, [r7, #12]
 1742 0080 DA6A     		ldr	r2, [r3, #44]
 1743 0082 094B     		ldr	r3, .L112
 1744 0084 1B68     		ldr	r3, [r3]
 1745 0086 DB6A     		ldr	r3, [r3, #44]
 1746 0088 9A42     		cmp	r2, r3
 1747 008a 07D3     		bcc	.L110
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1748              		.loc 1 1730 0
 1749 008c 094B     		ldr	r3, .L112+12
 1750 008e 4FF08052 		mov	r2, #268435456
 1751 0092 1A60     		str	r2, [r3]
 1752              		.syntax unified
 1753              	@ 1730 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1754 0094 BFF34F8F 		dsb
 1755              	@ 0 "" 2
 1756              	@ 1730 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1757 0098 BFF36F8F 		isb
 1758              	@ 0 "" 2
 1759              		.thumb
 1760              		.syntax unified
 1761              	.L110:
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1762              		.loc 1 1742 0
 1763 009c FFF7FEFF 		bl	vPortExitCritical
 1764              	.L111:
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1765              		.loc 1 1748 0
 1766 00a0 00BF     		nop
 1767 00a2 1037     		adds	r7, r7, #16
 1768              	.LCFI54:
 1769              		.cfi_def_cfa_offset 8
 1770 00a4 BD46     		mov	sp, r7
 1771              	.LCFI55:
 1772              		.cfi_def_cfa_register 13
 1773              		@ sp needed
ARM GAS  /tmp/cc6ZjiVz.s 			page 67


 1774 00a6 80BD     		pop	{r7, pc}
 1775              	.L113:
 1776              		.align	2
 1777              	.L112:
 1778 00a8 00000000 		.word	pxCurrentTCB
 1779 00ac 00000000 		.word	uxTopReadyPriority
 1780 00b0 00000000 		.word	pxReadyTasksLists
 1781 00b4 04ED00E0 		.word	-536810236
 1782              		.cfi_endproc
 1783              	.LFE15:
 1785              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1786              		.align	1
 1787              		.global	xTaskResumeFromISR
 1788              		.syntax unified
 1789              		.thumb
 1790              		.thumb_func
 1791              		.fpu fpv4-sp-d16
 1793              	xTaskResumeFromISR:
 1794              	.LFB16:
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1795              		.loc 1 1757 0
 1796              		.cfi_startproc
 1797              		@ args = 0, pretend = 0, frame = 40
 1798              		@ frame_needed = 1, uses_anonymous_args = 0
 1799 0000 80B5     		push	{r7, lr}
 1800              	.LCFI56:
 1801              		.cfi_def_cfa_offset 8
 1802              		.cfi_offset 7, -8
 1803              		.cfi_offset 14, -4
 1804 0002 8AB0     		sub	sp, sp, #40
 1805              	.LCFI57:
 1806              		.cfi_def_cfa_offset 48
 1807 0004 00AF     		add	r7, sp, #0
 1808              	.LCFI58:
 1809              		.cfi_def_cfa_register 7
 1810 0006 7860     		str	r0, [r7, #4]
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1811              		.loc 1 1758 0
 1812 0008 0023     		movs	r3, #0
 1813 000a 7B62     		str	r3, [r7, #36]
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1814              		.loc 1 1759 0
 1815 000c 7B68     		ldr	r3, [r7, #4]
 1816 000e 3B62     		str	r3, [r7, #32]
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 1817              		.loc 1 1762 0
 1818 0010 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc6ZjiVz.s 			page 68


 1819 0012 002B     		cmp	r3, #0
 1820 0014 09D1     		bne	.L115
 1821              	.LBB109:
 1822              	.LBB110:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1823              		.loc 2 237 0 discriminator 1
 1824              		.syntax unified
 1825              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1826 0016 4FF05003 			mov r3, #80												
 1827 001a 83F31188 		msr basepri, r3											
 1828 001e BFF36F8F 		isb														
 1829 0022 BFF34F8F 		dsb														
 1830              	
 1831              	@ 0 "" 2
 1832              		.thumb
 1833              		.syntax unified
 1834 0026 BB61     		str	r3, [r7, #24]
 1835              	.L116:
 1836              	.LBE110:
 1837              	.LBE109:
 1838              		.loc 1 1762 0 discriminator 1
 1839 0028 FEE7     		b	.L116
 1840              	.L115:
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1841              		.loc 1 1780 0
 1842 002a FFF7FEFF 		bl	vPortValidateInterruptPriority
 1843              	.LBB111:
 1844              	.LBB112:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1845              		.loc 2 253 0
 1846              		.syntax unified
 1847              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1848 002e EFF31182 			mrs r2, basepri											
 1849 0032 4FF05003 		mov r3, #80												
 1850 0036 83F31188 		msr basepri, r3											
 1851 003a BFF36F8F 		isb														
 1852 003e BFF34F8F 		dsb														
 1853              	
 1854              	@ 0 "" 2
 1855              		.thumb
ARM GAS  /tmp/cc6ZjiVz.s 			page 69


 1856              		.syntax unified
 1857 0042 7A61     		str	r2, [r7, #20]
 1858 0044 3B61     		str	r3, [r7, #16]
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1859              		.loc 2 265 0
 1860 0046 7B69     		ldr	r3, [r7, #20]
 1861              	.LBE112:
 1862              	.LBE111:
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1863              		.loc 1 1782 0
 1864 0048 FB61     		str	r3, [r7, #28]
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1865              		.loc 1 1784 0
 1866 004a 386A     		ldr	r0, [r7, #32]
 1867 004c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1868 0050 0346     		mov	r3, r0
 1869 0052 002B     		cmp	r3, #0
 1870 0054 2FD0     		beq	.L118
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1871              		.loc 1 1789 0
 1872 0056 1D4B     		ldr	r3, .L123
 1873 0058 1B68     		ldr	r3, [r3]
 1874 005a 002B     		cmp	r3, #0
 1875 005c 25D1     		bne	.L119
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1876              		.loc 1 1793 0
 1877 005e 3B6A     		ldr	r3, [r7, #32]
 1878 0060 DA6A     		ldr	r2, [r3, #44]
 1879 0062 1B4B     		ldr	r3, .L123+4
 1880 0064 1B68     		ldr	r3, [r3]
 1881 0066 DB6A     		ldr	r3, [r3, #44]
 1882 0068 9A42     		cmp	r2, r3
 1883 006a 01D3     		bcc	.L120
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1884              		.loc 1 1795 0
 1885 006c 0123     		movs	r3, #1
 1886 006e 7B62     		str	r3, [r7, #36]
 1887              	.L120:
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1888              		.loc 1 1802 0
 1889 0070 3B6A     		ldr	r3, [r7, #32]
ARM GAS  /tmp/cc6ZjiVz.s 			page 70


 1890 0072 0433     		adds	r3, r3, #4
 1891 0074 1846     		mov	r0, r3
 1892 0076 FFF7FEFF 		bl	uxListRemove
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1893              		.loc 1 1803 0
 1894 007a 3B6A     		ldr	r3, [r7, #32]
 1895 007c DB6A     		ldr	r3, [r3, #44]
 1896 007e 0122     		movs	r2, #1
 1897 0080 9A40     		lsls	r2, r2, r3
 1898 0082 144B     		ldr	r3, .L123+8
 1899 0084 1B68     		ldr	r3, [r3]
 1900 0086 1343     		orrs	r3, r3, r2
 1901 0088 124A     		ldr	r2, .L123+8
 1902 008a 1360     		str	r3, [r2]
 1903 008c 3B6A     		ldr	r3, [r7, #32]
 1904 008e DA6A     		ldr	r2, [r3, #44]
 1905 0090 1346     		mov	r3, r2
 1906 0092 9B00     		lsls	r3, r3, #2
 1907 0094 1344     		add	r3, r3, r2
 1908 0096 9B00     		lsls	r3, r3, #2
 1909 0098 0F4A     		ldr	r2, .L123+12
 1910 009a 1A44     		add	r2, r2, r3
 1911 009c 3B6A     		ldr	r3, [r7, #32]
 1912 009e 0433     		adds	r3, r3, #4
 1913 00a0 1946     		mov	r1, r3
 1914 00a2 1046     		mov	r0, r2
 1915 00a4 FFF7FEFF 		bl	vListInsertEnd
 1916 00a8 05E0     		b	.L118
 1917              	.L119:
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1918              		.loc 1 1810 0
 1919 00aa 3B6A     		ldr	r3, [r7, #32]
 1920 00ac 1833     		adds	r3, r3, #24
 1921 00ae 1946     		mov	r1, r3
 1922 00b0 0A48     		ldr	r0, .L123+16
 1923 00b2 FFF7FEFF 		bl	vListInsertEnd
 1924              	.L118:
 1925 00b6 FB69     		ldr	r3, [r7, #28]
 1926 00b8 FB60     		str	r3, [r7, #12]
 1927              	.LBB113:
 1928              	.LBB114:
 1929              		.loc 2 271 0
 1930 00ba FB68     		ldr	r3, [r7, #12]
 1931              		.syntax unified
 1932              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1933 00bc 83F31188 			msr basepri, r3	
 1934              	@ 0 "" 2
 1935              		.thumb
 1936              		.syntax unified
 1937              	.LBE114:
 1938              	.LBE113:
ARM GAS  /tmp/cc6ZjiVz.s 			page 71


1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 1939              		.loc 1 1820 0
 1940 00c0 7B6A     		ldr	r3, [r7, #36]
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1941              		.loc 1 1821 0
 1942 00c2 1846     		mov	r0, r3
 1943 00c4 2837     		adds	r7, r7, #40
 1944              	.LCFI59:
 1945              		.cfi_def_cfa_offset 8
 1946 00c6 BD46     		mov	sp, r7
 1947              	.LCFI60:
 1948              		.cfi_def_cfa_register 13
 1949              		@ sp needed
 1950 00c8 80BD     		pop	{r7, pc}
 1951              	.L124:
 1952 00ca 00BF     		.align	2
 1953              	.L123:
 1954 00cc 00000000 		.word	uxSchedulerSuspended
 1955 00d0 00000000 		.word	pxCurrentTCB
 1956 00d4 00000000 		.word	uxTopReadyPriority
 1957 00d8 00000000 		.word	pxReadyTasksLists
 1958 00dc 00000000 		.word	xPendingReadyList
 1959              		.cfi_endproc
 1960              	.LFE16:
 1962              		.section	.rodata
 1963              		.align	2
 1964              	.LC0:
 1965 0000 49444C45 		.ascii	"IDLE\000"
 1965      00
 1966              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1967              		.align	1
 1968              		.global	vTaskStartScheduler
 1969              		.syntax unified
 1970              		.thumb
 1971              		.thumb_func
 1972              		.fpu fpv4-sp-d16
 1974              	vTaskStartScheduler:
 1975              	.LFB17:
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 1976              		.loc 1 1827 0
 1977              		.cfi_startproc
 1978              		@ args = 0, pretend = 0, frame = 16
 1979              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc6ZjiVz.s 			page 72


 1980 0000 80B5     		push	{r7, lr}
 1981              	.LCFI61:
 1982              		.cfi_def_cfa_offset 8
 1983              		.cfi_offset 7, -8
 1984              		.cfi_offset 14, -4
 1985 0002 86B0     		sub	sp, sp, #24
 1986              	.LCFI62:
 1987              		.cfi_def_cfa_offset 32
 1988 0004 02AF     		add	r7, sp, #8
 1989              	.LCFI63:
 1990              		.cfi_def_cfa 7, 24
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												"IDLE",
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL,
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
 1991              		.loc 1 1860 0
 1992 0006 1B4B     		ldr	r3, .L130
 1993 0008 0193     		str	r3, [sp, #4]
 1994 000a 0023     		movs	r3, #0
 1995 000c 0093     		str	r3, [sp]
 1996 000e 0023     		movs	r3, #0
 1997 0010 8022     		movs	r2, #128
 1998 0012 1949     		ldr	r1, .L130+4
 1999 0014 1948     		ldr	r0, .L130+8
 2000 0016 FFF7FEFF 		bl	xTaskCreate
 2001 001a F860     		str	r0, [r7, #12]
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
ARM GAS  /tmp/cc6ZjiVz.s 			page 73


1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 2002              		.loc 1 1881 0
 2003 001c FB68     		ldr	r3, [r7, #12]
 2004 001e 012B     		cmp	r3, #1
 2005 0020 15D1     		bne	.L126
 2006              	.LBB115:
 2007              	.LBB116:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2008              		.loc 2 237 0
 2009              		.syntax unified
 2010              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2011 0022 4FF05003 			mov r3, #80												
 2012 0026 83F31188 		msr basepri, r3											
 2013 002a BFF36F8F 		isb														
 2014 002e BFF34F8F 		dsb														
 2015              	
 2016              	@ 0 "" 2
 2017              		.thumb
 2018              		.syntax unified
 2019 0032 BB60     		str	r3, [r7, #8]
 2020              	.LBE116:
 2021              	.LBE115:
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
ARM GAS  /tmp/cc6ZjiVz.s 			page 74


 2022              		.loc 1 1898 0
 2023 0034 124B     		ldr	r3, .L130+12
 2024 0036 4FF0FF32 		mov	r2, #-1
 2025 003a 1A60     		str	r2, [r3]
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2026              		.loc 1 1899 0
 2027 003c 114B     		ldr	r3, .L130+16
 2028 003e 0122     		movs	r2, #1
 2029 0040 1A60     		str	r2, [r3]
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2030              		.loc 1 1900 0
 2031 0042 114B     		ldr	r3, .L130+20
 2032 0044 0022     		movs	r2, #0
 2033 0046 1A60     		str	r2, [r3]
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2034              		.loc 1 1909 0
 2035 0048 FFF7FEFF 		bl	xPortStartScheduler
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2036              		.loc 1 1930 0
 2037 004c 0DE0     		b	.L129
 2038              	.L126:
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2039              		.loc 1 1924 0
 2040 004e FB68     		ldr	r3, [r7, #12]
 2041 0050 B3F1FF3F 		cmp	r3, #-1
 2042 0054 09D1     		bne	.L129
 2043              	.LBB117:
 2044              	.LBB118:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /tmp/cc6ZjiVz.s 			page 75


 2045              		.loc 2 237 0 discriminator 1
 2046              		.syntax unified
 2047              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2048 0056 4FF05003 			mov r3, #80												
 2049 005a 83F31188 		msr basepri, r3											
 2050 005e BFF36F8F 		isb														
 2051 0062 BFF34F8F 		dsb														
 2052              	
 2053              	@ 0 "" 2
 2054              		.thumb
 2055              		.syntax unified
 2056 0066 7B60     		str	r3, [r7, #4]
 2057              	.L128:
 2058              	.LBE118:
 2059              	.LBE117:
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2060              		.loc 1 1924 0 discriminator 2
 2061 0068 FEE7     		b	.L128
 2062              	.L129:
 2063              		.loc 1 1930 0
 2064 006a 00BF     		nop
 2065 006c 1037     		adds	r7, r7, #16
 2066              	.LCFI64:
 2067              		.cfi_def_cfa_offset 8
 2068 006e BD46     		mov	sp, r7
 2069              	.LCFI65:
 2070              		.cfi_def_cfa_register 13
 2071              		@ sp needed
 2072 0070 80BD     		pop	{r7, pc}
 2073              	.L131:
 2074 0072 00BF     		.align	2
 2075              	.L130:
 2076 0074 00000000 		.word	xIdleTaskHandle
 2077 0078 00000000 		.word	.LC0
 2078 007c 00000000 		.word	prvIdleTask
 2079 0080 00000000 		.word	xNextTaskUnblockTime
 2080 0084 00000000 		.word	xSchedulerRunning
 2081 0088 00000000 		.word	xTickCount
 2082              		.cfi_endproc
 2083              	.LFE17:
 2085              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2086              		.align	1
 2087              		.global	vTaskEndScheduler
 2088              		.syntax unified
 2089              		.thumb
 2090              		.thumb_func
 2091              		.fpu fpv4-sp-d16
 2093              	vTaskEndScheduler:
 2094              	.LFB18:
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2095              		.loc 1 1934 0
 2096              		.cfi_startproc
 2097              		@ args = 0, pretend = 0, frame = 8
 2098              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc6ZjiVz.s 			page 76


 2099 0000 80B5     		push	{r7, lr}
 2100              	.LCFI66:
 2101              		.cfi_def_cfa_offset 8
 2102              		.cfi_offset 7, -8
 2103              		.cfi_offset 14, -4
 2104 0002 82B0     		sub	sp, sp, #8
 2105              	.LCFI67:
 2106              		.cfi_def_cfa_offset 16
 2107 0004 00AF     		add	r7, sp, #0
 2108              	.LCFI68:
 2109              		.cfi_def_cfa_register 7
 2110              	.LBB119:
 2111              	.LBB120:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2112              		.loc 2 237 0
 2113              		.syntax unified
 2114              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2115 0006 4FF05003 			mov r3, #80												
 2116 000a 83F31188 		msr basepri, r3											
 2117 000e BFF36F8F 		isb														
 2118 0012 BFF34F8F 		dsb														
 2119              	
 2120              	@ 0 "" 2
 2121              		.thumb
 2122              		.syntax unified
 2123 0016 7B60     		str	r3, [r7, #4]
 2124              	.LBE120:
 2125              	.LBE119:
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2126              		.loc 1 1939 0
 2127 0018 044B     		ldr	r3, .L133
 2128 001a 0022     		movs	r2, #0
 2129 001c 1A60     		str	r2, [r3]
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2130              		.loc 1 1940 0
 2131 001e FFF7FEFF 		bl	vPortEndScheduler
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2132              		.loc 1 1941 0
 2133 0022 00BF     		nop
 2134 0024 0837     		adds	r7, r7, #8
 2135              	.LCFI69:
 2136              		.cfi_def_cfa_offset 8
 2137 0026 BD46     		mov	sp, r7
 2138              	.LCFI70:
 2139              		.cfi_def_cfa_register 13
 2140              		@ sp needed
 2141 0028 80BD     		pop	{r7, pc}
 2142              	.L134:
 2143 002a 00BF     		.align	2
 2144              	.L133:
 2145 002c 00000000 		.word	xSchedulerRunning
 2146              		.cfi_endproc
 2147              	.LFE18:
ARM GAS  /tmp/cc6ZjiVz.s 			page 77


 2149              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2150              		.align	1
 2151              		.global	vTaskSuspendAll
 2152              		.syntax unified
 2153              		.thumb
 2154              		.thumb_func
 2155              		.fpu fpv4-sp-d16
 2157              	vTaskSuspendAll:
 2158              	.LFB19:
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2159              		.loc 1 1945 0
 2160              		.cfi_startproc
 2161              		@ args = 0, pretend = 0, frame = 0
 2162              		@ frame_needed = 1, uses_anonymous_args = 0
 2163              		@ link register save eliminated.
 2164 0000 80B4     		push	{r7}
 2165              	.LCFI71:
 2166              		.cfi_def_cfa_offset 4
 2167              		.cfi_offset 7, -4
 2168 0002 00AF     		add	r7, sp, #0
 2169              	.LCFI72:
 2170              		.cfi_def_cfa_register 7
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 2171              		.loc 1 1950 0
 2172 0004 044B     		ldr	r3, .L136
 2173 0006 1B68     		ldr	r3, [r3]
 2174 0008 0133     		adds	r3, r3, #1
 2175 000a 034A     		ldr	r2, .L136
 2176 000c 1360     		str	r3, [r2]
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2177              		.loc 1 1951 0
 2178 000e 00BF     		nop
 2179 0010 BD46     		mov	sp, r7
 2180              	.LCFI73:
 2181              		.cfi_def_cfa_register 13
 2182              		@ sp needed
 2183 0012 5DF8047B 		ldr	r7, [sp], #4
 2184              	.LCFI74:
 2185              		.cfi_restore 7
 2186              		.cfi_def_cfa_offset 0
 2187 0016 7047     		bx	lr
 2188              	.L137:
 2189              		.align	2
 2190              	.L136:
 2191 0018 00000000 		.word	uxSchedulerSuspended
 2192              		.cfi_endproc
 2193              	.LFE19:
 2195              		.section	.text.xTaskResumeAll,"ax",%progbits
 2196              		.align	1
 2197              		.global	xTaskResumeAll
ARM GAS  /tmp/cc6ZjiVz.s 			page 78


 2198              		.syntax unified
 2199              		.thumb
 2200              		.thumb_func
 2201              		.fpu fpv4-sp-d16
 2203              	xTaskResumeAll:
 2204              	.LFB20:
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
ARM GAS  /tmp/cc6ZjiVz.s 			page 79


2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2205              		.loc 1 2018 0
 2206              		.cfi_startproc
 2207              		@ args = 0, pretend = 0, frame = 16
 2208              		@ frame_needed = 1, uses_anonymous_args = 0
 2209 0000 80B5     		push	{r7, lr}
 2210              	.LCFI75:
 2211              		.cfi_def_cfa_offset 8
 2212              		.cfi_offset 7, -8
 2213              		.cfi_offset 14, -4
 2214 0002 84B0     		sub	sp, sp, #16
 2215              	.LCFI76:
 2216              		.cfi_def_cfa_offset 24
 2217 0004 00AF     		add	r7, sp, #0
 2218              	.LCFI77:
 2219              		.cfi_def_cfa_register 7
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2220              		.loc 1 2019 0
 2221 0006 0023     		movs	r3, #0
 2222 0008 FB60     		str	r3, [r7, #12]
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2223              		.loc 1 2020 0
 2224 000a 0023     		movs	r3, #0
 2225 000c BB60     		str	r3, [r7, #8]
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2226              		.loc 1 2024 0
 2227 000e 414B     		ldr	r3, .L149
 2228 0010 1B68     		ldr	r3, [r3]
 2229 0012 002B     		cmp	r3, #0
 2230 0014 09D1     		bne	.L139
 2231              	.LBB121:
 2232              	.LBB122:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2233              		.loc 2 237 0 discriminator 1
 2234              		.syntax unified
 2235              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2236 0016 4FF05003 			mov r3, #80												
 2237 001a 83F31188 		msr basepri, r3											
 2238 001e BFF36F8F 		isb														
ARM GAS  /tmp/cc6ZjiVz.s 			page 80


 2239 0022 BFF34F8F 		dsb														
 2240              	
 2241              	@ 0 "" 2
 2242              		.thumb
 2243              		.syntax unified
 2244 0026 3B60     		str	r3, [r7]
 2245              	.L140:
 2246              	.LBE122:
 2247              	.LBE121:
 2248              		.loc 1 2024 0 discriminator 1
 2249 0028 FEE7     		b	.L140
 2250              	.L139:
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2251              		.loc 1 2031 0
 2252 002a FFF7FEFF 		bl	vPortEnterCritical
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 2253              		.loc 1 2033 0
 2254 002e 394B     		ldr	r3, .L149
 2255 0030 1B68     		ldr	r3, [r3]
 2256 0032 013B     		subs	r3, r3, #1
 2257 0034 374A     		ldr	r2, .L149
 2258 0036 1360     		str	r3, [r2]
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2259              		.loc 1 2035 0
 2260 0038 364B     		ldr	r3, .L149
 2261 003a 1B68     		ldr	r3, [r3]
 2262 003c 002B     		cmp	r3, #0
 2263 003e 61D1     		bne	.L141
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2264              		.loc 1 2037 0
 2265 0040 354B     		ldr	r3, .L149+4
 2266 0042 1B68     		ldr	r3, [r3]
 2267 0044 002B     		cmp	r3, #0
 2268 0046 5DD0     		beq	.L141
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2269              		.loc 1 2041 0
 2270 0048 2EE0     		b	.L142
 2271              	.L143:
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 2272              		.loc 1 2043 0
 2273 004a 344B     		ldr	r3, .L149+8
 2274 004c DB68     		ldr	r3, [r3, #12]
 2275 004e DB68     		ldr	r3, [r3, #12]
 2276 0050 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/cc6ZjiVz.s 			page 81


2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2277              		.loc 1 2044 0
 2278 0052 FB68     		ldr	r3, [r7, #12]
 2279 0054 1833     		adds	r3, r3, #24
 2280 0056 1846     		mov	r0, r3
 2281 0058 FFF7FEFF 		bl	uxListRemove
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2282              		.loc 1 2045 0
 2283 005c FB68     		ldr	r3, [r7, #12]
 2284 005e 0433     		adds	r3, r3, #4
 2285 0060 1846     		mov	r0, r3
 2286 0062 FFF7FEFF 		bl	uxListRemove
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2287              		.loc 1 2046 0
 2288 0066 FB68     		ldr	r3, [r7, #12]
 2289 0068 DB6A     		ldr	r3, [r3, #44]
 2290 006a 0122     		movs	r2, #1
 2291 006c 9A40     		lsls	r2, r2, r3
 2292 006e 2C4B     		ldr	r3, .L149+12
 2293 0070 1B68     		ldr	r3, [r3]
 2294 0072 1343     		orrs	r3, r3, r2
 2295 0074 2A4A     		ldr	r2, .L149+12
 2296 0076 1360     		str	r3, [r2]
 2297 0078 FB68     		ldr	r3, [r7, #12]
 2298 007a DA6A     		ldr	r2, [r3, #44]
 2299 007c 1346     		mov	r3, r2
 2300 007e 9B00     		lsls	r3, r3, #2
 2301 0080 1344     		add	r3, r3, r2
 2302 0082 9B00     		lsls	r3, r3, #2
 2303 0084 274A     		ldr	r2, .L149+16
 2304 0086 1A44     		add	r2, r2, r3
 2305 0088 FB68     		ldr	r3, [r7, #12]
 2306 008a 0433     		adds	r3, r3, #4
 2307 008c 1946     		mov	r1, r3
 2308 008e 1046     		mov	r0, r2
 2309 0090 FFF7FEFF 		bl	vListInsertEnd
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2310              		.loc 1 2050 0
 2311 0094 FB68     		ldr	r3, [r7, #12]
 2312 0096 DA6A     		ldr	r2, [r3, #44]
 2313 0098 234B     		ldr	r3, .L149+20
 2314 009a 1B68     		ldr	r3, [r3]
 2315 009c DB6A     		ldr	r3, [r3, #44]
 2316 009e 9A42     		cmp	r2, r3
 2317 00a0 02D3     		bcc	.L142
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2318              		.loc 1 2052 0
 2319 00a2 224B     		ldr	r3, .L149+24
 2320 00a4 0122     		movs	r2, #1
 2321 00a6 1A60     		str	r2, [r3]
 2322              	.L142:
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2323              		.loc 1 2041 0
ARM GAS  /tmp/cc6ZjiVz.s 			page 82


 2324 00a8 1C4B     		ldr	r3, .L149+8
 2325 00aa 1B68     		ldr	r3, [r3]
 2326 00ac 002B     		cmp	r3, #0
 2327 00ae CCD1     		bne	.L143
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 2328              		.loc 1 2060 0
 2329 00b0 FB68     		ldr	r3, [r7, #12]
 2330 00b2 002B     		cmp	r3, #0
 2331 00b4 01D0     		beq	.L144
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2332              		.loc 1 2068 0
 2333 00b6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2334              	.L144:
 2335              	.LBB123:
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2336              		.loc 1 2076 0
 2337 00ba 1D4B     		ldr	r3, .L149+28
 2338 00bc 1B68     		ldr	r3, [r3]
 2339 00be 7B60     		str	r3, [r7, #4]
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2340              		.loc 1 2078 0
 2341 00c0 7B68     		ldr	r3, [r7, #4]
 2342 00c2 002B     		cmp	r3, #0
 2343 00c4 10D0     		beq	.L145
 2344              	.L147:
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2345              		.loc 1 2082 0
 2346 00c6 FFF7FEFF 		bl	xTaskIncrementTick
 2347 00ca 0346     		mov	r3, r0
 2348 00cc 002B     		cmp	r3, #0
 2349 00ce 02D0     		beq	.L146
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
ARM GAS  /tmp/cc6ZjiVz.s 			page 83


2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
 2350              		.loc 1 2084 0
 2351 00d0 164B     		ldr	r3, .L149+24
 2352 00d2 0122     		movs	r2, #1
 2353 00d4 1A60     		str	r2, [r3]
 2354              	.L146:
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
 2355              		.loc 1 2090 0
 2356 00d6 7B68     		ldr	r3, [r7, #4]
 2357 00d8 013B     		subs	r3, r3, #1
 2358 00da 7B60     		str	r3, [r7, #4]
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2359              		.loc 1 2091 0
 2360 00dc 7B68     		ldr	r3, [r7, #4]
 2361 00de 002B     		cmp	r3, #0
 2362 00e0 F1D1     		bne	.L147
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
 2363              		.loc 1 2093 0
 2364 00e2 134B     		ldr	r3, .L149+28
 2365 00e4 0022     		movs	r2, #0
 2366 00e6 1A60     		str	r2, [r3]
 2367              	.L145:
 2368              	.LBE123:
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2369              		.loc 1 2101 0
 2370 00e8 104B     		ldr	r3, .L149+24
 2371 00ea 1B68     		ldr	r3, [r3]
 2372 00ec 002B     		cmp	r3, #0
 2373 00ee 09D0     		beq	.L141
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2374              		.loc 1 2105 0
 2375 00f0 0123     		movs	r3, #1
 2376 00f2 BB60     		str	r3, [r7, #8]
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2377              		.loc 1 2108 0
 2378 00f4 0F4B     		ldr	r3, .L149+32
 2379 00f6 4FF08052 		mov	r2, #268435456
 2380 00fa 1A60     		str	r2, [r3]
 2381              		.syntax unified
ARM GAS  /tmp/cc6ZjiVz.s 			page 84


 2382              	@ 2108 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2383 00fc BFF34F8F 		dsb
 2384              	@ 0 "" 2
 2385              	@ 2108 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2386 0100 BFF36F8F 		isb
 2387              	@ 0 "" 2
 2388              		.thumb
 2389              		.syntax unified
 2390              	.L141:
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 2391              		.loc 1 2121 0
 2392 0104 FFF7FEFF 		bl	vPortExitCritical
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 2393              		.loc 1 2123 0
 2394 0108 BB68     		ldr	r3, [r7, #8]
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2395              		.loc 1 2124 0
 2396 010a 1846     		mov	r0, r3
 2397 010c 1037     		adds	r7, r7, #16
 2398              	.LCFI78:
 2399              		.cfi_def_cfa_offset 8
 2400 010e BD46     		mov	sp, r7
 2401              	.LCFI79:
 2402              		.cfi_def_cfa_register 13
 2403              		@ sp needed
 2404 0110 80BD     		pop	{r7, pc}
 2405              	.L150:
 2406 0112 00BF     		.align	2
 2407              	.L149:
 2408 0114 00000000 		.word	uxSchedulerSuspended
 2409 0118 00000000 		.word	uxCurrentNumberOfTasks
 2410 011c 00000000 		.word	xPendingReadyList
 2411 0120 00000000 		.word	uxTopReadyPriority
 2412 0124 00000000 		.word	pxReadyTasksLists
 2413 0128 00000000 		.word	pxCurrentTCB
 2414 012c 00000000 		.word	xYieldPending
 2415 0130 00000000 		.word	uxPendedTicks
 2416 0134 04ED00E0 		.word	-536810236
 2417              		.cfi_endproc
 2418              	.LFE20:
 2420              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2421              		.align	1
 2422              		.global	xTaskGetTickCount
 2423              		.syntax unified
ARM GAS  /tmp/cc6ZjiVz.s 			page 85


 2424              		.thumb
 2425              		.thumb_func
 2426              		.fpu fpv4-sp-d16
 2428              	xTaskGetTickCount:
 2429              	.LFB21:
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2430              		.loc 1 2128 0
 2431              		.cfi_startproc
 2432              		@ args = 0, pretend = 0, frame = 8
 2433              		@ frame_needed = 1, uses_anonymous_args = 0
 2434              		@ link register save eliminated.
 2435 0000 80B4     		push	{r7}
 2436              	.LCFI80:
 2437              		.cfi_def_cfa_offset 4
 2438              		.cfi_offset 7, -4
 2439 0002 83B0     		sub	sp, sp, #12
 2440              	.LCFI81:
 2441              		.cfi_def_cfa_offset 16
 2442 0004 00AF     		add	r7, sp, #0
 2443              	.LCFI82:
 2444              		.cfi_def_cfa_register 7
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 2445              		.loc 1 2134 0
 2446 0006 054B     		ldr	r3, .L153
 2447 0008 1B68     		ldr	r3, [r3]
 2448 000a 7B60     		str	r3, [r7, #4]
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
 2449              		.loc 1 2138 0
 2450 000c 7B68     		ldr	r3, [r7, #4]
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2451              		.loc 1 2139 0
 2452 000e 1846     		mov	r0, r3
 2453 0010 0C37     		adds	r7, r7, #12
 2454              	.LCFI83:
 2455              		.cfi_def_cfa_offset 4
 2456 0012 BD46     		mov	sp, r7
 2457              	.LCFI84:
 2458              		.cfi_def_cfa_register 13
 2459              		@ sp needed
 2460 0014 5DF8047B 		ldr	r7, [sp], #4
 2461              	.LCFI85:
 2462              		.cfi_restore 7
 2463              		.cfi_def_cfa_offset 0
 2464 0018 7047     		bx	lr
 2465              	.L154:
 2466 001a 00BF     		.align	2
ARM GAS  /tmp/cc6ZjiVz.s 			page 86


 2467              	.L153:
 2468 001c 00000000 		.word	xTickCount
 2469              		.cfi_endproc
 2470              	.LFE21:
 2472              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2473              		.align	1
 2474              		.global	xTaskGetTickCountFromISR
 2475              		.syntax unified
 2476              		.thumb
 2477              		.thumb_func
 2478              		.fpu fpv4-sp-d16
 2480              	xTaskGetTickCountFromISR:
 2481              	.LFB22:
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2482              		.loc 1 2143 0
 2483              		.cfi_startproc
 2484              		@ args = 0, pretend = 0, frame = 8
 2485              		@ frame_needed = 1, uses_anonymous_args = 0
 2486 0000 80B5     		push	{r7, lr}
 2487              	.LCFI86:
 2488              		.cfi_def_cfa_offset 8
 2489              		.cfi_offset 7, -8
 2490              		.cfi_offset 14, -4
 2491 0002 82B0     		sub	sp, sp, #8
 2492              	.LCFI87:
 2493              		.cfi_def_cfa_offset 16
 2494 0004 00AF     		add	r7, sp, #0
 2495              	.LCFI88:
 2496              		.cfi_def_cfa_register 7
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2497              		.loc 1 2161 0
 2498 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2499              		.loc 1 2163 0
 2500 000a 0023     		movs	r3, #0
 2501 000c 7B60     		str	r3, [r7, #4]
ARM GAS  /tmp/cc6ZjiVz.s 			page 87


2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 2502              		.loc 1 2165 0
 2503 000e 044B     		ldr	r3, .L157
 2504 0010 1B68     		ldr	r3, [r3]
 2505 0012 3B60     		str	r3, [r7]
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 2506              		.loc 1 2169 0
 2507 0014 3B68     		ldr	r3, [r7]
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2508              		.loc 1 2170 0
 2509 0016 1846     		mov	r0, r3
 2510 0018 0837     		adds	r7, r7, #8
 2511              	.LCFI89:
 2512              		.cfi_def_cfa_offset 8
 2513 001a BD46     		mov	sp, r7
 2514              	.LCFI90:
 2515              		.cfi_def_cfa_register 13
 2516              		@ sp needed
 2517 001c 80BD     		pop	{r7, pc}
 2518              	.L158:
 2519 001e 00BF     		.align	2
 2520              	.L157:
 2521 0020 00000000 		.word	xTickCount
 2522              		.cfi_endproc
 2523              	.LFE22:
 2525              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2526              		.align	1
 2527              		.global	uxTaskGetNumberOfTasks
 2528              		.syntax unified
 2529              		.thumb
 2530              		.thumb_func
 2531              		.fpu fpv4-sp-d16
 2533              	uxTaskGetNumberOfTasks:
 2534              	.LFB23:
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2535              		.loc 1 2174 0
 2536              		.cfi_startproc
 2537              		@ args = 0, pretend = 0, frame = 0
 2538              		@ frame_needed = 1, uses_anonymous_args = 0
 2539              		@ link register save eliminated.
 2540 0000 80B4     		push	{r7}
 2541              	.LCFI91:
 2542              		.cfi_def_cfa_offset 4
 2543              		.cfi_offset 7, -4
 2544 0002 00AF     		add	r7, sp, #0
 2545              	.LCFI92:
 2546              		.cfi_def_cfa_register 7
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
ARM GAS  /tmp/cc6ZjiVz.s 			page 88


 2547              		.loc 1 2177 0
 2548 0004 034B     		ldr	r3, .L161
 2549 0006 1B68     		ldr	r3, [r3]
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2550              		.loc 1 2178 0
 2551 0008 1846     		mov	r0, r3
 2552 000a BD46     		mov	sp, r7
 2553              	.LCFI93:
 2554              		.cfi_def_cfa_register 13
 2555              		@ sp needed
 2556 000c 5DF8047B 		ldr	r7, [sp], #4
 2557              	.LCFI94:
 2558              		.cfi_restore 7
 2559              		.cfi_def_cfa_offset 0
 2560 0010 7047     		bx	lr
 2561              	.L162:
 2562 0012 00BF     		.align	2
 2563              	.L161:
 2564 0014 00000000 		.word	uxCurrentNumberOfTasks
 2565              		.cfi_endproc
 2566              	.LFE23:
 2568              		.section	.text.pcTaskGetName,"ax",%progbits
 2569              		.align	1
 2570              		.global	pcTaskGetName
 2571              		.syntax unified
 2572              		.thumb
 2573              		.thumb_func
 2574              		.fpu fpv4-sp-d16
 2576              	pcTaskGetName:
 2577              	.LFB24:
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2578              		.loc 1 2182 0
 2579              		.cfi_startproc
 2580              		@ args = 0, pretend = 0, frame = 16
 2581              		@ frame_needed = 1, uses_anonymous_args = 0
 2582              		@ link register save eliminated.
 2583 0000 80B4     		push	{r7}
 2584              	.LCFI95:
 2585              		.cfi_def_cfa_offset 4
 2586              		.cfi_offset 7, -4
 2587 0002 85B0     		sub	sp, sp, #20
 2588              	.LCFI96:
 2589              		.cfi_def_cfa_offset 24
 2590 0004 00AF     		add	r7, sp, #0
 2591              	.LCFI97:
 2592              		.cfi_def_cfa_register 7
 2593 0006 7860     		str	r0, [r7, #4]
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2594              		.loc 1 2187 0
 2595 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc6ZjiVz.s 			page 89


 2596 000a 002B     		cmp	r3, #0
 2597 000c 02D1     		bne	.L164
 2598              		.loc 1 2187 0 is_stmt 0 discriminator 1
 2599 000e 0D4B     		ldr	r3, .L169
 2600 0010 1B68     		ldr	r3, [r3]
 2601 0012 00E0     		b	.L165
 2602              	.L164:
 2603              		.loc 1 2187 0 discriminator 2
 2604 0014 7B68     		ldr	r3, [r7, #4]
 2605              	.L165:
 2606              		.loc 1 2187 0 discriminator 4
 2607 0016 FB60     		str	r3, [r7, #12]
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2608              		.loc 1 2188 0 is_stmt 1 discriminator 4
 2609 0018 FB68     		ldr	r3, [r7, #12]
 2610 001a 002B     		cmp	r3, #0
 2611 001c 09D1     		bne	.L166
 2612              	.LBB124:
 2613              	.LBB125:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2614              		.loc 2 237 0 discriminator 1
 2615              		.syntax unified
 2616              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2617 001e 4FF05003 			mov r3, #80												
 2618 0022 83F31188 		msr basepri, r3											
 2619 0026 BFF36F8F 		isb														
 2620 002a BFF34F8F 		dsb														
 2621              	
 2622              	@ 0 "" 2
 2623              		.thumb
 2624              		.syntax unified
 2625 002e BB60     		str	r3, [r7, #8]
 2626              	.L167:
 2627              	.LBE125:
 2628              	.LBE124:
 2629              		.loc 1 2188 0 discriminator 1
 2630 0030 FEE7     		b	.L167
 2631              	.L166:
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2632              		.loc 1 2189 0
 2633 0032 FB68     		ldr	r3, [r7, #12]
 2634 0034 3433     		adds	r3, r3, #52
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2635              		.loc 1 2190 0
 2636 0036 1846     		mov	r0, r3
 2637 0038 1437     		adds	r7, r7, #20
 2638              	.LCFI98:
 2639              		.cfi_def_cfa_offset 4
 2640 003a BD46     		mov	sp, r7
 2641              	.LCFI99:
 2642              		.cfi_def_cfa_register 13
 2643              		@ sp needed
 2644 003c 5DF8047B 		ldr	r7, [sp], #4
 2645              	.LCFI100:
 2646              		.cfi_restore 7
 2647              		.cfi_def_cfa_offset 0
 2648 0040 7047     		bx	lr
ARM GAS  /tmp/cc6ZjiVz.s 			page 90


 2649              	.L170:
 2650 0042 00BF     		.align	2
 2651              	.L169:
 2652 0044 00000000 		.word	pxCurrentTCB
 2653              		.cfi_endproc
 2654              	.LFE24:
 2656              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2657              		.align	1
 2658              		.global	xTaskIncrementTick
 2659              		.syntax unified
 2660              		.thumb
 2661              		.thumb_func
 2662              		.fpu fpv4-sp-d16
 2664              	xTaskIncrementTick:
 2665              	.LFB25:
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/cc6ZjiVz.s 			page 91


2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cc6ZjiVz.s 			page 92


2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
ARM GAS  /tmp/cc6ZjiVz.s 			page 93


2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
ARM GAS  /tmp/cc6ZjiVz.s 			page 94


2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cc6ZjiVz.s 			page 95


2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2666              		.loc 1 2500 0
 2667              		.cfi_startproc
 2668              		@ args = 0, pretend = 0, frame = 24
 2669              		@ frame_needed = 1, uses_anonymous_args = 0
 2670 0000 80B5     		push	{r7, lr}
 2671              	.LCFI101:
 2672              		.cfi_def_cfa_offset 8
 2673              		.cfi_offset 7, -8
 2674              		.cfi_offset 14, -4
 2675 0002 86B0     		sub	sp, sp, #24
 2676              	.LCFI102:
 2677              		.cfi_def_cfa_offset 32
 2678 0004 00AF     		add	r7, sp, #0
 2679              	.LCFI103:
 2680              		.cfi_def_cfa_register 7
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
ARM GAS  /tmp/cc6ZjiVz.s 			page 96


2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2681              		.loc 1 2503 0
 2682 0006 0023     		movs	r3, #0
 2683 0008 7B61     		str	r3, [r7, #20]
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2684              		.loc 1 2509 0
 2685 000a 504B     		ldr	r3, .L188
 2686 000c 1B68     		ldr	r3, [r3]
 2687 000e 002B     		cmp	r3, #0
 2688 0010 40F08C80 		bne	.L172
 2689              	.LBB126:
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
 2690              		.loc 1 2513 0
 2691 0014 4E4B     		ldr	r3, .L188+4
 2692 0016 1B68     		ldr	r3, [r3]
 2693 0018 0133     		adds	r3, r3, #1
 2694 001a 3B61     		str	r3, [r7, #16]
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 2695              		.loc 1 2517 0
 2696 001c 4C4A     		ldr	r2, .L188+4
 2697 001e 3B69     		ldr	r3, [r7, #16]
 2698 0020 1360     		str	r3, [r2]
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
 2699              		.loc 1 2519 0
 2700 0022 3B69     		ldr	r3, [r7, #16]
 2701 0024 002B     		cmp	r3, #0
 2702 0026 1FD1     		bne	.L173
 2703              	.LBB127:
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 2704              		.loc 1 2521 0
 2705 0028 4A4B     		ldr	r3, .L188+8
 2706 002a 1B68     		ldr	r3, [r3]
 2707 002c 1B68     		ldr	r3, [r3]
 2708 002e 002B     		cmp	r3, #0
 2709 0030 09D0     		beq	.L174
 2710              	.LBB128:
 2711              	.LBB129:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2712              		.loc 2 237 0 discriminator 1
 2713              		.syntax unified
 2714              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2715 0032 4FF05003 			mov r3, #80												
 2716 0036 83F31188 		msr basepri, r3											
 2717 003a BFF36F8F 		isb														
ARM GAS  /tmp/cc6ZjiVz.s 			page 97


 2718 003e BFF34F8F 		dsb														
 2719              	
 2720              	@ 0 "" 2
 2721              		.thumb
 2722              		.syntax unified
 2723 0042 3B60     		str	r3, [r7]
 2724              	.L175:
 2725              	.LBE129:
 2726              	.LBE128:
 2727              		.loc 1 2521 0 discriminator 1
 2728 0044 FEE7     		b	.L175
 2729              	.L174:
 2730              		.loc 1 2521 0 is_stmt 0 discriminator 2
 2731 0046 434B     		ldr	r3, .L188+8
 2732 0048 1B68     		ldr	r3, [r3]
 2733 004a FB60     		str	r3, [r7, #12]
 2734 004c 424B     		ldr	r3, .L188+12
 2735 004e 1B68     		ldr	r3, [r3]
 2736 0050 404A     		ldr	r2, .L188+8
 2737 0052 1360     		str	r3, [r2]
 2738 0054 404A     		ldr	r2, .L188+12
 2739 0056 FB68     		ldr	r3, [r7, #12]
 2740 0058 1360     		str	r3, [r2]
 2741 005a 404B     		ldr	r3, .L188+16
 2742 005c 1B68     		ldr	r3, [r3]
 2743 005e 0133     		adds	r3, r3, #1
 2744 0060 3E4A     		ldr	r2, .L188+16
 2745 0062 1360     		str	r3, [r2]
 2746 0064 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2747              	.L173:
 2748              	.LBE127:
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 2749              		.loc 1 2532 0 is_stmt 1
 2750 0068 3D4B     		ldr	r3, .L188+20
 2751 006a 1B68     		ldr	r3, [r3]
 2752 006c 3A69     		ldr	r2, [r7, #16]
 2753 006e 9A42     		cmp	r2, r3
 2754 0070 4DD3     		bcc	.L176
 2755              	.L183:
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2756              		.loc 1 2536 0
 2757 0072 384B     		ldr	r3, .L188+8
 2758 0074 1B68     		ldr	r3, [r3]
 2759 0076 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc6ZjiVz.s 			page 98


 2760 0078 002B     		cmp	r3, #0
 2761 007a 01D1     		bne	.L177
 2762              		.loc 1 2536 0 is_stmt 0 discriminator 1
 2763 007c 0123     		movs	r3, #1
 2764 007e 00E0     		b	.L178
 2765              	.L177:
 2766              		.loc 1 2536 0 discriminator 2
 2767 0080 0023     		movs	r3, #0
 2768              	.L178:
 2769              		.loc 1 2536 0 discriminator 4
 2770 0082 002B     		cmp	r3, #0
 2771 0084 04D0     		beq	.L179
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 2772              		.loc 1 2543 0 is_stmt 1
 2773 0086 364B     		ldr	r3, .L188+20
 2774 0088 4FF0FF32 		mov	r2, #-1
 2775 008c 1A60     		str	r2, [r3]
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2776              		.loc 1 2544 0
 2777 008e 3EE0     		b	.L176
 2778              	.L179:
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 2779              		.loc 1 2552 0
 2780 0090 304B     		ldr	r3, .L188+8
 2781 0092 1B68     		ldr	r3, [r3]
 2782 0094 DB68     		ldr	r3, [r3, #12]
 2783 0096 DB68     		ldr	r3, [r3, #12]
 2784 0098 BB60     		str	r3, [r7, #8]
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2785              		.loc 1 2553 0
 2786 009a BB68     		ldr	r3, [r7, #8]
 2787 009c 5B68     		ldr	r3, [r3, #4]
 2788 009e 7B60     		str	r3, [r7, #4]
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 2789              		.loc 1 2555 0
 2790 00a0 3A69     		ldr	r2, [r7, #16]
 2791 00a2 7B68     		ldr	r3, [r7, #4]
 2792 00a4 9A42     		cmp	r2, r3
 2793 00a6 03D2     		bcs	.L180
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
ARM GAS  /tmp/cc6ZjiVz.s 			page 99


2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 2794              		.loc 1 2562 0
 2795 00a8 2D4A     		ldr	r2, .L188+20
 2796 00aa 7B68     		ldr	r3, [r7, #4]
 2797 00ac 1360     		str	r3, [r2]
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 2798              		.loc 1 2563 0
 2799 00ae 2EE0     		b	.L176
 2800              	.L180:
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2801              		.loc 1 2571 0
 2802 00b0 BB68     		ldr	r3, [r7, #8]
 2803 00b2 0433     		adds	r3, r3, #4
 2804 00b4 1846     		mov	r0, r3
 2805 00b6 FFF7FEFF 		bl	uxListRemove
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2806              		.loc 1 2575 0
 2807 00ba BB68     		ldr	r3, [r7, #8]
 2808 00bc 9B6A     		ldr	r3, [r3, #40]
 2809 00be 002B     		cmp	r3, #0
 2810 00c0 04D0     		beq	.L181
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2811              		.loc 1 2577 0
 2812 00c2 BB68     		ldr	r3, [r7, #8]
 2813 00c4 1833     		adds	r3, r3, #24
 2814 00c6 1846     		mov	r0, r3
 2815 00c8 FFF7FEFF 		bl	uxListRemove
 2816              	.L181:
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2817              		.loc 1 2586 0
 2818 00cc BB68     		ldr	r3, [r7, #8]
 2819 00ce DB6A     		ldr	r3, [r3, #44]
 2820 00d0 0122     		movs	r2, #1
 2821 00d2 9A40     		lsls	r2, r2, r3
 2822 00d4 234B     		ldr	r3, .L188+24
 2823 00d6 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc6ZjiVz.s 			page 100


 2824 00d8 1343     		orrs	r3, r3, r2
 2825 00da 224A     		ldr	r2, .L188+24
 2826 00dc 1360     		str	r3, [r2]
 2827 00de BB68     		ldr	r3, [r7, #8]
 2828 00e0 DA6A     		ldr	r2, [r3, #44]
 2829 00e2 1346     		mov	r3, r2
 2830 00e4 9B00     		lsls	r3, r3, #2
 2831 00e6 1344     		add	r3, r3, r2
 2832 00e8 9B00     		lsls	r3, r3, #2
 2833 00ea 1F4A     		ldr	r2, .L188+28
 2834 00ec 1A44     		add	r2, r2, r3
 2835 00ee BB68     		ldr	r3, [r7, #8]
 2836 00f0 0433     		adds	r3, r3, #4
 2837 00f2 1946     		mov	r1, r3
 2838 00f4 1046     		mov	r0, r2
 2839 00f6 FFF7FEFF 		bl	vListInsertEnd
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2840              		.loc 1 2596 0
 2841 00fa BB68     		ldr	r3, [r7, #8]
 2842 00fc DA6A     		ldr	r2, [r3, #44]
 2843 00fe 1B4B     		ldr	r3, .L188+32
 2844 0100 1B68     		ldr	r3, [r3]
 2845 0102 DB6A     		ldr	r3, [r3, #44]
 2846 0104 9A42     		cmp	r2, r3
 2847 0106 B4D3     		bcc	.L183
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 2848              		.loc 1 2598 0
 2849 0108 0123     		movs	r3, #1
 2850 010a 7B61     		str	r3, [r7, #20]
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2851              		.loc 1 2536 0
 2852 010c B1E7     		b	.L183
 2853              	.L176:
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
ARM GAS  /tmp/cc6ZjiVz.s 			page 101


2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 2854              		.loc 1 2615 0
 2855 010e 174B     		ldr	r3, .L188+32
 2856 0110 1B68     		ldr	r3, [r3]
 2857 0112 DA6A     		ldr	r2, [r3, #44]
 2858 0114 1449     		ldr	r1, .L188+28
 2859 0116 1346     		mov	r3, r2
 2860 0118 9B00     		lsls	r3, r3, #2
 2861 011a 1344     		add	r3, r3, r2
 2862 011c 9B00     		lsls	r3, r3, #2
 2863 011e 0B44     		add	r3, r3, r1
 2864 0120 1B68     		ldr	r3, [r3]
 2865 0122 012B     		cmp	r3, #1
 2866 0124 07D9     		bls	.L185
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 2867              		.loc 1 2617 0
 2868 0126 0123     		movs	r3, #1
 2869 0128 7B61     		str	r3, [r7, #20]
 2870 012a 04E0     		b	.L185
 2871              	.L172:
 2872              	.LBE126:
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
 2873              		.loc 1 2643 0
 2874 012c 104B     		ldr	r3, .L188+36
 2875 012e 1B68     		ldr	r3, [r3]
 2876 0130 0133     		adds	r3, r3, #1
 2877 0132 0F4A     		ldr	r2, .L188+36
 2878 0134 1360     		str	r3, [r2]
 2879              	.L185:
ARM GAS  /tmp/cc6ZjiVz.s 			page 102


2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
 2880              		.loc 1 2656 0
 2881 0136 0F4B     		ldr	r3, .L188+40
 2882 0138 1B68     		ldr	r3, [r3]
 2883 013a 002B     		cmp	r3, #0
 2884 013c 01D0     		beq	.L186
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
 2885              		.loc 1 2658 0
 2886 013e 0123     		movs	r3, #1
 2887 0140 7B61     		str	r3, [r7, #20]
 2888              	.L186:
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 2889              		.loc 1 2667 0
 2890 0142 7B69     		ldr	r3, [r7, #20]
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2891              		.loc 1 2668 0
 2892 0144 1846     		mov	r0, r3
 2893 0146 1837     		adds	r7, r7, #24
 2894              	.LCFI104:
 2895              		.cfi_def_cfa_offset 8
 2896 0148 BD46     		mov	sp, r7
 2897              	.LCFI105:
 2898              		.cfi_def_cfa_register 13
 2899              		@ sp needed
 2900 014a 80BD     		pop	{r7, pc}
 2901              	.L189:
 2902              		.align	2
 2903              	.L188:
 2904 014c 00000000 		.word	uxSchedulerSuspended
 2905 0150 00000000 		.word	xTickCount
 2906 0154 00000000 		.word	pxDelayedTaskList
 2907 0158 00000000 		.word	pxOverflowDelayedTaskList
 2908 015c 00000000 		.word	xNumOfOverflows
 2909 0160 00000000 		.word	xNextTaskUnblockTime
 2910 0164 00000000 		.word	uxTopReadyPriority
 2911 0168 00000000 		.word	pxReadyTasksLists
ARM GAS  /tmp/cc6ZjiVz.s 			page 103


 2912 016c 00000000 		.word	pxCurrentTCB
 2913 0170 00000000 		.word	uxPendedTicks
 2914 0174 00000000 		.word	xYieldPending
 2915              		.cfi_endproc
 2916              	.LFE25:
 2918              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2919              		.align	1
 2920              		.global	vTaskSwitchContext
 2921              		.syntax unified
 2922              		.thumb
 2923              		.thumb_func
 2924              		.fpu fpv4-sp-d16
 2926              	vTaskSwitchContext:
 2927              	.LFB26:
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cc6ZjiVz.s 			page 104


2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2928              		.loc 1 2762 0
 2929              		.cfi_startproc
 2930              		@ args = 0, pretend = 0, frame = 24
 2931              		@ frame_needed = 1, uses_anonymous_args = 0
 2932              		@ link register save eliminated.
 2933 0000 80B4     		push	{r7}
ARM GAS  /tmp/cc6ZjiVz.s 			page 105


 2934              	.LCFI106:
 2935              		.cfi_def_cfa_offset 4
 2936              		.cfi_offset 7, -4
 2937 0002 87B0     		sub	sp, sp, #28
 2938              	.LCFI107:
 2939              		.cfi_def_cfa_offset 32
 2940 0004 00AF     		add	r7, sp, #0
 2941              	.LCFI108:
 2942              		.cfi_def_cfa_register 7
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2943              		.loc 1 2763 0
 2944 0006 264B     		ldr	r3, .L198
 2945 0008 1B68     		ldr	r3, [r3]
 2946 000a 002B     		cmp	r3, #0
 2947 000c 03D0     		beq	.L191
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 2948              		.loc 1 2767 0
 2949 000e 254B     		ldr	r3, .L198+4
 2950 0010 0122     		movs	r2, #1
 2951 0012 1A60     		str	r2, [r3]
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
ARM GAS  /tmp/cc6ZjiVz.s 			page 106


2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2952              		.loc 1 2817 0
 2953 0014 3EE0     		b	.L197
 2954              	.L191:
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2955              		.loc 1 2771 0
 2956 0016 234B     		ldr	r3, .L198+4
 2957 0018 0022     		movs	r2, #0
 2958 001a 1A60     		str	r2, [r3]
 2959              	.LBB130:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2960              		.loc 1 2806 0
 2961 001c 224B     		ldr	r3, .L198+8
 2962 001e 1B68     		ldr	r3, [r3]
 2963 0020 FB60     		str	r3, [r7, #12]
 2964              	.LBB131:
 2965              	.LBB132:
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 2966              		.loc 2 176 0
 2967 0022 FB68     		ldr	r3, [r7, #12]
 2968              		.syntax unified
 2969              	@ 176 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2970 0024 B3FA83F3 		clz r3, r3
 2971              	@ 0 "" 2
 2972              		.thumb
 2973              		.syntax unified
 2974 0028 FB72     		strb	r3, [r7, #11]
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 2975              		.loc 2 177 0
 2976 002a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2977              	.LBE132:
 2978              	.LBE131:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2979              		.loc 1 2806 0
 2980 002c C3F11F03 		rsb	r3, r3, #31
 2981 0030 7B61     		str	r3, [r7, #20]
 2982 0032 1E49     		ldr	r1, .L198+12
 2983 0034 7A69     		ldr	r2, [r7, #20]
 2984 0036 1346     		mov	r3, r2
 2985 0038 9B00     		lsls	r3, r3, #2
 2986 003a 1344     		add	r3, r3, r2
 2987 003c 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/cc6ZjiVz.s 			page 107


 2988 003e 0B44     		add	r3, r3, r1
 2989 0040 1B68     		ldr	r3, [r3]
 2990 0042 002B     		cmp	r3, #0
 2991 0044 09D1     		bne	.L194
 2992              	.LBB133:
 2993              	.LBB134:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2994              		.loc 2 237 0 discriminator 1
 2995              		.syntax unified
 2996              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2997 0046 4FF05003 			mov r3, #80												
 2998 004a 83F31188 		msr basepri, r3											
 2999 004e BFF36F8F 		isb														
 3000 0052 BFF34F8F 		dsb														
 3001              	
 3002              	@ 0 "" 2
 3003              		.thumb
 3004              		.syntax unified
 3005 0056 7B60     		str	r3, [r7, #4]
 3006              	.L195:
 3007              	.LBE134:
 3008              	.LBE133:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3009              		.loc 1 2806 0 discriminator 1
 3010 0058 FEE7     		b	.L195
 3011              	.L194:
 3012              	.LBB135:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3013              		.loc 1 2806 0 is_stmt 0 discriminator 2
 3014 005a 7A69     		ldr	r2, [r7, #20]
 3015 005c 1346     		mov	r3, r2
 3016 005e 9B00     		lsls	r3, r3, #2
 3017 0060 1344     		add	r3, r3, r2
 3018 0062 9B00     		lsls	r3, r3, #2
 3019 0064 114A     		ldr	r2, .L198+12
 3020 0066 1344     		add	r3, r3, r2
 3021 0068 3B61     		str	r3, [r7, #16]
 3022 006a 3B69     		ldr	r3, [r7, #16]
 3023 006c 5B68     		ldr	r3, [r3, #4]
 3024 006e 5A68     		ldr	r2, [r3, #4]
 3025 0070 3B69     		ldr	r3, [r7, #16]
 3026 0072 5A60     		str	r2, [r3, #4]
 3027 0074 3B69     		ldr	r3, [r7, #16]
 3028 0076 5A68     		ldr	r2, [r3, #4]
 3029 0078 3B69     		ldr	r3, [r7, #16]
 3030 007a 0833     		adds	r3, r3, #8
 3031 007c 9A42     		cmp	r2, r3
 3032 007e 04D1     		bne	.L196
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3033              		.loc 1 2806 0 discriminator 3
 3034 0080 3B69     		ldr	r3, [r7, #16]
 3035 0082 5B68     		ldr	r3, [r3, #4]
 3036 0084 5A68     		ldr	r2, [r3, #4]
 3037 0086 3B69     		ldr	r3, [r7, #16]
 3038 0088 5A60     		str	r2, [r3, #4]
 3039              	.L196:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
ARM GAS  /tmp/cc6ZjiVz.s 			page 108


 3040              		.loc 1 2806 0 discriminator 5
 3041 008a 3B69     		ldr	r3, [r7, #16]
 3042 008c 5B68     		ldr	r3, [r3, #4]
 3043 008e DB68     		ldr	r3, [r3, #12]
 3044 0090 074A     		ldr	r2, .L198+16
 3045 0092 1360     		str	r3, [r2]
 3046              	.L197:
 3047              	.LBE135:
 3048              	.LBE130:
 3049              		.loc 1 2817 0 is_stmt 1
 3050 0094 00BF     		nop
 3051 0096 1C37     		adds	r7, r7, #28
 3052              	.LCFI109:
 3053              		.cfi_def_cfa_offset 4
 3054 0098 BD46     		mov	sp, r7
 3055              	.LCFI110:
 3056              		.cfi_def_cfa_register 13
 3057              		@ sp needed
 3058 009a 5DF8047B 		ldr	r7, [sp], #4
 3059              	.LCFI111:
 3060              		.cfi_restore 7
 3061              		.cfi_def_cfa_offset 0
 3062 009e 7047     		bx	lr
 3063              	.L199:
 3064              		.align	2
 3065              	.L198:
 3066 00a0 00000000 		.word	uxSchedulerSuspended
 3067 00a4 00000000 		.word	xYieldPending
 3068 00a8 00000000 		.word	uxTopReadyPriority
 3069 00ac 00000000 		.word	pxReadyTasksLists
 3070 00b0 00000000 		.word	pxCurrentTCB
 3071              		.cfi_endproc
 3072              	.LFE26:
 3074              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3075              		.align	1
 3076              		.global	vTaskPlaceOnEventList
 3077              		.syntax unified
 3078              		.thumb
 3079              		.thumb_func
 3080              		.fpu fpv4-sp-d16
 3082              	vTaskPlaceOnEventList:
 3083              	.LFB27:
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3084              		.loc 1 2821 0
 3085              		.cfi_startproc
 3086              		@ args = 0, pretend = 0, frame = 16
 3087              		@ frame_needed = 1, uses_anonymous_args = 0
 3088 0000 80B5     		push	{r7, lr}
 3089              	.LCFI112:
 3090              		.cfi_def_cfa_offset 8
 3091              		.cfi_offset 7, -8
 3092              		.cfi_offset 14, -4
 3093 0002 84B0     		sub	sp, sp, #16
 3094              	.LCFI113:
ARM GAS  /tmp/cc6ZjiVz.s 			page 109


 3095              		.cfi_def_cfa_offset 24
 3096 0004 00AF     		add	r7, sp, #0
 3097              	.LCFI114:
 3098              		.cfi_def_cfa_register 7
 3099 0006 7860     		str	r0, [r7, #4]
 3100 0008 3960     		str	r1, [r7]
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3101              		.loc 1 2822 0
 3102 000a 7B68     		ldr	r3, [r7, #4]
 3103 000c 002B     		cmp	r3, #0
 3104 000e 09D1     		bne	.L201
 3105              	.LBB136:
 3106              	.LBB137:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3107              		.loc 2 237 0 discriminator 1
 3108              		.syntax unified
 3109              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3110 0010 4FF05003 			mov r3, #80												
 3111 0014 83F31188 		msr basepri, r3											
 3112 0018 BFF36F8F 		isb														
 3113 001c BFF34F8F 		dsb														
 3114              	
 3115              	@ 0 "" 2
 3116              		.thumb
 3117              		.syntax unified
 3118 0020 FB60     		str	r3, [r7, #12]
 3119              	.L202:
 3120              	.LBE137:
 3121              	.LBE136:
 3122              		.loc 1 2822 0 discriminator 1
 3123 0022 FEE7     		b	.L202
 3124              	.L201:
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3125              		.loc 1 2831 0
 3126 0024 074B     		ldr	r3, .L203
 3127 0026 1B68     		ldr	r3, [r3]
 3128 0028 1833     		adds	r3, r3, #24
 3129 002a 1946     		mov	r1, r3
 3130 002c 7868     		ldr	r0, [r7, #4]
 3131 002e FFF7FEFF 		bl	vListInsert
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3132              		.loc 1 2833 0
 3133 0032 0121     		movs	r1, #1
 3134 0034 3868     		ldr	r0, [r7]
 3135 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3136              		.loc 1 2834 0
 3137 003a 00BF     		nop
ARM GAS  /tmp/cc6ZjiVz.s 			page 110


 3138 003c 1037     		adds	r7, r7, #16
 3139              	.LCFI115:
 3140              		.cfi_def_cfa_offset 8
 3141 003e BD46     		mov	sp, r7
 3142              	.LCFI116:
 3143              		.cfi_def_cfa_register 13
 3144              		@ sp needed
 3145 0040 80BD     		pop	{r7, pc}
 3146              	.L204:
 3147 0042 00BF     		.align	2
 3148              	.L203:
 3149 0044 00000000 		.word	pxCurrentTCB
 3150              		.cfi_endproc
 3151              	.LFE27:
 3153              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3154              		.align	1
 3155              		.global	vTaskPlaceOnUnorderedEventList
 3156              		.syntax unified
 3157              		.thumb
 3158              		.thumb_func
 3159              		.fpu fpv4-sp-d16
 3161              	vTaskPlaceOnUnorderedEventList:
 3162              	.LFB28:
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3163              		.loc 1 2838 0
 3164              		.cfi_startproc
 3165              		@ args = 0, pretend = 0, frame = 24
 3166              		@ frame_needed = 1, uses_anonymous_args = 0
 3167 0000 80B5     		push	{r7, lr}
 3168              	.LCFI117:
 3169              		.cfi_def_cfa_offset 8
 3170              		.cfi_offset 7, -8
 3171              		.cfi_offset 14, -4
 3172 0002 86B0     		sub	sp, sp, #24
 3173              	.LCFI118:
 3174              		.cfi_def_cfa_offset 32
 3175 0004 00AF     		add	r7, sp, #0
 3176              	.LCFI119:
 3177              		.cfi_def_cfa_register 7
 3178 0006 F860     		str	r0, [r7, #12]
 3179 0008 B960     		str	r1, [r7, #8]
 3180 000a 7A60     		str	r2, [r7, #4]
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3181              		.loc 1 2839 0
 3182 000c FB68     		ldr	r3, [r7, #12]
 3183 000e 002B     		cmp	r3, #0
 3184 0010 09D1     		bne	.L206
 3185              	.LBB138:
 3186              	.LBB139:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3187              		.loc 2 237 0 discriminator 1
 3188              		.syntax unified
 3189              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3190 0012 4FF05003 			mov r3, #80												
ARM GAS  /tmp/cc6ZjiVz.s 			page 111


 3191 0016 83F31188 		msr basepri, r3											
 3192 001a BFF36F8F 		isb														
 3193 001e BFF34F8F 		dsb														
 3194              	
 3195              	@ 0 "" 2
 3196              		.thumb
 3197              		.syntax unified
 3198 0022 7B61     		str	r3, [r7, #20]
 3199              	.L207:
 3200              	.LBE139:
 3201              	.LBE138:
 3202              		.loc 1 2839 0 discriminator 1
 3203 0024 FEE7     		b	.L207
 3204              	.L206:
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 3205              		.loc 1 2843 0
 3206 0026 114B     		ldr	r3, .L210
 3207 0028 1B68     		ldr	r3, [r3]
 3208 002a 002B     		cmp	r3, #0
 3209 002c 09D1     		bne	.L208
 3210              	.LBB140:
 3211              	.LBB141:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3212              		.loc 2 237 0 discriminator 1
 3213              		.syntax unified
 3214              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3215 002e 4FF05003 			mov r3, #80												
 3216 0032 83F31188 		msr basepri, r3											
 3217 0036 BFF36F8F 		isb														
 3218 003a BFF34F8F 		dsb														
 3219              	
 3220              	@ 0 "" 2
 3221              		.thumb
 3222              		.syntax unified
 3223 003e 3B61     		str	r3, [r7, #16]
 3224              	.L209:
 3225              	.LBE141:
 3226              	.LBE140:
 3227              		.loc 1 2843 0 discriminator 2
 3228 0040 FEE7     		b	.L209
 3229              	.L208:
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 3230              		.loc 1 2848 0
 3231 0042 0B4B     		ldr	r3, .L210+4
 3232 0044 1B68     		ldr	r3, [r3]
 3233 0046 BA68     		ldr	r2, [r7, #8]
 3234 0048 42F00042 		orr	r2, r2, #-2147483648
 3235 004c 9A61     		str	r2, [r3, #24]
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
ARM GAS  /tmp/cc6ZjiVz.s 			page 112


2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3236              		.loc 1 2855 0
 3237 004e 084B     		ldr	r3, .L210+4
 3238 0050 1B68     		ldr	r3, [r3]
 3239 0052 1833     		adds	r3, r3, #24
 3240 0054 1946     		mov	r1, r3
 3241 0056 F868     		ldr	r0, [r7, #12]
 3242 0058 FFF7FEFF 		bl	vListInsertEnd
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3243              		.loc 1 2857 0
 3244 005c 0121     		movs	r1, #1
 3245 005e 7868     		ldr	r0, [r7, #4]
 3246 0060 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3247              		.loc 1 2858 0
 3248 0064 00BF     		nop
 3249 0066 1837     		adds	r7, r7, #24
 3250              	.LCFI120:
 3251              		.cfi_def_cfa_offset 8
 3252 0068 BD46     		mov	sp, r7
 3253              	.LCFI121:
 3254              		.cfi_def_cfa_register 13
 3255              		@ sp needed
 3256 006a 80BD     		pop	{r7, pc}
 3257              	.L211:
 3258              		.align	2
 3259              	.L210:
 3260 006c 00000000 		.word	uxSchedulerSuspended
 3261 0070 00000000 		.word	pxCurrentTCB
 3262              		.cfi_endproc
 3263              	.LFE28:
 3265              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3266              		.align	1
 3267              		.global	xTaskRemoveFromEventList
 3268              		.syntax unified
 3269              		.thumb
 3270              		.thumb_func
 3271              		.fpu fpv4-sp-d16
 3273              	xTaskRemoveFromEventList:
 3274              	.LFB29:
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
ARM GAS  /tmp/cc6ZjiVz.s 			page 113


2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3275              		.loc 1 2895 0
 3276              		.cfi_startproc
 3277              		@ args = 0, pretend = 0, frame = 24
 3278              		@ frame_needed = 1, uses_anonymous_args = 0
 3279 0000 80B5     		push	{r7, lr}
 3280              	.LCFI122:
 3281              		.cfi_def_cfa_offset 8
 3282              		.cfi_offset 7, -8
 3283              		.cfi_offset 14, -4
 3284 0002 86B0     		sub	sp, sp, #24
 3285              	.LCFI123:
 3286              		.cfi_def_cfa_offset 32
 3287 0004 00AF     		add	r7, sp, #0
 3288              	.LCFI124:
 3289              		.cfi_def_cfa_register 7
 3290 0006 7860     		str	r0, [r7, #4]
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
ARM GAS  /tmp/cc6ZjiVz.s 			page 114


2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 3291              		.loc 1 2912 0
 3292 0008 7B68     		ldr	r3, [r7, #4]
 3293 000a DB68     		ldr	r3, [r3, #12]
 3294 000c DB68     		ldr	r3, [r3, #12]
 3295 000e 3B61     		str	r3, [r7, #16]
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3296              		.loc 1 2913 0
 3297 0010 3B69     		ldr	r3, [r7, #16]
 3298 0012 002B     		cmp	r3, #0
 3299 0014 09D1     		bne	.L213
 3300              	.LBB142:
 3301              	.LBB143:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3302              		.loc 2 237 0 discriminator 1
 3303              		.syntax unified
 3304              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3305 0016 4FF05003 			mov r3, #80												
 3306 001a 83F31188 		msr basepri, r3											
 3307 001e BFF36F8F 		isb														
 3308 0022 BFF34F8F 		dsb														
 3309              	
 3310              	@ 0 "" 2
 3311              		.thumb
 3312              		.syntax unified
 3313 0026 FB60     		str	r3, [r7, #12]
 3314              	.L214:
 3315              	.LBE143:
 3316              	.LBE142:
 3317              		.loc 1 2913 0 discriminator 1
 3318 0028 FEE7     		b	.L214
 3319              	.L213:
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3320              		.loc 1 2914 0
 3321 002a 3B69     		ldr	r3, [r7, #16]
 3322 002c 1833     		adds	r3, r3, #24
 3323 002e 1846     		mov	r0, r3
 3324 0030 FFF7FEFF 		bl	uxListRemove
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3325              		.loc 1 2916 0
 3326 0034 1D4B     		ldr	r3, .L220
 3327 0036 1B68     		ldr	r3, [r3]
 3328 0038 002B     		cmp	r3, #0
 3329 003a 1CD1     		bne	.L215
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3330              		.loc 1 2918 0
 3331 003c 3B69     		ldr	r3, [r7, #16]
 3332 003e 0433     		adds	r3, r3, #4
 3333 0040 1846     		mov	r0, r3
 3334 0042 FFF7FEFF 		bl	uxListRemove
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3335              		.loc 1 2919 0
 3336 0046 3B69     		ldr	r3, [r7, #16]
 3337 0048 DB6A     		ldr	r3, [r3, #44]
 3338 004a 0122     		movs	r2, #1
ARM GAS  /tmp/cc6ZjiVz.s 			page 115


 3339 004c 9A40     		lsls	r2, r2, r3
 3340 004e 184B     		ldr	r3, .L220+4
 3341 0050 1B68     		ldr	r3, [r3]
 3342 0052 1343     		orrs	r3, r3, r2
 3343 0054 164A     		ldr	r2, .L220+4
 3344 0056 1360     		str	r3, [r2]
 3345 0058 3B69     		ldr	r3, [r7, #16]
 3346 005a DA6A     		ldr	r2, [r3, #44]
 3347 005c 1346     		mov	r3, r2
 3348 005e 9B00     		lsls	r3, r3, #2
 3349 0060 1344     		add	r3, r3, r2
 3350 0062 9B00     		lsls	r3, r3, #2
 3351 0064 134A     		ldr	r2, .L220+8
 3352 0066 1A44     		add	r2, r2, r3
 3353 0068 3B69     		ldr	r3, [r7, #16]
 3354 006a 0433     		adds	r3, r3, #4
 3355 006c 1946     		mov	r1, r3
 3356 006e 1046     		mov	r0, r2
 3357 0070 FFF7FEFF 		bl	vListInsertEnd
 3358 0074 05E0     		b	.L216
 3359              	.L215:
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 3360              		.loc 1 2925 0
 3361 0076 3B69     		ldr	r3, [r7, #16]
 3362 0078 1833     		adds	r3, r3, #24
 3363 007a 1946     		mov	r1, r3
 3364 007c 0E48     		ldr	r0, .L220+12
 3365 007e FFF7FEFF 		bl	vListInsertEnd
 3366              	.L216:
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3367              		.loc 1 2928 0
 3368 0082 3B69     		ldr	r3, [r7, #16]
 3369 0084 DA6A     		ldr	r2, [r3, #44]
 3370 0086 0D4B     		ldr	r3, .L220+16
 3371 0088 1B68     		ldr	r3, [r3]
 3372 008a DB6A     		ldr	r3, [r3, #44]
 3373 008c 9A42     		cmp	r2, r3
 3374 008e 05D9     		bls	.L217
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 3375              		.loc 1 2933 0
 3376 0090 0123     		movs	r3, #1
 3377 0092 7B61     		str	r3, [r7, #20]
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
ARM GAS  /tmp/cc6ZjiVz.s 			page 116


 3378              		.loc 1 2937 0
 3379 0094 0A4B     		ldr	r3, .L220+20
 3380 0096 0122     		movs	r2, #1
 3381 0098 1A60     		str	r2, [r3]
 3382 009a 01E0     		b	.L218
 3383              	.L217:
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 3384              		.loc 1 2941 0
 3385 009c 0023     		movs	r3, #0
 3386 009e 7B61     		str	r3, [r7, #20]
 3387              	.L218:
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3388              		.loc 1 2958 0
 3389 00a0 7B69     		ldr	r3, [r7, #20]
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3390              		.loc 1 2959 0
 3391 00a2 1846     		mov	r0, r3
 3392 00a4 1837     		adds	r7, r7, #24
 3393              	.LCFI125:
 3394              		.cfi_def_cfa_offset 8
 3395 00a6 BD46     		mov	sp, r7
 3396              	.LCFI126:
 3397              		.cfi_def_cfa_register 13
 3398              		@ sp needed
 3399 00a8 80BD     		pop	{r7, pc}
 3400              	.L221:
 3401 00aa 00BF     		.align	2
 3402              	.L220:
 3403 00ac 00000000 		.word	uxSchedulerSuspended
 3404 00b0 00000000 		.word	uxTopReadyPriority
 3405 00b4 00000000 		.word	pxReadyTasksLists
 3406 00b8 00000000 		.word	xPendingReadyList
 3407 00bc 00000000 		.word	pxCurrentTCB
 3408 00c0 00000000 		.word	xYieldPending
 3409              		.cfi_endproc
 3410              	.LFE29:
 3412              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3413              		.align	1
ARM GAS  /tmp/cc6ZjiVz.s 			page 117


 3414              		.global	xTaskRemoveFromUnorderedEventList
 3415              		.syntax unified
 3416              		.thumb
 3417              		.thumb_func
 3418              		.fpu fpv4-sp-d16
 3420              	xTaskRemoveFromUnorderedEventList:
 3421              	.LFB30:
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3422              		.loc 1 2963 0
 3423              		.cfi_startproc
 3424              		@ args = 0, pretend = 0, frame = 24
 3425              		@ frame_needed = 1, uses_anonymous_args = 0
 3426 0000 80B5     		push	{r7, lr}
 3427              	.LCFI127:
 3428              		.cfi_def_cfa_offset 8
 3429              		.cfi_offset 7, -8
 3430              		.cfi_offset 14, -4
 3431 0002 86B0     		sub	sp, sp, #24
 3432              	.LCFI128:
 3433              		.cfi_def_cfa_offset 32
 3434 0004 00AF     		add	r7, sp, #0
 3435              	.LCFI129:
 3436              		.cfi_def_cfa_register 7
 3437 0006 7860     		str	r0, [r7, #4]
 3438 0008 3960     		str	r1, [r7]
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 3439              		.loc 1 2969 0
 3440 000a 2B4B     		ldr	r3, .L230
 3441 000c 1B68     		ldr	r3, [r3]
 3442 000e 002B     		cmp	r3, #0
 3443 0010 09D1     		bne	.L223
 3444              	.LBB144:
 3445              	.LBB145:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3446              		.loc 2 237 0 discriminator 1
 3447              		.syntax unified
 3448              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3449 0012 4FF05003 			mov r3, #80												
 3450 0016 83F31188 		msr basepri, r3											
 3451 001a BFF36F8F 		isb														
 3452 001e BFF34F8F 		dsb														
 3453              	
 3454              	@ 0 "" 2
 3455              		.thumb
 3456              		.syntax unified
 3457 0022 FB60     		str	r3, [r7, #12]
 3458              	.L224:
 3459              	.LBE145:
 3460              	.LBE144:
ARM GAS  /tmp/cc6ZjiVz.s 			page 118


 3461              		.loc 1 2969 0 discriminator 1
 3462 0024 FEE7     		b	.L224
 3463              	.L223:
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3464              		.loc 1 2972 0
 3465 0026 3B68     		ldr	r3, [r7]
 3466 0028 43F00042 		orr	r2, r3, #-2147483648
 3467 002c 7B68     		ldr	r3, [r7, #4]
 3468 002e 1A60     		str	r2, [r3]
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 3469              		.loc 1 2976 0
 3470 0030 7B68     		ldr	r3, [r7, #4]
 3471 0032 DB68     		ldr	r3, [r3, #12]
 3472 0034 3B61     		str	r3, [r7, #16]
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3473              		.loc 1 2977 0
 3474 0036 3B69     		ldr	r3, [r7, #16]
 3475 0038 002B     		cmp	r3, #0
 3476 003a 09D1     		bne	.L225
 3477              	.LBB146:
 3478              	.LBB147:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3479              		.loc 2 237 0 discriminator 1
 3480              		.syntax unified
 3481              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3482 003c 4FF05003 			mov r3, #80												
 3483 0040 83F31188 		msr basepri, r3											
 3484 0044 BFF36F8F 		isb														
 3485 0048 BFF34F8F 		dsb														
 3486              	
 3487              	@ 0 "" 2
 3488              		.thumb
 3489              		.syntax unified
 3490 004c BB60     		str	r3, [r7, #8]
 3491              	.L226:
 3492              	.LBE147:
 3493              	.LBE146:
 3494              		.loc 1 2977 0 discriminator 2
 3495 004e FEE7     		b	.L226
 3496              	.L225:
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3497              		.loc 1 2978 0
 3498 0050 7868     		ldr	r0, [r7, #4]
 3499 0052 FFF7FEFF 		bl	uxListRemove
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3500              		.loc 1 2983 0
 3501 0056 3B69     		ldr	r3, [r7, #16]
 3502 0058 0433     		adds	r3, r3, #4
ARM GAS  /tmp/cc6ZjiVz.s 			page 119


 3503 005a 1846     		mov	r0, r3
 3504 005c FFF7FEFF 		bl	uxListRemove
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3505              		.loc 1 2984 0
 3506 0060 3B69     		ldr	r3, [r7, #16]
 3507 0062 DB6A     		ldr	r3, [r3, #44]
 3508 0064 0122     		movs	r2, #1
 3509 0066 9A40     		lsls	r2, r2, r3
 3510 0068 144B     		ldr	r3, .L230+4
 3511 006a 1B68     		ldr	r3, [r3]
 3512 006c 1343     		orrs	r3, r3, r2
 3513 006e 134A     		ldr	r2, .L230+4
 3514 0070 1360     		str	r3, [r2]
 3515 0072 3B69     		ldr	r3, [r7, #16]
 3516 0074 DA6A     		ldr	r2, [r3, #44]
 3517 0076 1346     		mov	r3, r2
 3518 0078 9B00     		lsls	r3, r3, #2
 3519 007a 1344     		add	r3, r3, r2
 3520 007c 9B00     		lsls	r3, r3, #2
 3521 007e 104A     		ldr	r2, .L230+8
 3522 0080 1A44     		add	r2, r2, r3
 3523 0082 3B69     		ldr	r3, [r7, #16]
 3524 0084 0433     		adds	r3, r3, #4
 3525 0086 1946     		mov	r1, r3
 3526 0088 1046     		mov	r0, r2
 3527 008a FFF7FEFF 		bl	vListInsertEnd
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3528              		.loc 1 2986 0
 3529 008e 3B69     		ldr	r3, [r7, #16]
 3530 0090 DA6A     		ldr	r2, [r3, #44]
 3531 0092 0C4B     		ldr	r3, .L230+12
 3532 0094 1B68     		ldr	r3, [r3]
 3533 0096 DB6A     		ldr	r3, [r3, #44]
 3534 0098 9A42     		cmp	r2, r3
 3535 009a 05D9     		bls	.L227
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch now. */
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 3536              		.loc 1 2992 0
 3537 009c 0123     		movs	r3, #1
 3538 009e 7B61     		str	r3, [r7, #20]
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3539              		.loc 1 2996 0
 3540 00a0 094B     		ldr	r3, .L230+16
 3541 00a2 0122     		movs	r2, #1
 3542 00a4 1A60     		str	r2, [r3]
 3543 00a6 01E0     		b	.L228
 3544              	.L227:
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
ARM GAS  /tmp/cc6ZjiVz.s 			page 120


2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 3545              		.loc 1 3000 0
 3546 00a8 0023     		movs	r3, #0
 3547 00aa 7B61     		str	r3, [r7, #20]
 3548              	.L228:
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3549              		.loc 1 3003 0
 3550 00ac 7B69     		ldr	r3, [r7, #20]
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3551              		.loc 1 3004 0
 3552 00ae 1846     		mov	r0, r3
 3553 00b0 1837     		adds	r7, r7, #24
 3554              	.LCFI130:
 3555              		.cfi_def_cfa_offset 8
 3556 00b2 BD46     		mov	sp, r7
 3557              	.LCFI131:
 3558              		.cfi_def_cfa_register 13
 3559              		@ sp needed
 3560 00b4 80BD     		pop	{r7, pc}
 3561              	.L231:
 3562 00b6 00BF     		.align	2
 3563              	.L230:
 3564 00b8 00000000 		.word	uxSchedulerSuspended
 3565 00bc 00000000 		.word	uxTopReadyPriority
 3566 00c0 00000000 		.word	pxReadyTasksLists
 3567 00c4 00000000 		.word	pxCurrentTCB
 3568 00c8 00000000 		.word	xYieldPending
 3569              		.cfi_endproc
 3570              	.LFE30:
 3572              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3573              		.align	1
 3574              		.global	vTaskSetTimeOutState
 3575              		.syntax unified
 3576              		.thumb
 3577              		.thumb_func
 3578              		.fpu fpv4-sp-d16
 3580              	vTaskSetTimeOutState:
 3581              	.LFB31:
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3582              		.loc 1 3008 0
 3583              		.cfi_startproc
 3584              		@ args = 0, pretend = 0, frame = 16
 3585              		@ frame_needed = 1, uses_anonymous_args = 0
 3586              		@ link register save eliminated.
 3587 0000 80B4     		push	{r7}
 3588              	.LCFI132:
 3589              		.cfi_def_cfa_offset 4
 3590              		.cfi_offset 7, -4
 3591 0002 85B0     		sub	sp, sp, #20
 3592              	.LCFI133:
 3593              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cc6ZjiVz.s 			page 121


 3594 0004 00AF     		add	r7, sp, #0
 3595              	.LCFI134:
 3596              		.cfi_def_cfa_register 7
 3597 0006 7860     		str	r0, [r7, #4]
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3598              		.loc 1 3009 0
 3599 0008 7B68     		ldr	r3, [r7, #4]
 3600 000a 002B     		cmp	r3, #0
 3601 000c 09D1     		bne	.L233
 3602              	.LBB148:
 3603              	.LBB149:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3604              		.loc 2 237 0 discriminator 1
 3605              		.syntax unified
 3606              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3607 000e 4FF05003 			mov r3, #80												
 3608 0012 83F31188 		msr basepri, r3											
 3609 0016 BFF36F8F 		isb														
 3610 001a BFF34F8F 		dsb														
 3611              	
 3612              	@ 0 "" 2
 3613              		.thumb
 3614              		.syntax unified
 3615 001e FB60     		str	r3, [r7, #12]
 3616              	.L234:
 3617              	.LBE149:
 3618              	.LBE148:
 3619              		.loc 1 3009 0 discriminator 1
 3620 0020 FEE7     		b	.L234
 3621              	.L233:
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3622              		.loc 1 3010 0
 3623 0022 074B     		ldr	r3, .L235
 3624 0024 1A68     		ldr	r2, [r3]
 3625 0026 7B68     		ldr	r3, [r7, #4]
 3626 0028 1A60     		str	r2, [r3]
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3627              		.loc 1 3011 0
 3628 002a 064B     		ldr	r3, .L235+4
 3629 002c 1A68     		ldr	r2, [r3]
 3630 002e 7B68     		ldr	r3, [r7, #4]
 3631 0030 5A60     		str	r2, [r3, #4]
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3632              		.loc 1 3012 0
 3633 0032 00BF     		nop
 3634 0034 1437     		adds	r7, r7, #20
 3635              	.LCFI135:
 3636              		.cfi_def_cfa_offset 4
 3637 0036 BD46     		mov	sp, r7
 3638              	.LCFI136:
 3639              		.cfi_def_cfa_register 13
 3640              		@ sp needed
 3641 0038 5DF8047B 		ldr	r7, [sp], #4
 3642              	.LCFI137:
 3643              		.cfi_restore 7
 3644              		.cfi_def_cfa_offset 0
 3645 003c 7047     		bx	lr
ARM GAS  /tmp/cc6ZjiVz.s 			page 122


 3646              	.L236:
 3647 003e 00BF     		.align	2
 3648              	.L235:
 3649 0040 00000000 		.word	xNumOfOverflows
 3650 0044 00000000 		.word	xTickCount
 3651              		.cfi_endproc
 3652              	.LFE31:
 3654              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3655              		.align	1
 3656              		.global	xTaskCheckForTimeOut
 3657              		.syntax unified
 3658              		.thumb
 3659              		.thumb_func
 3660              		.fpu fpv4-sp-d16
 3662              	xTaskCheckForTimeOut:
 3663              	.LFB32:
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3664              		.loc 1 3016 0
 3665              		.cfi_startproc
 3666              		@ args = 0, pretend = 0, frame = 24
 3667              		@ frame_needed = 1, uses_anonymous_args = 0
 3668 0000 80B5     		push	{r7, lr}
 3669              	.LCFI138:
 3670              		.cfi_def_cfa_offset 8
 3671              		.cfi_offset 7, -8
 3672              		.cfi_offset 14, -4
 3673 0002 86B0     		sub	sp, sp, #24
 3674              	.LCFI139:
 3675              		.cfi_def_cfa_offset 32
 3676 0004 00AF     		add	r7, sp, #0
 3677              	.LCFI140:
 3678              		.cfi_def_cfa_register 7
 3679 0006 7860     		str	r0, [r7, #4]
 3680 0008 3960     		str	r1, [r7]
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3681              		.loc 1 3019 0
 3682 000a 7B68     		ldr	r3, [r7, #4]
 3683 000c 002B     		cmp	r3, #0
 3684 000e 09D1     		bne	.L238
 3685              	.LBB150:
 3686              	.LBB151:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3687              		.loc 2 237 0 discriminator 1
 3688              		.syntax unified
 3689              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3690 0010 4FF05003 			mov r3, #80												
 3691 0014 83F31188 		msr basepri, r3											
 3692 0018 BFF36F8F 		isb														
 3693 001c BFF34F8F 		dsb														
 3694              	
 3695              	@ 0 "" 2
 3696              		.thumb
ARM GAS  /tmp/cc6ZjiVz.s 			page 123


 3697              		.syntax unified
 3698 0020 FB60     		str	r3, [r7, #12]
 3699              	.L239:
 3700              	.LBE151:
 3701              	.LBE150:
 3702              		.loc 1 3019 0 discriminator 1
 3703 0022 FEE7     		b	.L239
 3704              	.L238:
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3705              		.loc 1 3020 0
 3706 0024 3B68     		ldr	r3, [r7]
 3707 0026 002B     		cmp	r3, #0
 3708 0028 09D1     		bne	.L240
 3709              	.LBB152:
 3710              	.LBB153:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3711              		.loc 2 237 0 discriminator 1
 3712              		.syntax unified
 3713              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3714 002a 4FF05003 			mov r3, #80												
 3715 002e 83F31188 		msr basepri, r3											
 3716 0032 BFF36F8F 		isb														
 3717 0036 BFF34F8F 		dsb														
 3718              	
 3719              	@ 0 "" 2
 3720              		.thumb
 3721              		.syntax unified
 3722 003a BB60     		str	r3, [r7, #8]
 3723              	.L241:
 3724              	.LBE153:
 3725              	.LBE152:
 3726              		.loc 1 3020 0 discriminator 2
 3727 003c FEE7     		b	.L241
 3728              	.L240:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3729              		.loc 1 3022 0
 3730 003e FFF7FEFF 		bl	vPortEnterCritical
 3731              	.LBB154:
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 3732              		.loc 1 3025 0
 3733 0042 1C4B     		ldr	r3, .L247
 3734 0044 1B68     		ldr	r3, [r3]
 3735 0046 3B61     		str	r3, [r7, #16]
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
ARM GAS  /tmp/cc6ZjiVz.s 			page 124


3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 3736              		.loc 1 3039 0
 3737 0048 3B68     		ldr	r3, [r7]
 3738 004a 1B68     		ldr	r3, [r3]
 3739 004c B3F1FF3F 		cmp	r3, #-1
 3740 0050 02D1     		bne	.L242
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 3741              		.loc 1 3044 0
 3742 0052 0023     		movs	r3, #0
 3743 0054 7B61     		str	r3, [r7, #20]
 3744 0056 26E0     		b	.L243
 3745              	.L242:
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 3746              		.loc 1 3049 0
 3747 0058 7B68     		ldr	r3, [r7, #4]
 3748 005a 1A68     		ldr	r2, [r3]
 3749 005c 164B     		ldr	r3, .L247+4
 3750 005e 1B68     		ldr	r3, [r3]
 3751 0060 9A42     		cmp	r2, r3
 3752 0062 07D0     		beq	.L244
 3753              		.loc 1 3049 0 is_stmt 0 discriminator 1
 3754 0064 7B68     		ldr	r3, [r7, #4]
 3755 0066 5A68     		ldr	r2, [r3, #4]
 3756 0068 3B69     		ldr	r3, [r7, #16]
 3757 006a 9A42     		cmp	r2, r3
 3758 006c 02D8     		bhi	.L244
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3759              		.loc 1 3056 0 is_stmt 1
 3760 006e 0123     		movs	r3, #1
 3761 0070 7B61     		str	r3, [r7, #20]
 3762 0072 18E0     		b	.L243
 3763              	.L244:
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
 3764              		.loc 1 3058 0
 3765 0074 7B68     		ldr	r3, [r7, #4]
 3766 0076 5B68     		ldr	r3, [r3, #4]
 3767 0078 3A69     		ldr	r2, [r7, #16]
 3768 007a D21A     		subs	r2, r2, r3
 3769 007c 3B68     		ldr	r3, [r7]
 3770 007e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc6ZjiVz.s 			page 125


 3771 0080 9A42     		cmp	r2, r3
 3772 0082 0ED2     		bcs	.L245
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 3773              		.loc 1 3061 0
 3774 0084 3B68     		ldr	r3, [r7]
 3775 0086 1A68     		ldr	r2, [r3]
 3776 0088 7B68     		ldr	r3, [r7, #4]
 3777 008a 5968     		ldr	r1, [r3, #4]
 3778 008c 3B69     		ldr	r3, [r7, #16]
 3779 008e CB1A     		subs	r3, r1, r3
 3780 0090 1A44     		add	r2, r2, r3
 3781 0092 3B68     		ldr	r3, [r7]
 3782 0094 1A60     		str	r2, [r3]
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3783              		.loc 1 3062 0
 3784 0096 7868     		ldr	r0, [r7, #4]
 3785 0098 FFF7FEFF 		bl	vTaskSetTimeOutState
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3786              		.loc 1 3063 0
 3787 009c 0023     		movs	r3, #0
 3788 009e 7B61     		str	r3, [r7, #20]
 3789 00a0 01E0     		b	.L243
 3790              	.L245:
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3791              		.loc 1 3067 0
 3792 00a2 0123     		movs	r3, #1
 3793 00a4 7B61     		str	r3, [r7, #20]
 3794              	.L243:
 3795              	.LBE154:
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 3796              		.loc 1 3070 0
 3797 00a6 FFF7FEFF 		bl	vPortExitCritical
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3798              		.loc 1 3072 0
 3799 00aa 7B69     		ldr	r3, [r7, #20]
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3800              		.loc 1 3073 0
 3801 00ac 1846     		mov	r0, r3
 3802 00ae 1837     		adds	r7, r7, #24
 3803              	.LCFI141:
 3804              		.cfi_def_cfa_offset 8
 3805 00b0 BD46     		mov	sp, r7
 3806              	.LCFI142:
 3807              		.cfi_def_cfa_register 13
 3808              		@ sp needed
 3809 00b2 80BD     		pop	{r7, pc}
 3810              	.L248:
 3811              		.align	2
 3812              	.L247:
ARM GAS  /tmp/cc6ZjiVz.s 			page 126


 3813 00b4 00000000 		.word	xTickCount
 3814 00b8 00000000 		.word	xNumOfOverflows
 3815              		.cfi_endproc
 3816              	.LFE32:
 3818              		.section	.text.vTaskMissedYield,"ax",%progbits
 3819              		.align	1
 3820              		.global	vTaskMissedYield
 3821              		.syntax unified
 3822              		.thumb
 3823              		.thumb_func
 3824              		.fpu fpv4-sp-d16
 3826              	vTaskMissedYield:
 3827              	.LFB33:
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3828              		.loc 1 3077 0
 3829              		.cfi_startproc
 3830              		@ args = 0, pretend = 0, frame = 0
 3831              		@ frame_needed = 1, uses_anonymous_args = 0
 3832              		@ link register save eliminated.
 3833 0000 80B4     		push	{r7}
 3834              	.LCFI143:
 3835              		.cfi_def_cfa_offset 4
 3836              		.cfi_offset 7, -4
 3837 0002 00AF     		add	r7, sp, #0
 3838              	.LCFI144:
 3839              		.cfi_def_cfa_register 7
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3840              		.loc 1 3078 0
 3841 0004 034B     		ldr	r3, .L250
 3842 0006 0122     		movs	r2, #1
 3843 0008 1A60     		str	r2, [r3]
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3844              		.loc 1 3079 0
 3845 000a 00BF     		nop
 3846 000c BD46     		mov	sp, r7
 3847              	.LCFI145:
 3848              		.cfi_def_cfa_register 13
 3849              		@ sp needed
 3850 000e 5DF8047B 		ldr	r7, [sp], #4
 3851              	.LCFI146:
 3852              		.cfi_restore 7
 3853              		.cfi_def_cfa_offset 0
 3854 0012 7047     		bx	lr
 3855              	.L251:
 3856              		.align	2
 3857              	.L250:
 3858 0014 00000000 		.word	xYieldPending
 3859              		.cfi_endproc
 3860              	.LFE33:
 3862              		.section	.text.prvIdleTask,"ax",%progbits
 3863              		.align	1
 3864              		.syntax unified
 3865              		.thumb
 3866              		.thumb_func
ARM GAS  /tmp/cc6ZjiVz.s 			page 127


 3867              		.fpu fpv4-sp-d16
 3869              	prvIdleTask:
 3870              	.LFB34:
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3871              		.loc 1 3132 0
ARM GAS  /tmp/cc6ZjiVz.s 			page 128


 3872              		.cfi_startproc
 3873              		@ args = 0, pretend = 0, frame = 8
 3874              		@ frame_needed = 1, uses_anonymous_args = 0
 3875 0000 80B5     		push	{r7, lr}
 3876              	.LCFI147:
 3877              		.cfi_def_cfa_offset 8
 3878              		.cfi_offset 7, -8
 3879              		.cfi_offset 14, -4
 3880 0002 82B0     		sub	sp, sp, #8
 3881              	.LCFI148:
 3882              		.cfi_def_cfa_offset 16
 3883 0004 00AF     		add	r7, sp, #0
 3884              	.LCFI149:
 3885              		.cfi_def_cfa_register 7
 3886 0006 7860     		str	r0, [r7, #4]
 3887              	.L254:
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 3888              		.loc 1 3143 0
 3889 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 3890              		.loc 1 3166 0
 3891 000c 064B     		ldr	r3, .L255
 3892 000e 1B68     		ldr	r3, [r3]
 3893 0010 012B     		cmp	r3, #1
 3894 0012 F9D9     		bls	.L254
ARM GAS  /tmp/cc6ZjiVz.s 			page 129


3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 3895              		.loc 1 3168 0
 3896 0014 054B     		ldr	r3, .L255+4
 3897 0016 4FF08052 		mov	r2, #268435456
 3898 001a 1A60     		str	r2, [r3]
 3899              		.syntax unified
 3900              	@ 3168 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3901 001c BFF34F8F 		dsb
 3902              	@ 0 "" 2
 3903              	@ 3168 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3904 0020 BFF36F8F 		isb
 3905              	@ 0 "" 2
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3906              		.loc 1 3143 0
 3907              		.thumb
 3908              		.syntax unified
 3909 0024 F0E7     		b	.L254
 3910              	.L256:
 3911 0026 00BF     		.align	2
 3912              	.L255:
 3913 0028 00000000 		.word	pxReadyTasksLists
 3914 002c 04ED00E0 		.word	-536810236
 3915              		.cfi_endproc
 3916              	.LFE34:
 3918              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 3919              		.align	1
 3920              		.syntax unified
 3921              		.thumb
 3922              		.thumb_func
 3923              		.fpu fpv4-sp-d16
 3925              	prvInitialiseTaskLists:
 3926              	.LFB35:
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
ARM GAS  /tmp/cc6ZjiVz.s 			page 130


3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
ARM GAS  /tmp/cc6ZjiVz.s 			page 131


3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  /tmp/cc6ZjiVz.s 			page 132


3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3927              		.loc 1 3334 0
 3928              		.cfi_startproc
 3929              		@ args = 0, pretend = 0, frame = 8
 3930              		@ frame_needed = 1, uses_anonymous_args = 0
 3931 0000 80B5     		push	{r7, lr}
 3932              	.LCFI150:
 3933              		.cfi_def_cfa_offset 8
 3934              		.cfi_offset 7, -8
 3935              		.cfi_offset 14, -4
 3936 0002 82B0     		sub	sp, sp, #8
 3937              	.LCFI151:
 3938              		.cfi_def_cfa_offset 16
 3939 0004 00AF     		add	r7, sp, #0
 3940              	.LCFI152:
 3941              		.cfi_def_cfa_register 7
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 3942              		.loc 1 3337 0
 3943 0006 0023     		movs	r3, #0
 3944 0008 7B60     		str	r3, [r7, #4]
 3945 000a 0CE0     		b	.L258
 3946              	.L259:
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 3947              		.loc 1 3339 0 discriminator 3
 3948 000c 7A68     		ldr	r2, [r7, #4]
 3949 000e 1346     		mov	r3, r2
 3950 0010 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/cc6ZjiVz.s 			page 133


 3951 0012 1344     		add	r3, r3, r2
 3952 0014 9B00     		lsls	r3, r3, #2
 3953 0016 124A     		ldr	r2, .L260
 3954 0018 1344     		add	r3, r3, r2
 3955 001a 1846     		mov	r0, r3
 3956 001c FFF7FEFF 		bl	vListInitialise
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3957              		.loc 1 3337 0 discriminator 3
 3958 0020 7B68     		ldr	r3, [r7, #4]
 3959 0022 0133     		adds	r3, r3, #1
 3960 0024 7B60     		str	r3, [r7, #4]
 3961              	.L258:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3962              		.loc 1 3337 0 is_stmt 0 discriminator 1
 3963 0026 7B68     		ldr	r3, [r7, #4]
 3964 0028 062B     		cmp	r3, #6
 3965 002a EFD9     		bls	.L259
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 3966              		.loc 1 3342 0 is_stmt 1
 3967 002c 0D48     		ldr	r0, .L260+4
 3968 002e FFF7FEFF 		bl	vListInitialise
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 3969              		.loc 1 3343 0
 3970 0032 0D48     		ldr	r0, .L260+8
 3971 0034 FFF7FEFF 		bl	vListInitialise
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 3972              		.loc 1 3344 0
 3973 0038 0C48     		ldr	r0, .L260+12
 3974 003a FFF7FEFF 		bl	vListInitialise
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 3975              		.loc 1 3348 0
 3976 003e 0C48     		ldr	r0, .L260+16
 3977 0040 FFF7FEFF 		bl	vListInitialise
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 3978              		.loc 1 3354 0
 3979 0044 0B48     		ldr	r0, .L260+20
 3980 0046 FFF7FEFF 		bl	vListInitialise
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 3981              		.loc 1 3360 0
 3982 004a 0B4B     		ldr	r3, .L260+24
 3983 004c 054A     		ldr	r2, .L260+4
 3984 004e 1A60     		str	r2, [r3]
ARM GAS  /tmp/cc6ZjiVz.s 			page 134


3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 3985              		.loc 1 3361 0
 3986 0050 0A4B     		ldr	r3, .L260+28
 3987 0052 054A     		ldr	r2, .L260+8
 3988 0054 1A60     		str	r2, [r3]
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3989              		.loc 1 3362 0
 3990 0056 00BF     		nop
 3991 0058 0837     		adds	r7, r7, #8
 3992              	.LCFI153:
 3993              		.cfi_def_cfa_offset 8
 3994 005a BD46     		mov	sp, r7
 3995              	.LCFI154:
 3996              		.cfi_def_cfa_register 13
 3997              		@ sp needed
 3998 005c 80BD     		pop	{r7, pc}
 3999              	.L261:
 4000 005e 00BF     		.align	2
 4001              	.L260:
 4002 0060 00000000 		.word	pxReadyTasksLists
 4003 0064 00000000 		.word	xDelayedTaskList1
 4004 0068 00000000 		.word	xDelayedTaskList2
 4005 006c 00000000 		.word	xPendingReadyList
 4006 0070 00000000 		.word	xTasksWaitingTermination
 4007 0074 00000000 		.word	xSuspendedTaskList
 4008 0078 00000000 		.word	pxDelayedTaskList
 4009 007c 00000000 		.word	pxOverflowDelayedTaskList
 4010              		.cfi_endproc
 4011              	.LFE35:
 4013              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 4014              		.align	1
 4015              		.syntax unified
 4016              		.thumb
 4017              		.thumb_func
 4018              		.fpu fpv4-sp-d16
 4020              	prvCheckTasksWaitingTermination:
 4021              	.LFB36:
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4022              		.loc 1 3366 0
 4023              		.cfi_startproc
 4024              		@ args = 0, pretend = 0, frame = 8
 4025              		@ frame_needed = 1, uses_anonymous_args = 0
 4026 0000 80B5     		push	{r7, lr}
 4027              	.LCFI155:
 4028              		.cfi_def_cfa_offset 8
 4029              		.cfi_offset 7, -8
 4030              		.cfi_offset 14, -4
 4031 0002 82B0     		sub	sp, sp, #8
 4032              	.LCFI156:
 4033              		.cfi_def_cfa_offset 16
 4034 0004 00AF     		add	r7, sp, #0
 4035              	.LCFI157:
 4036              		.cfi_def_cfa_register 7
 4037              	.LBB155:
ARM GAS  /tmp/cc6ZjiVz.s 			page 135


3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 4038              		.loc 1 3376 0
 4039 0006 28E0     		b	.L263
 4040              	.L264:
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 4041              		.loc 1 3378 0
 4042 0008 FFF7FEFF 		bl	vTaskSuspendAll
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 4043              		.loc 1 3380 0
 4044 000c 174B     		ldr	r3, .L265
 4045 000e 1B68     		ldr	r3, [r3]
 4046 0010 002B     		cmp	r3, #0
 4047 0012 0CBF     		ite	eq
 4048 0014 0123     		moveq	r3, #1
 4049 0016 0023     		movne	r3, #0
 4050 0018 DBB2     		uxtb	r3, r3
 4051 001a 7B60     		str	r3, [r7, #4]
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xTaskResumeAll();
 4052              		.loc 1 3382 0
 4053 001c FFF7FEFF 		bl	xTaskResumeAll
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 4054              		.loc 1 3384 0
 4055 0020 7B68     		ldr	r3, [r7, #4]
 4056 0022 002B     		cmp	r3, #0
 4057 0024 19D1     		bne	.L263
 4058              	.LBB156:
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				TCB_t *pxTCB;
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
 4059              		.loc 1 3388 0
 4060 0026 FFF7FEFF 		bl	vPortEnterCritical
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 4061              		.loc 1 3390 0
 4062 002a 104B     		ldr	r3, .L265
 4063 002c DB68     		ldr	r3, [r3, #12]
 4064 002e DB68     		ldr	r3, [r3, #12]
 4065 0030 3B60     		str	r3, [r7]
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4066              		.loc 1 3391 0
 4067 0032 3B68     		ldr	r3, [r7]
 4068 0034 0433     		adds	r3, r3, #4
 4069 0036 1846     		mov	r0, r3
ARM GAS  /tmp/cc6ZjiVz.s 			page 136


 4070 0038 FFF7FEFF 		bl	uxListRemove
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 4071              		.loc 1 3392 0
 4072 003c 0C4B     		ldr	r3, .L265+4
 4073 003e 1B68     		ldr	r3, [r3]
 4074 0040 013B     		subs	r3, r3, #1
 4075 0042 0B4A     		ldr	r2, .L265+4
 4076 0044 1360     		str	r3, [r2]
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 4077              		.loc 1 3393 0
 4078 0046 0B4B     		ldr	r3, .L265+8
 4079 0048 1B68     		ldr	r3, [r3]
 4080 004a 013B     		subs	r3, r3, #1
 4081 004c 094A     		ldr	r2, .L265+8
 4082 004e 1360     		str	r3, [r2]
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
 4083              		.loc 1 3395 0
 4084 0050 FFF7FEFF 		bl	vPortExitCritical
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 4085              		.loc 1 3397 0
 4086 0054 3868     		ldr	r0, [r7]
 4087 0056 FFF7FEFF 		bl	prvDeleteTCB
 4088              	.L263:
 4089              	.LBE156:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4090              		.loc 1 3376 0
 4091 005a 064B     		ldr	r3, .L265+8
 4092 005c 1B68     		ldr	r3, [r3]
 4093 005e 002B     		cmp	r3, #0
 4094 0060 D2D1     		bne	.L264
 4095              	.LBE155:
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4096              		.loc 1 3406 0
 4097 0062 00BF     		nop
 4098 0064 0837     		adds	r7, r7, #8
 4099              	.LCFI158:
 4100              		.cfi_def_cfa_offset 8
 4101 0066 BD46     		mov	sp, r7
 4102              	.LCFI159:
 4103              		.cfi_def_cfa_register 13
 4104              		@ sp needed
 4105 0068 80BD     		pop	{r7, pc}
 4106              	.L266:
 4107 006a 00BF     		.align	2
 4108              	.L265:
 4109 006c 00000000 		.word	xTasksWaitingTermination
 4110 0070 00000000 		.word	uxCurrentNumberOfTasks
ARM GAS  /tmp/cc6ZjiVz.s 			page 137


 4111 0074 00000000 		.word	uxDeletedTasksWaitingCleanUp
 4112              		.cfi_endproc
 4113              	.LFE36:
 4115              		.section	.text.prvDeleteTCB,"ax",%progbits
 4116              		.align	1
 4117              		.syntax unified
 4118              		.thumb
 4119              		.thumb_func
 4120              		.fpu fpv4-sp-d16
 4122              	prvDeleteTCB:
 4123              	.LFB37:
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being in the Blocked state. */
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xTaskResumeAll();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc6ZjiVz.s 			page 138


3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		just set to whatever is passed in. */
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
ARM GAS  /tmp/cc6ZjiVz.s 			page 139


3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cc6ZjiVz.s 			page 140


3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4124              		.loc 1 3582 0
 4125              		.cfi_startproc
 4126              		@ args = 0, pretend = 0, frame = 8
 4127              		@ frame_needed = 1, uses_anonymous_args = 0
 4128 0000 80B5     		push	{r7, lr}
 4129              	.LCFI160:
 4130              		.cfi_def_cfa_offset 8
 4131              		.cfi_offset 7, -8
 4132              		.cfi_offset 14, -4
 4133 0002 82B0     		sub	sp, sp, #8
 4134              	.LCFI161:
 4135              		.cfi_def_cfa_offset 16
 4136 0004 00AF     		add	r7, sp, #0
 4137              	.LCFI162:
 4138              		.cfi_def_cfa_register 7
 4139 0006 7860     		str	r0, [r7, #4]
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
 4140              		.loc 1 3600 0
 4141 0008 7B68     		ldr	r3, [r7, #4]
 4142 000a 1B6B     		ldr	r3, [r3, #48]
 4143 000c 1846     		mov	r0, r3
 4144 000e FFF7FEFF 		bl	vPortFree
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 4145              		.loc 1 3601 0
ARM GAS  /tmp/cc6ZjiVz.s 			page 141


 4146 0012 7868     		ldr	r0, [r7, #4]
 4147 0014 FFF7FEFF 		bl	vPortFree
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4148              		.loc 1 3630 0
 4149 0018 00BF     		nop
 4150 001a 0837     		adds	r7, r7, #8
 4151              	.LCFI163:
 4152              		.cfi_def_cfa_offset 8
 4153 001c BD46     		mov	sp, r7
 4154              	.LCFI164:
 4155              		.cfi_def_cfa_register 13
 4156              		@ sp needed
 4157 001e 80BD     		pop	{r7, pc}
 4158              		.cfi_endproc
 4159              	.LFE37:
 4161              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 4162              		.align	1
 4163              		.syntax unified
 4164              		.thumb
 4165              		.thumb_func
 4166              		.fpu fpv4-sp-d16
 4168              	prvResetNextTaskUnblockTime:
 4169              	.LFB38:
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/cc6ZjiVz.s 			page 142


 4170              		.loc 1 3636 0
 4171              		.cfi_startproc
 4172              		@ args = 0, pretend = 0, frame = 8
 4173              		@ frame_needed = 1, uses_anonymous_args = 0
 4174              		@ link register save eliminated.
 4175 0000 80B4     		push	{r7}
 4176              	.LCFI165:
 4177              		.cfi_def_cfa_offset 4
 4178              		.cfi_offset 7, -4
 4179 0002 83B0     		sub	sp, sp, #12
 4180              	.LCFI166:
 4181              		.cfi_def_cfa_offset 16
 4182 0004 00AF     		add	r7, sp, #0
 4183              	.LCFI167:
 4184              		.cfi_def_cfa_register 7
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4185              		.loc 1 3639 0
 4186 0006 0F4B     		ldr	r3, .L274
 4187 0008 1B68     		ldr	r3, [r3]
 4188 000a 1B68     		ldr	r3, [r3]
 4189 000c 002B     		cmp	r3, #0
 4190 000e 01D1     		bne	.L269
 4191              		.loc 1 3639 0 is_stmt 0 discriminator 1
 4192 0010 0123     		movs	r3, #1
 4193 0012 00E0     		b	.L270
 4194              	.L269:
 4195              		.loc 1 3639 0 discriminator 2
 4196 0014 0023     		movs	r3, #0
 4197              	.L270:
 4198              		.loc 1 3639 0 discriminator 4
 4199 0016 002B     		cmp	r3, #0
 4200 0018 04D0     		beq	.L271
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 4201              		.loc 1 3645 0 is_stmt 1
 4202 001a 0B4B     		ldr	r3, .L274+4
 4203 001c 4FF0FF32 		mov	r2, #-1
 4204 0020 1A60     		str	r2, [r3]
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4205              		.loc 1 3656 0
 4206 0022 08E0     		b	.L273
ARM GAS  /tmp/cc6ZjiVz.s 			page 143


 4207              	.L271:
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 4208              		.loc 1 3653 0
 4209 0024 074B     		ldr	r3, .L274
 4210 0026 1B68     		ldr	r3, [r3]
 4211 0028 DB68     		ldr	r3, [r3, #12]
 4212 002a DB68     		ldr	r3, [r3, #12]
 4213 002c 7B60     		str	r3, [r7, #4]
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4214              		.loc 1 3654 0
 4215 002e 7B68     		ldr	r3, [r7, #4]
 4216 0030 5B68     		ldr	r3, [r3, #4]
 4217 0032 054A     		ldr	r2, .L274+4
 4218 0034 1360     		str	r3, [r2]
 4219              	.L273:
 4220              		.loc 1 3656 0
 4221 0036 00BF     		nop
 4222 0038 0C37     		adds	r7, r7, #12
 4223              	.LCFI168:
 4224              		.cfi_def_cfa_offset 4
 4225 003a BD46     		mov	sp, r7
 4226              	.LCFI169:
 4227              		.cfi_def_cfa_register 13
 4228              		@ sp needed
 4229 003c 5DF8047B 		ldr	r7, [sp], #4
 4230              	.LCFI170:
 4231              		.cfi_restore 7
 4232              		.cfi_def_cfa_offset 0
 4233 0040 7047     		bx	lr
 4234              	.L275:
 4235 0042 00BF     		.align	2
 4236              	.L274:
 4237 0044 00000000 		.word	pxDelayedTaskList
 4238 0048 00000000 		.word	xNextTaskUnblockTime
 4239              		.cfi_endproc
 4240              	.LFE38:
 4242              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4243              		.align	1
 4244              		.global	xTaskGetCurrentTaskHandle
 4245              		.syntax unified
 4246              		.thumb
 4247              		.thumb_func
 4248              		.fpu fpv4-sp-d16
 4250              	xTaskGetCurrentTaskHandle:
 4251              	.LFB39:
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4252              		.loc 1 3662 0
 4253              		.cfi_startproc
 4254              		@ args = 0, pretend = 0, frame = 8
 4255              		@ frame_needed = 1, uses_anonymous_args = 0
 4256              		@ link register save eliminated.
 4257 0000 80B4     		push	{r7}
ARM GAS  /tmp/cc6ZjiVz.s 			page 144


 4258              	.LCFI171:
 4259              		.cfi_def_cfa_offset 4
 4260              		.cfi_offset 7, -4
 4261 0002 83B0     		sub	sp, sp, #12
 4262              	.LCFI172:
 4263              		.cfi_def_cfa_offset 16
 4264 0004 00AF     		add	r7, sp, #0
 4265              	.LCFI173:
 4266              		.cfi_def_cfa_register 7
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 4267              		.loc 1 3668 0
 4268 0006 054B     		ldr	r3, .L278
 4269 0008 1B68     		ldr	r3, [r3]
 4270 000a 7B60     		str	r3, [r7, #4]
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4271              		.loc 1 3670 0
 4272 000c 7B68     		ldr	r3, [r7, #4]
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4273              		.loc 1 3671 0
 4274 000e 1846     		mov	r0, r3
 4275 0010 0C37     		adds	r7, r7, #12
 4276              	.LCFI174:
 4277              		.cfi_def_cfa_offset 4
 4278 0012 BD46     		mov	sp, r7
 4279              	.LCFI175:
 4280              		.cfi_def_cfa_register 13
 4281              		@ sp needed
 4282 0014 5DF8047B 		ldr	r7, [sp], #4
 4283              	.LCFI176:
 4284              		.cfi_restore 7
 4285              		.cfi_def_cfa_offset 0
 4286 0018 7047     		bx	lr
 4287              	.L279:
 4288 001a 00BF     		.align	2
 4289              	.L278:
 4290 001c 00000000 		.word	pxCurrentTCB
 4291              		.cfi_endproc
 4292              	.LFE39:
 4294              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4295              		.align	1
 4296              		.global	xTaskGetSchedulerState
 4297              		.syntax unified
 4298              		.thumb
 4299              		.thumb_func
 4300              		.fpu fpv4-sp-d16
 4302              	xTaskGetSchedulerState:
 4303              	.LFB40:
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc6ZjiVz.s 			page 145


3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4304              		.loc 1 3679 0
 4305              		.cfi_startproc
 4306              		@ args = 0, pretend = 0, frame = 8
 4307              		@ frame_needed = 1, uses_anonymous_args = 0
 4308              		@ link register save eliminated.
 4309 0000 80B4     		push	{r7}
 4310              	.LCFI177:
 4311              		.cfi_def_cfa_offset 4
 4312              		.cfi_offset 7, -4
 4313 0002 83B0     		sub	sp, sp, #12
 4314              	.LCFI178:
 4315              		.cfi_def_cfa_offset 16
 4316 0004 00AF     		add	r7, sp, #0
 4317              	.LCFI179:
 4318              		.cfi_def_cfa_register 7
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 4319              		.loc 1 3682 0
 4320 0006 0B4B     		ldr	r3, .L285
 4321 0008 1B68     		ldr	r3, [r3]
 4322 000a 002B     		cmp	r3, #0
 4323 000c 02D1     		bne	.L281
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 4324              		.loc 1 3684 0
 4325 000e 0123     		movs	r3, #1
 4326 0010 7B60     		str	r3, [r7, #4]
 4327 0012 08E0     		b	.L282
 4328              	.L281:
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4329              		.loc 1 3688 0
 4330 0014 084B     		ldr	r3, .L285+4
 4331 0016 1B68     		ldr	r3, [r3]
 4332 0018 002B     		cmp	r3, #0
 4333 001a 02D1     		bne	.L283
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 4334              		.loc 1 3690 0
 4335 001c 0223     		movs	r3, #2
 4336 001e 7B60     		str	r3, [r7, #4]
 4337 0020 01E0     		b	.L282
 4338              	.L283:
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 4339              		.loc 1 3694 0
 4340 0022 0023     		movs	r3, #0
 4341 0024 7B60     		str	r3, [r7, #4]
ARM GAS  /tmp/cc6ZjiVz.s 			page 146


 4342              	.L282:
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4343              		.loc 1 3698 0
 4344 0026 7B68     		ldr	r3, [r7, #4]
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4345              		.loc 1 3699 0
 4346 0028 1846     		mov	r0, r3
 4347 002a 0C37     		adds	r7, r7, #12
 4348              	.LCFI180:
 4349              		.cfi_def_cfa_offset 4
 4350 002c BD46     		mov	sp, r7
 4351              	.LCFI181:
 4352              		.cfi_def_cfa_register 13
 4353              		@ sp needed
 4354 002e 5DF8047B 		ldr	r7, [sp], #4
 4355              	.LCFI182:
 4356              		.cfi_restore 7
 4357              		.cfi_def_cfa_offset 0
 4358 0032 7047     		bx	lr
 4359              	.L286:
 4360              		.align	2
 4361              	.L285:
 4362 0034 00000000 		.word	xSchedulerRunning
 4363 0038 00000000 		.word	uxSchedulerSuspended
 4364              		.cfi_endproc
 4365              	.LFE40:
 4367              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 4368              		.align	1
 4369              		.global	vTaskPriorityInherit
 4370              		.syntax unified
 4371              		.thumb
 4372              		.thumb_func
 4373              		.fpu fpv4-sp-d16
 4375              	vTaskPriorityInherit:
 4376              	.LFB41:
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4377              		.loc 1 3707 0
 4378              		.cfi_startproc
 4379              		@ args = 0, pretend = 0, frame = 16
 4380              		@ frame_needed = 1, uses_anonymous_args = 0
 4381 0000 80B5     		push	{r7, lr}
 4382              	.LCFI183:
 4383              		.cfi_def_cfa_offset 8
 4384              		.cfi_offset 7, -8
 4385              		.cfi_offset 14, -4
 4386 0002 84B0     		sub	sp, sp, #16
 4387              	.LCFI184:
ARM GAS  /tmp/cc6ZjiVz.s 			page 147


 4388              		.cfi_def_cfa_offset 24
 4389 0004 00AF     		add	r7, sp, #0
 4390              	.LCFI185:
 4391              		.cfi_def_cfa_register 7
 4392 0006 7860     		str	r0, [r7, #4]
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4393              		.loc 1 3708 0
 4394 0008 7B68     		ldr	r3, [r7, #4]
 4395 000a FB60     		str	r3, [r7, #12]
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4396              		.loc 1 3712 0
 4397 000c 7B68     		ldr	r3, [r7, #4]
 4398 000e 002B     		cmp	r3, #0
 4399 0010 62D0     		beq	.L296
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 4400              		.loc 1 3717 0
 4401 0012 FB68     		ldr	r3, [r7, #12]
 4402 0014 DA6A     		ldr	r2, [r3, #44]
 4403 0016 324B     		ldr	r3, .L297
 4404 0018 1B68     		ldr	r3, [r3]
 4405 001a DB6A     		ldr	r3, [r3, #44]
 4406 001c 9A42     		cmp	r2, r3
 4407 001e 5BD2     		bcs	.L296
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	being used for anything else. */
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 4408              		.loc 1 3722 0
 4409 0020 FB68     		ldr	r3, [r7, #12]
 4410 0022 9B69     		ldr	r3, [r3, #24]
 4411 0024 002B     		cmp	r3, #0
 4412 0026 06DB     		blt	.L289
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 4413              		.loc 1 3724 0
 4414 0028 2D4B     		ldr	r3, .L297
 4415 002a 1B68     		ldr	r3, [r3]
 4416 002c DB6A     		ldr	r3, [r3, #44]
 4417 002e C3F10702 		rsb	r2, r3, #7
 4418 0032 FB68     		ldr	r3, [r7, #12]
 4419 0034 9A61     		str	r2, [r3, #24]
 4420              	.L289:
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
ARM GAS  /tmp/cc6ZjiVz.s 			page 148


3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
 4421              		.loc 1 3733 0
 4422 0036 FB68     		ldr	r3, [r7, #12]
 4423 0038 5969     		ldr	r1, [r3, #20]
 4424 003a FB68     		ldr	r3, [r7, #12]
 4425 003c DA6A     		ldr	r2, [r3, #44]
 4426 003e 1346     		mov	r3, r2
 4427 0040 9B00     		lsls	r3, r3, #2
 4428 0042 1344     		add	r3, r3, r2
 4429 0044 9B00     		lsls	r3, r3, #2
 4430 0046 274A     		ldr	r2, .L297+4
 4431 0048 1344     		add	r3, r3, r2
 4432 004a 9942     		cmp	r1, r3
 4433 004c 01D1     		bne	.L290
 4434              		.loc 1 3733 0 is_stmt 0 discriminator 1
 4435 004e 0123     		movs	r3, #1
 4436 0050 00E0     		b	.L291
 4437              	.L290:
 4438              		.loc 1 3733 0 discriminator 2
 4439 0052 0023     		movs	r3, #0
 4440              	.L291:
 4441              		.loc 1 3733 0 discriminator 4
 4442 0054 002B     		cmp	r3, #0
 4443 0056 3AD0     		beq	.L292
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 4444              		.loc 1 3735 0 is_stmt 1
 4445 0058 FB68     		ldr	r3, [r7, #12]
 4446 005a 0433     		adds	r3, r3, #4
 4447 005c 1846     		mov	r0, r3
 4448 005e FFF7FEFF 		bl	uxListRemove
 4449 0062 0346     		mov	r3, r0
 4450 0064 002B     		cmp	r3, #0
 4451 0066 15D1     		bne	.L293
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4452              		.loc 1 3737 0
 4453 0068 FB68     		ldr	r3, [r7, #12]
 4454 006a DA6A     		ldr	r2, [r3, #44]
 4455 006c 1D49     		ldr	r1, .L297+4
 4456 006e 1346     		mov	r3, r2
 4457 0070 9B00     		lsls	r3, r3, #2
 4458 0072 1344     		add	r3, r3, r2
 4459 0074 9B00     		lsls	r3, r3, #2
 4460 0076 0B44     		add	r3, r3, r1
 4461 0078 1B68     		ldr	r3, [r3]
 4462 007a 002B     		cmp	r3, #0
 4463 007c 0AD1     		bne	.L293
 4464              		.loc 1 3737 0 is_stmt 0 discriminator 1
 4465 007e FB68     		ldr	r3, [r7, #12]
 4466 0080 DB6A     		ldr	r3, [r3, #44]
 4467 0082 0122     		movs	r2, #1
 4468 0084 02FA03F3 		lsl	r3, r2, r3
 4469 0088 DA43     		mvns	r2, r3
 4470 008a 174B     		ldr	r3, .L297+8
 4471 008c 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc6ZjiVz.s 			page 149


 4472 008e 1340     		ands	r3, r3, r2
 4473 0090 154A     		ldr	r2, .L297+8
 4474 0092 1360     		str	r3, [r2]
 4475              	.L293:
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 4476              		.loc 1 3745 0 is_stmt 1
 4477 0094 124B     		ldr	r3, .L297
 4478 0096 1B68     		ldr	r3, [r3]
 4479 0098 DA6A     		ldr	r2, [r3, #44]
 4480 009a FB68     		ldr	r3, [r7, #12]
 4481 009c DA62     		str	r2, [r3, #44]
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4482              		.loc 1 3746 0
 4483 009e FB68     		ldr	r3, [r7, #12]
 4484 00a0 DB6A     		ldr	r3, [r3, #44]
 4485 00a2 0122     		movs	r2, #1
 4486 00a4 9A40     		lsls	r2, r2, r3
 4487 00a6 104B     		ldr	r3, .L297+8
 4488 00a8 1B68     		ldr	r3, [r3]
 4489 00aa 1343     		orrs	r3, r3, r2
 4490 00ac 0E4A     		ldr	r2, .L297+8
 4491 00ae 1360     		str	r3, [r2]
 4492 00b0 FB68     		ldr	r3, [r7, #12]
 4493 00b2 DA6A     		ldr	r2, [r3, #44]
 4494 00b4 1346     		mov	r3, r2
 4495 00b6 9B00     		lsls	r3, r3, #2
 4496 00b8 1344     		add	r3, r3, r2
 4497 00ba 9B00     		lsls	r3, r3, #2
 4498 00bc 094A     		ldr	r2, .L297+4
 4499 00be 1A44     		add	r2, r2, r3
 4500 00c0 FB68     		ldr	r3, [r7, #12]
 4501 00c2 0433     		adds	r3, r3, #4
 4502 00c4 1946     		mov	r1, r3
 4503 00c6 1046     		mov	r0, r2
 4504 00c8 FFF7FEFF 		bl	vListInsertEnd
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  /tmp/cc6ZjiVz.s 			page 150


3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4505              		.loc 1 3765 0
 4506 00cc 04E0     		b	.L296
 4507              	.L292:
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4508              		.loc 1 3751 0
 4509 00ce 044B     		ldr	r3, .L297
 4510 00d0 1B68     		ldr	r3, [r3]
 4511 00d2 DA6A     		ldr	r2, [r3, #44]
 4512 00d4 FB68     		ldr	r3, [r7, #12]
 4513 00d6 DA62     		str	r2, [r3, #44]
 4514              	.L296:
 4515              		.loc 1 3765 0
 4516 00d8 00BF     		nop
 4517 00da 1037     		adds	r7, r7, #16
 4518              	.LCFI186:
 4519              		.cfi_def_cfa_offset 8
 4520 00dc BD46     		mov	sp, r7
 4521              	.LCFI187:
 4522              		.cfi_def_cfa_register 13
 4523              		@ sp needed
 4524 00de 80BD     		pop	{r7, pc}
 4525              	.L298:
 4526              		.align	2
 4527              	.L297:
 4528 00e0 00000000 		.word	pxCurrentTCB
 4529 00e4 00000000 		.word	pxReadyTasksLists
 4530 00e8 00000000 		.word	uxTopReadyPriority
 4531              		.cfi_endproc
 4532              	.LFE41:
 4534              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4535              		.align	1
 4536              		.global	xTaskPriorityDisinherit
 4537              		.syntax unified
 4538              		.thumb
 4539              		.thumb_func
 4540              		.fpu fpv4-sp-d16
 4542              	xTaskPriorityDisinherit:
 4543              	.LFB42:
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4544              		.loc 1 3773 0
 4545              		.cfi_startproc
 4546              		@ args = 0, pretend = 0, frame = 24
 4547              		@ frame_needed = 1, uses_anonymous_args = 0
 4548 0000 80B5     		push	{r7, lr}
 4549              	.LCFI188:
 4550              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc6ZjiVz.s 			page 151


 4551              		.cfi_offset 7, -8
 4552              		.cfi_offset 14, -4
 4553 0002 86B0     		sub	sp, sp, #24
 4554              	.LCFI189:
 4555              		.cfi_def_cfa_offset 32
 4556 0004 00AF     		add	r7, sp, #0
 4557              	.LCFI190:
 4558              		.cfi_def_cfa_register 7
 4559 0006 7860     		str	r0, [r7, #4]
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4560              		.loc 1 3774 0
 4561 0008 7B68     		ldr	r3, [r7, #4]
 4562 000a 3B61     		str	r3, [r7, #16]
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 4563              		.loc 1 3775 0
 4564 000c 0023     		movs	r3, #0
 4565 000e 7B61     		str	r3, [r7, #20]
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4566              		.loc 1 3777 0
 4567 0010 7B68     		ldr	r3, [r7, #4]
 4568 0012 002B     		cmp	r3, #0
 4569 0014 6CD0     		beq	.L300
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 4570              		.loc 1 3783 0
 4571 0016 394B     		ldr	r3, .L308
 4572 0018 1B68     		ldr	r3, [r3]
 4573 001a 3A69     		ldr	r2, [r7, #16]
 4574 001c 9A42     		cmp	r2, r3
 4575 001e 09D0     		beq	.L301
 4576              	.LBB157:
 4577              	.LBB158:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4578              		.loc 2 237 0 discriminator 1
 4579              		.syntax unified
 4580              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4581 0020 4FF05003 			mov r3, #80												
 4582 0024 83F31188 		msr basepri, r3											
 4583 0028 BFF36F8F 		isb														
 4584 002c BFF34F8F 		dsb														
 4585              	
 4586              	@ 0 "" 2
 4587              		.thumb
 4588              		.syntax unified
 4589 0030 FB60     		str	r3, [r7, #12]
 4590              	.L302:
 4591              	.LBE158:
 4592              	.LBE157:
 4593              		.loc 1 3783 0 discriminator 1
 4594 0032 FEE7     		b	.L302
 4595              	.L301:
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc6ZjiVz.s 			page 152


3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4596              		.loc 1 3785 0
 4597 0034 3B69     		ldr	r3, [r7, #16]
 4598 0036 9B6C     		ldr	r3, [r3, #72]
 4599 0038 002B     		cmp	r3, #0
 4600 003a 09D1     		bne	.L303
 4601              	.LBB159:
 4602              	.LBB160:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4603              		.loc 2 237 0 discriminator 1
 4604              		.syntax unified
 4605              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4606 003c 4FF05003 			mov r3, #80												
 4607 0040 83F31188 		msr basepri, r3											
 4608 0044 BFF36F8F 		isb														
 4609 0048 BFF34F8F 		dsb														
 4610              	
 4611              	@ 0 "" 2
 4612              		.thumb
 4613              		.syntax unified
 4614 004c BB60     		str	r3, [r7, #8]
 4615              	.L304:
 4616              	.LBE160:
 4617              	.LBE159:
 4618              		.loc 1 3785 0 discriminator 2
 4619 004e FEE7     		b	.L304
 4620              	.L303:
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4621              		.loc 1 3786 0
 4622 0050 3B69     		ldr	r3, [r7, #16]
 4623 0052 9B6C     		ldr	r3, [r3, #72]
 4624 0054 5A1E     		subs	r2, r3, #1
 4625 0056 3B69     		ldr	r3, [r7, #16]
 4626 0058 9A64     		str	r2, [r3, #72]
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 4627              		.loc 1 3790 0
 4628 005a 3B69     		ldr	r3, [r7, #16]
 4629 005c DA6A     		ldr	r2, [r3, #44]
 4630 005e 3B69     		ldr	r3, [r7, #16]
 4631 0060 5B6C     		ldr	r3, [r3, #68]
 4632 0062 9A42     		cmp	r2, r3
 4633 0064 44D0     		beq	.L300
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 4634              		.loc 1 3793 0
 4635 0066 3B69     		ldr	r3, [r7, #16]
 4636 0068 9B6C     		ldr	r3, [r3, #72]
 4637 006a 002B     		cmp	r3, #0
 4638 006c 40D1     		bne	.L300
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
ARM GAS  /tmp/cc6ZjiVz.s 			page 153


3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the	holding task from the ready	list. */
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 4639              		.loc 1 3800 0
 4640 006e 3B69     		ldr	r3, [r7, #16]
 4641 0070 0433     		adds	r3, r3, #4
 4642 0072 1846     		mov	r0, r3
 4643 0074 FFF7FEFF 		bl	uxListRemove
 4644 0078 0346     		mov	r3, r0
 4645 007a 002B     		cmp	r3, #0
 4646 007c 15D1     		bne	.L305
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4647              		.loc 1 3802 0
 4648 007e 3B69     		ldr	r3, [r7, #16]
 4649 0080 DA6A     		ldr	r2, [r3, #44]
 4650 0082 1F49     		ldr	r1, .L308+4
 4651 0084 1346     		mov	r3, r2
 4652 0086 9B00     		lsls	r3, r3, #2
 4653 0088 1344     		add	r3, r3, r2
 4654 008a 9B00     		lsls	r3, r3, #2
 4655 008c 0B44     		add	r3, r3, r1
 4656 008e 1B68     		ldr	r3, [r3]
 4657 0090 002B     		cmp	r3, #0
 4658 0092 0AD1     		bne	.L305
 4659              		.loc 1 3802 0 is_stmt 0 discriminator 1
 4660 0094 3B69     		ldr	r3, [r7, #16]
 4661 0096 DB6A     		ldr	r3, [r3, #44]
 4662 0098 0122     		movs	r2, #1
 4663 009a 02FA03F3 		lsl	r3, r2, r3
 4664 009e DA43     		mvns	r2, r3
 4665 00a0 184B     		ldr	r3, .L308+8
 4666 00a2 1B68     		ldr	r3, [r3]
 4667 00a4 1340     		ands	r3, r3, r2
 4668 00a6 174A     		ldr	r2, .L308+8
 4669 00a8 1360     		str	r3, [r2]
 4670              	.L305:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 4671              		.loc 1 3812 0 is_stmt 1
 4672 00aa 3B69     		ldr	r3, [r7, #16]
 4673 00ac 5A6C     		ldr	r2, [r3, #68]
 4674 00ae 3B69     		ldr	r3, [r7, #16]
 4675 00b0 DA62     		str	r2, [r3, #44]
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
ARM GAS  /tmp/cc6ZjiVz.s 			page 154


 4676              		.loc 1 3817 0
 4677 00b2 3B69     		ldr	r3, [r7, #16]
 4678 00b4 DB6A     		ldr	r3, [r3, #44]
 4679 00b6 C3F10702 		rsb	r2, r3, #7
 4680 00ba 3B69     		ldr	r3, [r7, #16]
 4681 00bc 9A61     		str	r2, [r3, #24]
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4682              		.loc 1 3818 0
 4683 00be 3B69     		ldr	r3, [r7, #16]
 4684 00c0 DB6A     		ldr	r3, [r3, #44]
 4685 00c2 0122     		movs	r2, #1
 4686 00c4 9A40     		lsls	r2, r2, r3
 4687 00c6 0F4B     		ldr	r3, .L308+8
 4688 00c8 1B68     		ldr	r3, [r3]
 4689 00ca 1343     		orrs	r3, r3, r2
 4690 00cc 0D4A     		ldr	r2, .L308+8
 4691 00ce 1360     		str	r3, [r2]
 4692 00d0 3B69     		ldr	r3, [r7, #16]
 4693 00d2 DA6A     		ldr	r2, [r3, #44]
 4694 00d4 1346     		mov	r3, r2
 4695 00d6 9B00     		lsls	r3, r3, #2
 4696 00d8 1344     		add	r3, r3, r2
 4697 00da 9B00     		lsls	r3, r3, #2
 4698 00dc 084A     		ldr	r2, .L308+4
 4699 00de 1A44     		add	r2, r2, r3
 4700 00e0 3B69     		ldr	r3, [r7, #16]
 4701 00e2 0433     		adds	r3, r3, #4
 4702 00e4 1946     		mov	r1, r3
 4703 00e6 1046     		mov	r0, r2
 4704 00e8 FFF7FEFF 		bl	vListInsertEnd
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 4705              		.loc 1 3828 0
 4706 00ec 0123     		movs	r3, #1
 4707 00ee 7B61     		str	r3, [r7, #20]
 4708              	.L300:
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cc6ZjiVz.s 			page 155


3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4709              		.loc 1 3845 0
 4710 00f0 7B69     		ldr	r3, [r7, #20]
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4711              		.loc 1 3846 0
 4712 00f2 1846     		mov	r0, r3
 4713 00f4 1837     		adds	r7, r7, #24
 4714              	.LCFI191:
 4715              		.cfi_def_cfa_offset 8
 4716 00f6 BD46     		mov	sp, r7
 4717              	.LCFI192:
 4718              		.cfi_def_cfa_register 13
 4719              		@ sp needed
 4720 00f8 80BD     		pop	{r7, pc}
 4721              	.L309:
 4722 00fa 00BF     		.align	2
 4723              	.L308:
 4724 00fc 00000000 		.word	pxCurrentTCB
 4725 0100 00000000 		.word	pxReadyTasksLists
 4726 0104 00000000 		.word	uxTopReadyPriority
 4727              		.cfi_endproc
 4728              	.LFE42:
 4730              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4731              		.align	1
 4732              		.global	uxTaskResetEventItemValue
 4733              		.syntax unified
 4734              		.thumb
 4735              		.thumb_func
 4736              		.fpu fpv4-sp-d16
 4738              	uxTaskResetEventItemValue:
 4739              	.LFB43:
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
ARM GAS  /tmp/cc6ZjiVz.s 			page 156


3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cc6ZjiVz.s 			page 157


3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
ARM GAS  /tmp/cc6ZjiVz.s 			page 158


3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
ARM GAS  /tmp/cc6ZjiVz.s 			page 159


4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
ARM GAS  /tmp/cc6ZjiVz.s 			page 160


4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cc6ZjiVz.s 			page 161


4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4740              		.loc 1 4163 0
 4741              		.cfi_startproc
 4742              		@ args = 0, pretend = 0, frame = 8
 4743              		@ frame_needed = 1, uses_anonymous_args = 0
 4744              		@ link register save eliminated.
 4745 0000 80B4     		push	{r7}
 4746              	.LCFI193:
 4747              		.cfi_def_cfa_offset 4
 4748              		.cfi_offset 7, -4
 4749 0002 83B0     		sub	sp, sp, #12
 4750              	.LCFI194:
 4751              		.cfi_def_cfa_offset 16
 4752 0004 00AF     		add	r7, sp, #0
 4753              	.LCFI195:
 4754              		.cfi_def_cfa_register 7
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 4755              		.loc 1 4166 0
 4756 0006 094B     		ldr	r3, .L312
 4757 0008 1B68     		ldr	r3, [r3]
 4758 000a 9B69     		ldr	r3, [r3, #24]
 4759 000c 7B60     		str	r3, [r7, #4]
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 4760              		.loc 1 4170 0
 4761 000e 074B     		ldr	r3, .L312
 4762 0010 1B68     		ldr	r3, [r3]
 4763 0012 064A     		ldr	r2, .L312
 4764 0014 1268     		ldr	r2, [r2]
 4765 0016 D26A     		ldr	r2, [r2, #44]
 4766 0018 C2F10702 		rsb	r2, r2, #7
 4767 001c 9A61     		str	r2, [r3, #24]
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 4768              		.loc 1 4172 0
 4769 001e 7B68     		ldr	r3, [r7, #4]
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4770              		.loc 1 4173 0
 4771 0020 1846     		mov	r0, r3
 4772 0022 0C37     		adds	r7, r7, #12
 4773              	.LCFI196:
 4774              		.cfi_def_cfa_offset 4
 4775 0024 BD46     		mov	sp, r7
 4776              	.LCFI197:
 4777              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cc6ZjiVz.s 			page 162


 4778              		@ sp needed
 4779 0026 5DF8047B 		ldr	r7, [sp], #4
 4780              	.LCFI198:
 4781              		.cfi_restore 7
 4782              		.cfi_def_cfa_offset 0
 4783 002a 7047     		bx	lr
 4784              	.L313:
 4785              		.align	2
 4786              	.L312:
 4787 002c 00000000 		.word	pxCurrentTCB
 4788              		.cfi_endproc
 4789              	.LFE43:
 4791              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4792              		.align	1
 4793              		.global	pvTaskIncrementMutexHeldCount
 4794              		.syntax unified
 4795              		.thumb
 4796              		.thumb_func
 4797              		.fpu fpv4-sp-d16
 4799              	pvTaskIncrementMutexHeldCount:
 4800              	.LFB44:
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4801              		.loc 1 4179 0
 4802              		.cfi_startproc
 4803              		@ args = 0, pretend = 0, frame = 0
 4804              		@ frame_needed = 1, uses_anonymous_args = 0
 4805              		@ link register save eliminated.
 4806 0000 80B4     		push	{r7}
 4807              	.LCFI199:
 4808              		.cfi_def_cfa_offset 4
 4809              		.cfi_offset 7, -4
 4810 0002 00AF     		add	r7, sp, #0
 4811              	.LCFI200:
 4812              		.cfi_def_cfa_register 7
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 4813              		.loc 1 4182 0
 4814 0004 074B     		ldr	r3, .L317
 4815 0006 1B68     		ldr	r3, [r3]
 4816 0008 002B     		cmp	r3, #0
 4817 000a 04D0     		beq	.L315
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 4818              		.loc 1 4184 0
 4819 000c 054B     		ldr	r3, .L317
 4820 000e 1B68     		ldr	r3, [r3]
 4821 0010 9A6C     		ldr	r2, [r3, #72]
 4822 0012 0132     		adds	r2, r2, #1
 4823 0014 9A64     		str	r2, [r3, #72]
 4824              	.L315:
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cc6ZjiVz.s 			page 163


4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 4825              		.loc 1 4187 0
 4826 0016 034B     		ldr	r3, .L317
 4827 0018 1B68     		ldr	r3, [r3]
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4828              		.loc 1 4188 0
 4829 001a 1846     		mov	r0, r3
 4830 001c BD46     		mov	sp, r7
 4831              	.LCFI201:
 4832              		.cfi_def_cfa_register 13
 4833              		@ sp needed
 4834 001e 5DF8047B 		ldr	r7, [sp], #4
 4835              	.LCFI202:
 4836              		.cfi_restore 7
 4837              		.cfi_def_cfa_offset 0
 4838 0022 7047     		bx	lr
 4839              	.L318:
 4840              		.align	2
 4841              	.L317:
 4842 0024 00000000 		.word	pxCurrentTCB
 4843              		.cfi_endproc
 4844              	.LFE44:
 4846              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4847              		.align	1
 4848              		.global	ulTaskNotifyTake
 4849              		.syntax unified
 4850              		.thumb
 4851              		.thumb_func
 4852              		.fpu fpv4-sp-d16
 4854              	ulTaskNotifyTake:
 4855              	.LFB45:
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4856              		.loc 1 4196 0
 4857              		.cfi_startproc
 4858              		@ args = 0, pretend = 0, frame = 16
 4859              		@ frame_needed = 1, uses_anonymous_args = 0
 4860 0000 80B5     		push	{r7, lr}
 4861              	.LCFI203:
 4862              		.cfi_def_cfa_offset 8
 4863              		.cfi_offset 7, -8
 4864              		.cfi_offset 14, -4
 4865 0002 84B0     		sub	sp, sp, #16
 4866              	.LCFI204:
 4867              		.cfi_def_cfa_offset 24
 4868 0004 00AF     		add	r7, sp, #0
 4869              	.LCFI205:
 4870              		.cfi_def_cfa_register 7
 4871 0006 7860     		str	r0, [r7, #4]
 4872 0008 3960     		str	r1, [r7]
ARM GAS  /tmp/cc6ZjiVz.s 			page 164


4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 4873              		.loc 1 4199 0
 4874 000a FFF7FEFF 		bl	vPortEnterCritical
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 4875              		.loc 1 4202 0
 4876 000e 1E4B     		ldr	r3, .L325
 4877 0010 1B68     		ldr	r3, [r3]
 4878 0012 DB6C     		ldr	r3, [r3, #76]
 4879 0014 002B     		cmp	r3, #0
 4880 0016 13D1     		bne	.L320
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 4881              		.loc 1 4205 0
 4882 0018 1B4B     		ldr	r3, .L325
 4883 001a 1B68     		ldr	r3, [r3]
 4884 001c 0122     		movs	r2, #1
 4885 001e 83F85020 		strb	r2, [r3, #80]
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 4886              		.loc 1 4207 0
 4887 0022 3B68     		ldr	r3, [r7]
 4888 0024 002B     		cmp	r3, #0
 4889 0026 0BD0     		beq	.L320
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4890              		.loc 1 4209 0
 4891 0028 0121     		movs	r1, #1
 4892 002a 3868     		ldr	r0, [r7]
 4893 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 4894              		.loc 1 4216 0
 4895 0030 164B     		ldr	r3, .L325+4
 4896 0032 4FF08052 		mov	r2, #268435456
 4897 0036 1A60     		str	r2, [r3]
 4898              		.syntax unified
 4899              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4900 0038 BFF34F8F 		dsb
 4901              	@ 0 "" 2
 4902              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4903 003c BFF36F8F 		isb
 4904              	@ 0 "" 2
 4905              		.thumb
 4906              		.syntax unified
 4907              	.L320:
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  /tmp/cc6ZjiVz.s 			page 165


4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 4908              		.loc 1 4228 0
 4909 0040 FFF7FEFF 		bl	vPortExitCritical
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 4910              		.loc 1 4230 0
 4911 0044 FFF7FEFF 		bl	vPortEnterCritical
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 4912              		.loc 1 4233 0
 4913 0048 0F4B     		ldr	r3, .L325
 4914 004a 1B68     		ldr	r3, [r3]
 4915 004c DB6C     		ldr	r3, [r3, #76]
 4916 004e FB60     		str	r3, [r7, #12]
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 4917              		.loc 1 4235 0
 4918 0050 FB68     		ldr	r3, [r7, #12]
 4919 0052 002B     		cmp	r3, #0
 4920 0054 0CD0     		beq	.L321
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 4921              		.loc 1 4237 0
 4922 0056 7B68     		ldr	r3, [r7, #4]
 4923 0058 002B     		cmp	r3, #0
 4924 005a 04D0     		beq	.L322
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 4925              		.loc 1 4239 0
 4926 005c 0A4B     		ldr	r3, .L325
 4927 005e 1B68     		ldr	r3, [r3]
 4928 0060 0022     		movs	r2, #0
 4929 0062 DA64     		str	r2, [r3, #76]
 4930 0064 04E0     		b	.L321
 4931              	.L322:
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
 4932              		.loc 1 4243 0
 4933 0066 084B     		ldr	r3, .L325
 4934 0068 1B68     		ldr	r3, [r3]
 4935 006a FA68     		ldr	r2, [r7, #12]
 4936 006c 013A     		subs	r2, r2, #1
 4937 006e DA64     		str	r2, [r3, #76]
 4938              	.L321:
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cc6ZjiVz.s 			page 166


4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 4939              		.loc 1 4251 0
 4940 0070 054B     		ldr	r3, .L325
 4941 0072 1B68     		ldr	r3, [r3]
 4942 0074 0022     		movs	r2, #0
 4943 0076 83F85020 		strb	r2, [r3, #80]
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 4944              		.loc 1 4253 0
 4945 007a FFF7FEFF 		bl	vPortExitCritical
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 4946              		.loc 1 4255 0
 4947 007e FB68     		ldr	r3, [r7, #12]
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4948              		.loc 1 4256 0
 4949 0080 1846     		mov	r0, r3
 4950 0082 1037     		adds	r7, r7, #16
 4951              	.LCFI206:
 4952              		.cfi_def_cfa_offset 8
 4953 0084 BD46     		mov	sp, r7
 4954              	.LCFI207:
 4955              		.cfi_def_cfa_register 13
 4956              		@ sp needed
 4957 0086 80BD     		pop	{r7, pc}
 4958              	.L326:
 4959              		.align	2
 4960              	.L325:
 4961 0088 00000000 		.word	pxCurrentTCB
 4962 008c 04ED00E0 		.word	-536810236
 4963              		.cfi_endproc
 4964              	.LFE45:
 4966              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4967              		.align	1
 4968              		.global	xTaskNotifyWait
 4969              		.syntax unified
 4970              		.thumb
 4971              		.thumb_func
 4972              		.fpu fpv4-sp-d16
 4974              	xTaskNotifyWait:
 4975              	.LFB46:
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4976              		.loc 1 4264 0
 4977              		.cfi_startproc
ARM GAS  /tmp/cc6ZjiVz.s 			page 167


 4978              		@ args = 0, pretend = 0, frame = 24
 4979              		@ frame_needed = 1, uses_anonymous_args = 0
 4980 0000 80B5     		push	{r7, lr}
 4981              	.LCFI208:
 4982              		.cfi_def_cfa_offset 8
 4983              		.cfi_offset 7, -8
 4984              		.cfi_offset 14, -4
 4985 0002 86B0     		sub	sp, sp, #24
 4986              	.LCFI209:
 4987              		.cfi_def_cfa_offset 32
 4988 0004 00AF     		add	r7, sp, #0
 4989              	.LCFI210:
 4990              		.cfi_def_cfa_register 7
 4991 0006 F860     		str	r0, [r7, #12]
 4992 0008 B960     		str	r1, [r7, #8]
 4993 000a 7A60     		str	r2, [r7, #4]
 4994 000c 3B60     		str	r3, [r7]
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 4995              		.loc 1 4267 0
 4996 000e FFF7FEFF 		bl	vPortEnterCritical
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 4997              		.loc 1 4270 0
 4998 0012 264B     		ldr	r3, .L333
 4999 0014 1B68     		ldr	r3, [r3]
 5000 0016 93F85030 		ldrb	r3, [r3, #80]
 5001 001a DBB2     		uxtb	r3, r3
 5002 001c 022B     		cmp	r3, #2
 5003 001e 1AD0     		beq	.L328
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 5004              		.loc 1 4275 0
 5005 0020 224B     		ldr	r3, .L333
 5006 0022 1B68     		ldr	r3, [r3]
 5007 0024 D96C     		ldr	r1, [r3, #76]
 5008 0026 FA68     		ldr	r2, [r7, #12]
 5009 0028 D243     		mvns	r2, r2
 5010 002a 0A40     		ands	r2, r2, r1
 5011 002c DA64     		str	r2, [r3, #76]
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 5012              		.loc 1 4278 0
 5013 002e 1F4B     		ldr	r3, .L333
 5014 0030 1B68     		ldr	r3, [r3]
 5015 0032 0122     		movs	r2, #1
 5016 0034 83F85020 		strb	r2, [r3, #80]
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5017              		.loc 1 4280 0
 5018 0038 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/cc6ZjiVz.s 			page 168


 5019 003a 002B     		cmp	r3, #0
 5020 003c 0BD0     		beq	.L328
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 5021              		.loc 1 4282 0
 5022 003e 0121     		movs	r1, #1
 5023 0040 3868     		ldr	r0, [r7]
 5024 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 5025              		.loc 1 4289 0
 5026 0046 1A4B     		ldr	r3, .L333+4
 5027 0048 4FF08052 		mov	r2, #268435456
 5028 004c 1A60     		str	r2, [r3]
 5029              		.syntax unified
 5030              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5031 004e BFF34F8F 		dsb
 5032              	@ 0 "" 2
 5033              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5034 0052 BFF36F8F 		isb
 5035              	@ 0 "" 2
 5036              		.thumb
 5037              		.syntax unified
 5038              	.L328:
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5039              		.loc 1 4301 0
 5040 0056 FFF7FEFF 		bl	vPortExitCritical
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5041              		.loc 1 4303 0
 5042 005a FFF7FEFF 		bl	vPortEnterCritical
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 5043              		.loc 1 4307 0
 5044 005e 7B68     		ldr	r3, [r7, #4]
 5045 0060 002B     		cmp	r3, #0
 5046 0062 04D0     		beq	.L329
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
ARM GAS  /tmp/cc6ZjiVz.s 			page 169


4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 5047              		.loc 1 4311 0
 5048 0064 114B     		ldr	r3, .L333
 5049 0066 1B68     		ldr	r3, [r3]
 5050 0068 DA6C     		ldr	r2, [r3, #76]
 5051 006a 7B68     		ldr	r3, [r7, #4]
 5052 006c 1A60     		str	r2, [r3]
 5053              	.L329:
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 5054              		.loc 1 4318 0
 5055 006e 0F4B     		ldr	r3, .L333
 5056 0070 1B68     		ldr	r3, [r3]
 5057 0072 93F85030 		ldrb	r3, [r3, #80]
 5058 0076 DBB2     		uxtb	r3, r3
 5059 0078 012B     		cmp	r3, #1
 5060 007a 02D1     		bne	.L330
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 5061              		.loc 1 4321 0
 5062 007c 0023     		movs	r3, #0
 5063 007e 7B61     		str	r3, [r7, #20]
 5064 0080 08E0     		b	.L331
 5065              	.L330:
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 5066              		.loc 1 4327 0
 5067 0082 0A4B     		ldr	r3, .L333
 5068 0084 1B68     		ldr	r3, [r3]
 5069 0086 D96C     		ldr	r1, [r3, #76]
 5070 0088 BA68     		ldr	r2, [r7, #8]
 5071 008a D243     		mvns	r2, r2
 5072 008c 0A40     		ands	r2, r2, r1
 5073 008e DA64     		str	r2, [r3, #76]
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5074              		.loc 1 4328 0
 5075 0090 0123     		movs	r3, #1
 5076 0092 7B61     		str	r3, [r7, #20]
 5077              	.L331:
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5078              		.loc 1 4331 0
 5079 0094 054B     		ldr	r3, .L333
 5080 0096 1B68     		ldr	r3, [r3]
 5081 0098 0022     		movs	r2, #0
ARM GAS  /tmp/cc6ZjiVz.s 			page 170


 5082 009a 83F85020 		strb	r2, [r3, #80]
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5083              		.loc 1 4333 0
 5084 009e FFF7FEFF 		bl	vPortExitCritical
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5085              		.loc 1 4335 0
 5086 00a2 7B69     		ldr	r3, [r7, #20]
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5087              		.loc 1 4336 0
 5088 00a4 1846     		mov	r0, r3
 5089 00a6 1837     		adds	r7, r7, #24
 5090              	.LCFI211:
 5091              		.cfi_def_cfa_offset 8
 5092 00a8 BD46     		mov	sp, r7
 5093              	.LCFI212:
 5094              		.cfi_def_cfa_register 13
 5095              		@ sp needed
 5096 00aa 80BD     		pop	{r7, pc}
 5097              	.L334:
 5098              		.align	2
 5099              	.L333:
 5100 00ac 00000000 		.word	pxCurrentTCB
 5101 00b0 04ED00E0 		.word	-536810236
 5102              		.cfi_endproc
 5103              	.LFE46:
 5105              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5106              		.align	1
 5107              		.global	xTaskGenericNotify
 5108              		.syntax unified
 5109              		.thumb
 5110              		.thumb_func
 5111              		.fpu fpv4-sp-d16
 5113              	xTaskGenericNotify:
 5114              	.LFB47:
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5115              		.loc 1 4344 0
 5116              		.cfi_startproc
 5117              		@ args = 0, pretend = 0, frame = 40
 5118              		@ frame_needed = 1, uses_anonymous_args = 0
 5119 0000 80B5     		push	{r7, lr}
 5120              	.LCFI213:
 5121              		.cfi_def_cfa_offset 8
 5122              		.cfi_offset 7, -8
 5123              		.cfi_offset 14, -4
 5124 0002 8AB0     		sub	sp, sp, #40
 5125              	.LCFI214:
 5126              		.cfi_def_cfa_offset 48
 5127 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cc6ZjiVz.s 			page 171


 5128              	.LCFI215:
 5129              		.cfi_def_cfa_register 7
 5130 0006 F860     		str	r0, [r7, #12]
 5131 0008 B960     		str	r1, [r7, #8]
 5132 000a 3B60     		str	r3, [r7]
 5133 000c 1346     		mov	r3, r2
 5134 000e FB71     		strb	r3, [r7, #7]
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5135              		.loc 1 4346 0
 5136 0010 0123     		movs	r3, #1
 5137 0012 7B62     		str	r3, [r7, #36]
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5138              		.loc 1 4349 0
 5139 0014 FB68     		ldr	r3, [r7, #12]
 5140 0016 002B     		cmp	r3, #0
 5141 0018 09D1     		bne	.L336
 5142              	.LBB161:
 5143              	.LBB162:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5144              		.loc 2 237 0 discriminator 1
 5145              		.syntax unified
 5146              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5147 001a 4FF05003 			mov r3, #80												
 5148 001e 83F31188 		msr basepri, r3											
 5149 0022 BFF36F8F 		isb														
 5150 0026 BFF34F8F 		dsb														
 5151              	
 5152              	@ 0 "" 2
 5153              		.thumb
 5154              		.syntax unified
 5155 002a BB61     		str	r3, [r7, #24]
 5156              	.L337:
 5157              	.LBE162:
 5158              	.LBE161:
 5159              		.loc 1 4349 0 discriminator 1
 5160 002c FEE7     		b	.L337
 5161              	.L336:
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5162              		.loc 1 4350 0
 5163 002e FB68     		ldr	r3, [r7, #12]
 5164 0030 3B62     		str	r3, [r7, #32]
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5165              		.loc 1 4352 0
 5166 0032 FFF7FEFF 		bl	vPortEnterCritical
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 5167              		.loc 1 4354 0
 5168 0036 3B68     		ldr	r3, [r7]
 5169 0038 002B     		cmp	r3, #0
 5170 003a 03D0     		beq	.L338
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 5171              		.loc 1 4356 0
ARM GAS  /tmp/cc6ZjiVz.s 			page 172


 5172 003c 3B6A     		ldr	r3, [r7, #32]
 5173 003e DA6C     		ldr	r2, [r3, #76]
 5174 0040 3B68     		ldr	r3, [r7]
 5175 0042 1A60     		str	r2, [r3]
 5176              	.L338:
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5177              		.loc 1 4359 0
 5178 0044 3B6A     		ldr	r3, [r7, #32]
 5179 0046 93F85030 		ldrb	r3, [r3, #80]
 5180 004a FB77     		strb	r3, [r7, #31]
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5181              		.loc 1 4361 0
 5182 004c 3B6A     		ldr	r3, [r7, #32]
 5183 004e 0222     		movs	r2, #2
 5184 0050 83F85020 		strb	r2, [r3, #80]
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 5185              		.loc 1 4363 0
 5186 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5187 0056 042B     		cmp	r3, #4
 5188 0058 27D8     		bhi	.L339
 5189 005a 01A2     		adr	r2, .L341
 5190 005c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5191              		.p2align 2
 5192              	.L341:
 5193 0060 AB000000 		.word	.L339+1
 5194 0064 75000000 		.word	.L342+1
 5195 0068 83000000 		.word	.L343+1
 5196 006c 8F000000 		.word	.L344+1
 5197 0070 97000000 		.word	.L345+1
 5198              		.p2align 1
 5199              	.L342:
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 5200              		.loc 1 4366 0
 5201 0074 3B6A     		ldr	r3, [r7, #32]
 5202 0076 DA6C     		ldr	r2, [r3, #76]
 5203 0078 BB68     		ldr	r3, [r7, #8]
 5204 007a 1A43     		orrs	r2, r2, r3
 5205 007c 3B6A     		ldr	r3, [r7, #32]
 5206 007e DA64     		str	r2, [r3, #76]
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5207              		.loc 1 4367 0
 5208 0080 13E0     		b	.L339
 5209              	.L343:
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 5210              		.loc 1 4370 0
 5211 0082 3B6A     		ldr	r3, [r7, #32]
 5212 0084 DB6C     		ldr	r3, [r3, #76]
 5213 0086 5A1C     		adds	r2, r3, #1
 5214 0088 3B6A     		ldr	r3, [r7, #32]
ARM GAS  /tmp/cc6ZjiVz.s 			page 173


 5215 008a DA64     		str	r2, [r3, #76]
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5216              		.loc 1 4371 0
 5217 008c 0DE0     		b	.L339
 5218              	.L344:
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 5219              		.loc 1 4374 0
 5220 008e 3B6A     		ldr	r3, [r7, #32]
 5221 0090 BA68     		ldr	r2, [r7, #8]
 5222 0092 DA64     		str	r2, [r3, #76]
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5223              		.loc 1 4375 0
 5224 0094 09E0     		b	.L339
 5225              	.L345:
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 5226              		.loc 1 4378 0
 5227 0096 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5228 0098 022B     		cmp	r3, #2
 5229 009a 03D0     		beq	.L346
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 5230              		.loc 1 4380 0
 5231 009c 3B6A     		ldr	r3, [r7, #32]
 5232 009e BA68     		ldr	r2, [r7, #8]
 5233 00a0 DA64     		str	r2, [r3, #76]
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5234              		.loc 1 4387 0
 5235 00a2 01E0     		b	.L352
 5236              	.L346:
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5237              		.loc 1 4385 0
 5238 00a4 0023     		movs	r3, #0
 5239 00a6 7B62     		str	r3, [r7, #36]
 5240              	.L352:
 5241              		.loc 1 4387 0
 5242 00a8 00BF     		nop
 5243              	.L339:
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
ARM GAS  /tmp/cc6ZjiVz.s 			page 174


4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5244              		.loc 1 4399 0
 5245 00aa FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5246 00ac 012B     		cmp	r3, #1
 5247 00ae 38D1     		bne	.L348
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5248              		.loc 1 4401 0
 5249 00b0 3B6A     		ldr	r3, [r7, #32]
 5250 00b2 0433     		adds	r3, r3, #4
 5251 00b4 1846     		mov	r0, r3
 5252 00b6 FFF7FEFF 		bl	uxListRemove
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5253              		.loc 1 4402 0
 5254 00ba 3B6A     		ldr	r3, [r7, #32]
 5255 00bc DB6A     		ldr	r3, [r3, #44]
 5256 00be 0122     		movs	r2, #1
 5257 00c0 9A40     		lsls	r2, r2, r3
 5258 00c2 1B4B     		ldr	r3, .L353
 5259 00c4 1B68     		ldr	r3, [r3]
 5260 00c6 1343     		orrs	r3, r3, r2
 5261 00c8 194A     		ldr	r2, .L353
 5262 00ca 1360     		str	r3, [r2]
 5263 00cc 3B6A     		ldr	r3, [r7, #32]
 5264 00ce DA6A     		ldr	r2, [r3, #44]
 5265 00d0 1346     		mov	r3, r2
 5266 00d2 9B00     		lsls	r3, r3, #2
 5267 00d4 1344     		add	r3, r3, r2
 5268 00d6 9B00     		lsls	r3, r3, #2
 5269 00d8 164A     		ldr	r2, .L353+4
 5270 00da 1A44     		add	r2, r2, r3
 5271 00dc 3B6A     		ldr	r3, [r7, #32]
 5272 00de 0433     		adds	r3, r3, #4
 5273 00e0 1946     		mov	r1, r3
 5274 00e2 1046     		mov	r0, r2
 5275 00e4 FFF7FEFF 		bl	vListInsertEnd
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5276              		.loc 1 4405 0
 5277 00e8 3B6A     		ldr	r3, [r7, #32]
 5278 00ea 9B6A     		ldr	r3, [r3, #40]
 5279 00ec 002B     		cmp	r3, #0
 5280 00ee 09D0     		beq	.L349
 5281              	.LBB163:
 5282              	.LBB164:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5283              		.loc 2 237 0 discriminator 1
 5284              		.syntax unified
 5285              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5286 00f0 4FF05003 			mov r3, #80												
 5287 00f4 83F31188 		msr basepri, r3											
 5288 00f8 BFF36F8F 		isb														
 5289 00fc BFF34F8F 		dsb														
 5290              	
 5291              	@ 0 "" 2
ARM GAS  /tmp/cc6ZjiVz.s 			page 175


 5292              		.thumb
 5293              		.syntax unified
 5294 0100 7B61     		str	r3, [r7, #20]
 5295              	.L350:
 5296              	.LBE164:
 5297              	.LBE163:
 5298              		.loc 1 4405 0 discriminator 2
 5299 0102 FEE7     		b	.L350
 5300              	.L349:
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5301              		.loc 1 4423 0
 5302 0104 3B6A     		ldr	r3, [r7, #32]
 5303 0106 DA6A     		ldr	r2, [r3, #44]
 5304 0108 0B4B     		ldr	r3, .L353+8
 5305 010a 1B68     		ldr	r3, [r3]
 5306 010c DB6A     		ldr	r3, [r3, #44]
 5307 010e 9A42     		cmp	r2, r3
 5308 0110 07D9     		bls	.L348
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 5309              		.loc 1 4427 0
 5310 0112 0A4B     		ldr	r3, .L353+12
 5311 0114 4FF08052 		mov	r2, #268435456
 5312 0118 1A60     		str	r2, [r3]
 5313              		.syntax unified
 5314              	@ 4427 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5315 011a BFF34F8F 		dsb
 5316              	@ 0 "" 2
 5317              	@ 4427 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5318 011e BFF36F8F 		isb
 5319              	@ 0 "" 2
 5320              		.thumb
 5321              		.syntax unified
 5322              	.L348:
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/cc6ZjiVz.s 			page 176


4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5323              		.loc 1 4439 0
 5324 0122 FFF7FEFF 		bl	vPortExitCritical
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5325              		.loc 1 4441 0
 5326 0126 7B6A     		ldr	r3, [r7, #36]
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5327              		.loc 1 4442 0
 5328 0128 1846     		mov	r0, r3
 5329 012a 2837     		adds	r7, r7, #40
 5330              	.LCFI216:
 5331              		.cfi_def_cfa_offset 8
 5332 012c BD46     		mov	sp, r7
 5333              	.LCFI217:
 5334              		.cfi_def_cfa_register 13
 5335              		@ sp needed
 5336 012e 80BD     		pop	{r7, pc}
 5337              	.L354:
 5338              		.align	2
 5339              	.L353:
 5340 0130 00000000 		.word	uxTopReadyPriority
 5341 0134 00000000 		.word	pxReadyTasksLists
 5342 0138 00000000 		.word	pxCurrentTCB
 5343 013c 04ED00E0 		.word	-536810236
 5344              		.cfi_endproc
 5345              	.LFE47:
 5347              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5348              		.align	1
 5349              		.global	xTaskGenericNotifyFromISR
 5350              		.syntax unified
 5351              		.thumb
 5352              		.thumb_func
 5353              		.fpu fpv4-sp-d16
 5355              	xTaskGenericNotifyFromISR:
 5356              	.LFB48:
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5357              		.loc 1 4450 0
 5358              		.cfi_startproc
 5359              		@ args = 4, pretend = 0, frame = 56
 5360              		@ frame_needed = 1, uses_anonymous_args = 0
 5361 0000 80B5     		push	{r7, lr}
 5362              	.LCFI218:
ARM GAS  /tmp/cc6ZjiVz.s 			page 177


 5363              		.cfi_def_cfa_offset 8
 5364              		.cfi_offset 7, -8
 5365              		.cfi_offset 14, -4
 5366 0002 8EB0     		sub	sp, sp, #56
 5367              	.LCFI219:
 5368              		.cfi_def_cfa_offset 64
 5369 0004 00AF     		add	r7, sp, #0
 5370              	.LCFI220:
 5371              		.cfi_def_cfa_register 7
 5372 0006 F860     		str	r0, [r7, #12]
 5373 0008 B960     		str	r1, [r7, #8]
 5374 000a 3B60     		str	r3, [r7]
 5375 000c 1346     		mov	r3, r2
 5376 000e FB71     		strb	r3, [r7, #7]
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5377              		.loc 1 4453 0
 5378 0010 0123     		movs	r3, #1
 5379 0012 7B63     		str	r3, [r7, #52]
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5380              		.loc 1 4456 0
 5381 0014 FB68     		ldr	r3, [r7, #12]
 5382 0016 002B     		cmp	r3, #0
 5383 0018 09D1     		bne	.L356
 5384              	.LBB165:
 5385              	.LBB166:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5386              		.loc 2 237 0 discriminator 1
 5387              		.syntax unified
 5388              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5389 001a 4FF05003 			mov r3, #80												
 5390 001e 83F31188 		msr basepri, r3											
 5391 0022 BFF36F8F 		isb														
 5392 0026 BFF34F8F 		dsb														
 5393              	
 5394              	@ 0 "" 2
 5395              		.thumb
 5396              		.syntax unified
 5397 002a 7B62     		str	r3, [r7, #36]
 5398              	.L357:
 5399              	.LBE166:
 5400              	.LBE165:
 5401              		.loc 1 4456 0 discriminator 1
 5402 002c FEE7     		b	.L357
 5403              	.L356:
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
ARM GAS  /tmp/cc6ZjiVz.s 			page 178


4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 5404              		.loc 1 4474 0
 5405 002e FFF7FEFF 		bl	vPortValidateInterruptPriority
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5406              		.loc 1 4476 0
 5407 0032 FB68     		ldr	r3, [r7, #12]
 5408 0034 3B63     		str	r3, [r7, #48]
 5409              	.LBB167:
 5410              	.LBB168:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5411              		.loc 2 253 0
 5412              		.syntax unified
 5413              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5414 0036 EFF31182 			mrs r2, basepri											
 5415 003a 4FF05003 		mov r3, #80												
 5416 003e 83F31188 		msr basepri, r3											
 5417 0042 BFF36F8F 		isb														
 5418 0046 BFF34F8F 		dsb														
 5419              	
 5420              	@ 0 "" 2
 5421              		.thumb
 5422              		.syntax unified
 5423 004a 3A62     		str	r2, [r7, #32]
 5424 004c FB61     		str	r3, [r7, #28]
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 5425              		.loc 2 265 0
 5426 004e 3B6A     		ldr	r3, [r7, #32]
 5427              	.LBE168:
 5428              	.LBE167:
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 5429              		.loc 1 4478 0
 5430 0050 FB62     		str	r3, [r7, #44]
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 5431              		.loc 1 4480 0
 5432 0052 3B68     		ldr	r3, [r7]
 5433 0054 002B     		cmp	r3, #0
 5434 0056 03D0     		beq	.L359
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 5435              		.loc 1 4482 0
 5436 0058 3B6B     		ldr	r3, [r7, #48]
 5437 005a DA6C     		ldr	r2, [r3, #76]
 5438 005c 3B68     		ldr	r3, [r7]
 5439 005e 1A60     		str	r2, [r3]
 5440              	.L359:
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cc6ZjiVz.s 			page 179


4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5441              		.loc 1 4485 0
 5442 0060 3B6B     		ldr	r3, [r7, #48]
 5443 0062 93F85030 		ldrb	r3, [r3, #80]
 5444 0066 87F82B30 		strb	r3, [r7, #43]
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5445              		.loc 1 4486 0
 5446 006a 3B6B     		ldr	r3, [r7, #48]
 5447 006c 0222     		movs	r2, #2
 5448 006e 83F85020 		strb	r2, [r3, #80]
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 5449              		.loc 1 4488 0
 5450 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5451 0074 042B     		cmp	r3, #4
 5452 0076 29D8     		bhi	.L360
 5453 0078 01A2     		adr	r2, .L362
 5454 007a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5455 007e 00BF     		.p2align 2
 5456              	.L362:
 5457 0080 CD000000 		.word	.L360+1
 5458 0084 95000000 		.word	.L363+1
 5459 0088 A3000000 		.word	.L364+1
 5460 008c AF000000 		.word	.L365+1
 5461 0090 B7000000 		.word	.L366+1
 5462              		.p2align 1
 5463              	.L363:
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 5464              		.loc 1 4491 0
 5465 0094 3B6B     		ldr	r3, [r7, #48]
 5466 0096 DA6C     		ldr	r2, [r3, #76]
 5467 0098 BB68     		ldr	r3, [r7, #8]
 5468 009a 1A43     		orrs	r2, r2, r3
 5469 009c 3B6B     		ldr	r3, [r7, #48]
 5470 009e DA64     		str	r2, [r3, #76]
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5471              		.loc 1 4492 0
 5472 00a0 14E0     		b	.L360
 5473              	.L364:
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 5474              		.loc 1 4495 0
 5475 00a2 3B6B     		ldr	r3, [r7, #48]
 5476 00a4 DB6C     		ldr	r3, [r3, #76]
 5477 00a6 5A1C     		adds	r2, r3, #1
 5478 00a8 3B6B     		ldr	r3, [r7, #48]
 5479 00aa DA64     		str	r2, [r3, #76]
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5480              		.loc 1 4496 0
 5481 00ac 0EE0     		b	.L360
 5482              	.L365:
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
ARM GAS  /tmp/cc6ZjiVz.s 			page 180


4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 5483              		.loc 1 4499 0
 5484 00ae 3B6B     		ldr	r3, [r7, #48]
 5485 00b0 BA68     		ldr	r2, [r7, #8]
 5486 00b2 DA64     		str	r2, [r3, #76]
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5487              		.loc 1 4500 0
 5488 00b4 0AE0     		b	.L360
 5489              	.L366:
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 5490              		.loc 1 4503 0
 5491 00b6 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 5492 00ba 022B     		cmp	r3, #2
 5493 00bc 03D0     		beq	.L367
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 5494              		.loc 1 4505 0
 5495 00be 3B6B     		ldr	r3, [r7, #48]
 5496 00c0 BA68     		ldr	r2, [r7, #8]
 5497 00c2 DA64     		str	r2, [r3, #76]
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5498              		.loc 1 4512 0
 5499 00c4 01E0     		b	.L377
 5500              	.L367:
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5501              		.loc 1 4510 0
 5502 00c6 0023     		movs	r3, #0
 5503 00c8 7B63     		str	r3, [r7, #52]
 5504              	.L377:
 5505              		.loc 1 4512 0
 5506 00ca 00BF     		nop
 5507              	.L360:
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5508              		.loc 1 4524 0
 5509 00cc 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 5510 00d0 012B     		cmp	r3, #1
 5511 00d2 45D1     		bne	.L369
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cc6ZjiVz.s 			page 181


4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5512              		.loc 1 4527 0
 5513 00d4 3B6B     		ldr	r3, [r7, #48]
 5514 00d6 9B6A     		ldr	r3, [r3, #40]
 5515 00d8 002B     		cmp	r3, #0
 5516 00da 09D0     		beq	.L370
 5517              	.LBB169:
 5518              	.LBB170:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5519              		.loc 2 237 0 discriminator 1
 5520              		.syntax unified
 5521              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5522 00dc 4FF05003 			mov r3, #80												
 5523 00e0 83F31188 		msr basepri, r3											
 5524 00e4 BFF36F8F 		isb														
 5525 00e8 BFF34F8F 		dsb														
 5526              	
 5527              	@ 0 "" 2
 5528              		.thumb
 5529              		.syntax unified
 5530 00ec BB61     		str	r3, [r7, #24]
 5531              	.L371:
 5532              	.LBE170:
 5533              	.LBE169:
 5534              		.loc 1 4527 0 discriminator 2
 5535 00ee FEE7     		b	.L371
 5536              	.L370:
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5537              		.loc 1 4529 0
 5538 00f0 204B     		ldr	r3, .L378
 5539 00f2 1B68     		ldr	r3, [r3]
 5540 00f4 002B     		cmp	r3, #0
 5541 00f6 1CD1     		bne	.L372
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5542              		.loc 1 4531 0
 5543 00f8 3B6B     		ldr	r3, [r7, #48]
 5544 00fa 0433     		adds	r3, r3, #4
 5545 00fc 1846     		mov	r0, r3
 5546 00fe FFF7FEFF 		bl	uxListRemove
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5547              		.loc 1 4532 0
 5548 0102 3B6B     		ldr	r3, [r7, #48]
 5549 0104 DB6A     		ldr	r3, [r3, #44]
 5550 0106 0122     		movs	r2, #1
 5551 0108 9A40     		lsls	r2, r2, r3
 5552 010a 1B4B     		ldr	r3, .L378+4
 5553 010c 1B68     		ldr	r3, [r3]
 5554 010e 1343     		orrs	r3, r3, r2
 5555 0110 194A     		ldr	r2, .L378+4
 5556 0112 1360     		str	r3, [r2]
 5557 0114 3B6B     		ldr	r3, [r7, #48]
 5558 0116 DA6A     		ldr	r2, [r3, #44]
 5559 0118 1346     		mov	r3, r2
 5560 011a 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/cc6ZjiVz.s 			page 182


 5561 011c 1344     		add	r3, r3, r2
 5562 011e 9B00     		lsls	r3, r3, #2
 5563 0120 164A     		ldr	r2, .L378+8
 5564 0122 1A44     		add	r2, r2, r3
 5565 0124 3B6B     		ldr	r3, [r7, #48]
 5566 0126 0433     		adds	r3, r3, #4
 5567 0128 1946     		mov	r1, r3
 5568 012a 1046     		mov	r0, r2
 5569 012c FFF7FEFF 		bl	vListInsertEnd
 5570 0130 05E0     		b	.L373
 5571              	.L372:
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5572              		.loc 1 4538 0
 5573 0132 3B6B     		ldr	r3, [r7, #48]
 5574 0134 1833     		adds	r3, r3, #24
 5575 0136 1946     		mov	r1, r3
 5576 0138 1148     		ldr	r0, .L378+12
 5577 013a FFF7FEFF 		bl	vListInsertEnd
 5578              	.L373:
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5579              		.loc 1 4541 0
 5580 013e 3B6B     		ldr	r3, [r7, #48]
 5581 0140 DA6A     		ldr	r2, [r3, #44]
 5582 0142 104B     		ldr	r3, .L378+16
 5583 0144 1B68     		ldr	r3, [r3]
 5584 0146 DB6A     		ldr	r3, [r3, #44]
 5585 0148 9A42     		cmp	r2, r3
 5586 014a 09D9     		bls	.L369
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 5587              		.loc 1 4545 0
 5588 014c 3B6C     		ldr	r3, [r7, #64]
 5589 014e 002B     		cmp	r3, #0
 5590 0150 03D0     		beq	.L374
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 5591              		.loc 1 4547 0
 5592 0152 3B6C     		ldr	r3, [r7, #64]
 5593 0154 0122     		movs	r2, #1
 5594 0156 1A60     		str	r2, [r3]
 5595 0158 02E0     		b	.L369
 5596              	.L374:
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
ARM GAS  /tmp/cc6ZjiVz.s 			page 183


4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 5597              		.loc 1 4554 0
 5598 015a 0B4B     		ldr	r3, .L378+20
 5599 015c 0122     		movs	r2, #1
 5600 015e 1A60     		str	r2, [r3]
 5601              	.L369:
 5602 0160 FB6A     		ldr	r3, [r7, #44]
 5603 0162 7B61     		str	r3, [r7, #20]
 5604              	.LBB171:
 5605              	.LBB172:
 5606              		.loc 2 271 0
 5607 0164 7B69     		ldr	r3, [r7, #20]
 5608              		.syntax unified
 5609              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5610 0166 83F31188 			msr basepri, r3	
 5611              	@ 0 "" 2
 5612              		.thumb
 5613              		.syntax unified
 5614              	.LBE172:
 5615              	.LBE171:
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5616              		.loc 1 4565 0
 5617 016a 7B6B     		ldr	r3, [r7, #52]
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5618              		.loc 1 4566 0
 5619 016c 1846     		mov	r0, r3
 5620 016e 3837     		adds	r7, r7, #56
 5621              	.LCFI221:
 5622              		.cfi_def_cfa_offset 8
 5623 0170 BD46     		mov	sp, r7
 5624              	.LCFI222:
 5625              		.cfi_def_cfa_register 13
 5626              		@ sp needed
 5627 0172 80BD     		pop	{r7, pc}
 5628              	.L379:
 5629              		.align	2
 5630              	.L378:
 5631 0174 00000000 		.word	uxSchedulerSuspended
 5632 0178 00000000 		.word	uxTopReadyPriority
 5633 017c 00000000 		.word	pxReadyTasksLists
 5634 0180 00000000 		.word	xPendingReadyList
 5635 0184 00000000 		.word	pxCurrentTCB
 5636 0188 00000000 		.word	xYieldPending
 5637              		.cfi_endproc
 5638              	.LFE48:
 5640              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5641              		.align	1
ARM GAS  /tmp/cc6ZjiVz.s 			page 184


 5642              		.global	vTaskNotifyGiveFromISR
 5643              		.syntax unified
 5644              		.thumb
 5645              		.thumb_func
 5646              		.fpu fpv4-sp-d16
 5648              	vTaskNotifyGiveFromISR:
 5649              	.LFB49:
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5650              		.loc 1 4574 0
 5651              		.cfi_startproc
 5652              		@ args = 0, pretend = 0, frame = 40
 5653              		@ frame_needed = 1, uses_anonymous_args = 0
 5654 0000 80B5     		push	{r7, lr}
 5655              	.LCFI223:
 5656              		.cfi_def_cfa_offset 8
 5657              		.cfi_offset 7, -8
 5658              		.cfi_offset 14, -4
 5659 0002 8AB0     		sub	sp, sp, #40
 5660              	.LCFI224:
 5661              		.cfi_def_cfa_offset 48
 5662 0004 00AF     		add	r7, sp, #0
 5663              	.LCFI225:
 5664              		.cfi_def_cfa_register 7
 5665 0006 7860     		str	r0, [r7, #4]
 5666 0008 3960     		str	r1, [r7]
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5667              		.loc 1 4579 0
 5668 000a 7B68     		ldr	r3, [r7, #4]
 5669 000c 002B     		cmp	r3, #0
 5670 000e 09D1     		bne	.L381
 5671              	.LBB173:
 5672              	.LBB174:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5673              		.loc 2 237 0 discriminator 1
 5674              		.syntax unified
 5675              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5676 0010 4FF05003 			mov r3, #80												
 5677 0014 83F31188 		msr basepri, r3											
 5678 0018 BFF36F8F 		isb														
 5679 001c BFF34F8F 		dsb														
 5680              	
 5681              	@ 0 "" 2
 5682              		.thumb
 5683              		.syntax unified
 5684 0020 BB61     		str	r3, [r7, #24]
 5685              	.L382:
ARM GAS  /tmp/cc6ZjiVz.s 			page 185


 5686              	.LBE174:
 5687              	.LBE173:
 5688              		.loc 1 4579 0 discriminator 1
 5689 0022 FEE7     		b	.L382
 5690              	.L381:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 5691              		.loc 1 4597 0
 5692 0024 FFF7FEFF 		bl	vPortValidateInterruptPriority
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5693              		.loc 1 4599 0
 5694 0028 7B68     		ldr	r3, [r7, #4]
 5695 002a 7B62     		str	r3, [r7, #36]
 5696              	.LBB175:
 5697              	.LBB176:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5698              		.loc 2 253 0
 5699              		.syntax unified
 5700              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5701 002c EFF31182 			mrs r2, basepri											
 5702 0030 4FF05003 		mov r3, #80												
 5703 0034 83F31188 		msr basepri, r3											
 5704 0038 BFF36F8F 		isb														
 5705 003c BFF34F8F 		dsb														
 5706              	
 5707              	@ 0 "" 2
 5708              		.thumb
 5709              		.syntax unified
 5710 0040 7A61     		str	r2, [r7, #20]
 5711 0042 3B61     		str	r3, [r7, #16]
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 5712              		.loc 2 265 0
 5713 0044 7B69     		ldr	r3, [r7, #20]
 5714              	.LBE176:
 5715              	.LBE175:
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 5716              		.loc 1 4601 0
 5717 0046 3B62     		str	r3, [r7, #32]
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cc6ZjiVz.s 			page 186


4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5718              		.loc 1 4603 0
 5719 0048 7B6A     		ldr	r3, [r7, #36]
 5720 004a 93F85030 		ldrb	r3, [r3, #80]
 5721 004e FB77     		strb	r3, [r7, #31]
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5722              		.loc 1 4604 0
 5723 0050 7B6A     		ldr	r3, [r7, #36]
 5724 0052 0222     		movs	r2, #2
 5725 0054 83F85020 		strb	r2, [r3, #80]
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 5726              		.loc 1 4608 0
 5727 0058 7B6A     		ldr	r3, [r7, #36]
 5728 005a DB6C     		ldr	r3, [r3, #76]
 5729 005c 5A1C     		adds	r2, r3, #1
 5730 005e 7B6A     		ldr	r3, [r7, #36]
 5731 0060 DA64     		str	r2, [r3, #76]
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5732              		.loc 1 4614 0
 5733 0062 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5734 0064 012B     		cmp	r3, #1
 5735 0066 45D1     		bne	.L384
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5736              		.loc 1 4617 0
 5737 0068 7B6A     		ldr	r3, [r7, #36]
 5738 006a 9B6A     		ldr	r3, [r3, #40]
 5739 006c 002B     		cmp	r3, #0
 5740 006e 09D0     		beq	.L385
 5741              	.LBB177:
 5742              	.LBB178:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5743              		.loc 2 237 0 discriminator 1
 5744              		.syntax unified
 5745              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5746 0070 4FF05003 			mov r3, #80												
 5747 0074 83F31188 		msr basepri, r3											
 5748 0078 BFF36F8F 		isb														
 5749 007c BFF34F8F 		dsb														
 5750              	
 5751              	@ 0 "" 2
 5752              		.thumb
 5753              		.syntax unified
 5754 0080 FB60     		str	r3, [r7, #12]
 5755              	.L386:
 5756              	.LBE178:
 5757              	.LBE177:
 5758              		.loc 1 4617 0 discriminator 2
ARM GAS  /tmp/cc6ZjiVz.s 			page 187


 5759 0082 FEE7     		b	.L386
 5760              	.L385:
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5761              		.loc 1 4619 0
 5762 0084 204B     		ldr	r3, .L391
 5763 0086 1B68     		ldr	r3, [r3]
 5764 0088 002B     		cmp	r3, #0
 5765 008a 1CD1     		bne	.L387
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5766              		.loc 1 4621 0
 5767 008c 7B6A     		ldr	r3, [r7, #36]
 5768 008e 0433     		adds	r3, r3, #4
 5769 0090 1846     		mov	r0, r3
 5770 0092 FFF7FEFF 		bl	uxListRemove
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5771              		.loc 1 4622 0
 5772 0096 7B6A     		ldr	r3, [r7, #36]
 5773 0098 DB6A     		ldr	r3, [r3, #44]
 5774 009a 0122     		movs	r2, #1
 5775 009c 9A40     		lsls	r2, r2, r3
 5776 009e 1B4B     		ldr	r3, .L391+4
 5777 00a0 1B68     		ldr	r3, [r3]
 5778 00a2 1343     		orrs	r3, r3, r2
 5779 00a4 194A     		ldr	r2, .L391+4
 5780 00a6 1360     		str	r3, [r2]
 5781 00a8 7B6A     		ldr	r3, [r7, #36]
 5782 00aa DA6A     		ldr	r2, [r3, #44]
 5783 00ac 1346     		mov	r3, r2
 5784 00ae 9B00     		lsls	r3, r3, #2
 5785 00b0 1344     		add	r3, r3, r2
 5786 00b2 9B00     		lsls	r3, r3, #2
 5787 00b4 164A     		ldr	r2, .L391+8
 5788 00b6 1A44     		add	r2, r2, r3
 5789 00b8 7B6A     		ldr	r3, [r7, #36]
 5790 00ba 0433     		adds	r3, r3, #4
 5791 00bc 1946     		mov	r1, r3
 5792 00be 1046     		mov	r0, r2
 5793 00c0 FFF7FEFF 		bl	vListInsertEnd
 5794 00c4 05E0     		b	.L388
 5795              	.L387:
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5796              		.loc 1 4628 0
 5797 00c6 7B6A     		ldr	r3, [r7, #36]
 5798 00c8 1833     		adds	r3, r3, #24
 5799 00ca 1946     		mov	r1, r3
 5800 00cc 1148     		ldr	r0, .L391+12
 5801 00ce FFF7FEFF 		bl	vListInsertEnd
 5802              	.L388:
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc6ZjiVz.s 			page 188


4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5803              		.loc 1 4631 0
 5804 00d2 7B6A     		ldr	r3, [r7, #36]
 5805 00d4 DA6A     		ldr	r2, [r3, #44]
 5806 00d6 104B     		ldr	r3, .L391+16
 5807 00d8 1B68     		ldr	r3, [r3]
 5808 00da DB6A     		ldr	r3, [r3, #44]
 5809 00dc 9A42     		cmp	r2, r3
 5810 00de 09D9     		bls	.L384
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 5811              		.loc 1 4635 0
 5812 00e0 3B68     		ldr	r3, [r7]
 5813 00e2 002B     		cmp	r3, #0
 5814 00e4 03D0     		beq	.L389
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 5815              		.loc 1 4637 0
 5816 00e6 3B68     		ldr	r3, [r7]
 5817 00e8 0122     		movs	r2, #1
 5818 00ea 1A60     		str	r2, [r3]
 5819 00ec 02E0     		b	.L384
 5820              	.L389:
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 5821              		.loc 1 4644 0
 5822 00ee 0B4B     		ldr	r3, .L391+20
 5823 00f0 0122     		movs	r2, #1
 5824 00f2 1A60     		str	r2, [r3]
 5825              	.L384:
 5826 00f4 3B6A     		ldr	r3, [r7, #32]
 5827 00f6 BB60     		str	r3, [r7, #8]
 5828              	.LBB179:
 5829              	.LBB180:
 5830              		.loc 2 271 0
 5831 00f8 BB68     		ldr	r3, [r7, #8]
 5832              		.syntax unified
 5833              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5834 00fa 83F31188 			msr basepri, r3	
 5835              	@ 0 "" 2
 5836              		.thumb
 5837              		.syntax unified
 5838              	.LBE180:
 5839              	.LBE179:
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cc6ZjiVz.s 			page 189


4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5840              		.loc 1 4654 0
 5841 00fe 00BF     		nop
 5842 0100 2837     		adds	r7, r7, #40
 5843              	.LCFI226:
 5844              		.cfi_def_cfa_offset 8
 5845 0102 BD46     		mov	sp, r7
 5846              	.LCFI227:
 5847              		.cfi_def_cfa_register 13
 5848              		@ sp needed
 5849 0104 80BD     		pop	{r7, pc}
 5850              	.L392:
 5851 0106 00BF     		.align	2
 5852              	.L391:
 5853 0108 00000000 		.word	uxSchedulerSuspended
 5854 010c 00000000 		.word	uxTopReadyPriority
 5855 0110 00000000 		.word	pxReadyTasksLists
 5856 0114 00000000 		.word	xPendingReadyList
 5857 0118 00000000 		.word	pxCurrentTCB
 5858 011c 00000000 		.word	xYieldPending
 5859              		.cfi_endproc
 5860              	.LFE49:
 5862              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5863              		.align	1
 5864              		.global	xTaskNotifyStateClear
 5865              		.syntax unified
 5866              		.thumb
 5867              		.thumb_func
 5868              		.fpu fpv4-sp-d16
 5870              	xTaskNotifyStateClear:
 5871              	.LFB50:
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5872              		.loc 1 4663 0
 5873              		.cfi_startproc
 5874              		@ args = 0, pretend = 0, frame = 16
 5875              		@ frame_needed = 1, uses_anonymous_args = 0
 5876 0000 80B5     		push	{r7, lr}
 5877              	.LCFI228:
 5878              		.cfi_def_cfa_offset 8
 5879              		.cfi_offset 7, -8
 5880              		.cfi_offset 14, -4
 5881 0002 84B0     		sub	sp, sp, #16
 5882              	.LCFI229:
 5883              		.cfi_def_cfa_offset 24
 5884 0004 00AF     		add	r7, sp, #0
 5885              	.LCFI230:
ARM GAS  /tmp/cc6ZjiVz.s 			page 190


 5886              		.cfi_def_cfa_register 7
 5887 0006 7860     		str	r0, [r7, #4]
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5888              		.loc 1 4669 0
 5889 0008 7B68     		ldr	r3, [r7, #4]
 5890 000a 002B     		cmp	r3, #0
 5891 000c 02D1     		bne	.L394
 5892              		.loc 1 4669 0 is_stmt 0 discriminator 1
 5893 000e 0E4B     		ldr	r3, .L399
 5894 0010 1B68     		ldr	r3, [r3]
 5895 0012 00E0     		b	.L395
 5896              	.L394:
 5897              		.loc 1 4669 0 discriminator 2
 5898 0014 7B68     		ldr	r3, [r7, #4]
 5899              	.L395:
 5900              		.loc 1 4669 0 discriminator 4
 5901 0016 BB60     		str	r3, [r7, #8]
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5902              		.loc 1 4671 0 is_stmt 1 discriminator 4
 5903 0018 FFF7FEFF 		bl	vPortEnterCritical
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 5904              		.loc 1 4673 0 discriminator 4
 5905 001c BB68     		ldr	r3, [r7, #8]
 5906 001e 93F85030 		ldrb	r3, [r3, #80]
 5907 0022 DBB2     		uxtb	r3, r3
 5908 0024 022B     		cmp	r3, #2
 5909 0026 06D1     		bne	.L396
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5910              		.loc 1 4675 0
 5911 0028 BB68     		ldr	r3, [r7, #8]
 5912 002a 0022     		movs	r2, #0
 5913 002c 83F85020 		strb	r2, [r3, #80]
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 5914              		.loc 1 4676 0
 5915 0030 0123     		movs	r3, #1
 5916 0032 FB60     		str	r3, [r7, #12]
 5917 0034 01E0     		b	.L397
 5918              	.L396:
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 5919              		.loc 1 4680 0
 5920 0036 0023     		movs	r3, #0
 5921 0038 FB60     		str	r3, [r7, #12]
 5922              	.L397:
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
ARM GAS  /tmp/cc6ZjiVz.s 			page 191


 5923              		.loc 1 4683 0
 5924 003a FFF7FEFF 		bl	vPortExitCritical
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5925              		.loc 1 4685 0
 5926 003e FB68     		ldr	r3, [r7, #12]
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5927              		.loc 1 4686 0
 5928 0040 1846     		mov	r0, r3
 5929 0042 1037     		adds	r7, r7, #16
 5930              	.LCFI231:
 5931              		.cfi_def_cfa_offset 8
 5932 0044 BD46     		mov	sp, r7
 5933              	.LCFI232:
 5934              		.cfi_def_cfa_register 13
 5935              		@ sp needed
 5936 0046 80BD     		pop	{r7, pc}
 5937              	.L400:
 5938              		.align	2
 5939              	.L399:
 5940 0048 00000000 		.word	pxCurrentTCB
 5941              		.cfi_endproc
 5942              	.LFE50:
 5944              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 5945              		.align	1
 5946              		.syntax unified
 5947              		.thumb
 5948              		.thumb_func
 5949              		.fpu fpv4-sp-d16
 5951              	prvAddCurrentTaskToDelayedList:
 5952              	.LFB51:
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5953              		.loc 1 4693 0
 5954              		.cfi_startproc
 5955              		@ args = 0, pretend = 0, frame = 16
 5956              		@ frame_needed = 1, uses_anonymous_args = 0
 5957 0000 80B5     		push	{r7, lr}
 5958              	.LCFI233:
 5959              		.cfi_def_cfa_offset 8
 5960              		.cfi_offset 7, -8
 5961              		.cfi_offset 14, -4
 5962 0002 84B0     		sub	sp, sp, #16
 5963              	.LCFI234:
 5964              		.cfi_def_cfa_offset 24
 5965 0004 00AF     		add	r7, sp, #0
 5966              	.LCFI235:
 5967              		.cfi_def_cfa_register 7
 5968 0006 7860     		str	r0, [r7, #4]
 5969 0008 3960     		str	r1, [r7]
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
ARM GAS  /tmp/cc6ZjiVz.s 			page 192


 5970              		.loc 1 4695 0
 5971 000a 294B     		ldr	r3, .L407
 5972 000c 1B68     		ldr	r3, [r3]
 5973 000e FB60     		str	r3, [r7, #12]
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5974              		.loc 1 4708 0
 5975 0010 284B     		ldr	r3, .L407+4
 5976 0012 1B68     		ldr	r3, [r3]
 5977 0014 0433     		adds	r3, r3, #4
 5978 0016 1846     		mov	r0, r3
 5979 0018 FFF7FEFF 		bl	uxListRemove
 5980 001c 0346     		mov	r3, r0
 5981 001e 002B     		cmp	r3, #0
 5982 0020 0BD1     		bne	.L402
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 5983              		.loc 1 4712 0
 5984 0022 244B     		ldr	r3, .L407+4
 5985 0024 1B68     		ldr	r3, [r3]
 5986 0026 DB6A     		ldr	r3, [r3, #44]
 5987 0028 0122     		movs	r2, #1
 5988 002a 02FA03F3 		lsl	r3, r2, r3
 5989 002e DA43     		mvns	r2, r3
 5990 0030 214B     		ldr	r3, .L407+8
 5991 0032 1B68     		ldr	r3, [r3]
 5992 0034 1340     		ands	r3, r3, r2
 5993 0036 204A     		ldr	r2, .L407+8
 5994 0038 1360     		str	r3, [r2]
 5995              	.L402:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 5996              		.loc 1 4721 0
 5997 003a 7B68     		ldr	r3, [r7, #4]
 5998 003c B3F1FF3F 		cmp	r3, #-1
 5999 0040 0AD1     		bne	.L403
 6000              		.loc 1 4721 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/cc6ZjiVz.s 			page 193


 6001 0042 3B68     		ldr	r3, [r7]
 6002 0044 002B     		cmp	r3, #0
 6003 0046 07D0     		beq	.L403
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 6004              		.loc 1 4726 0 is_stmt 1
 6005 0048 1A4B     		ldr	r3, .L407+4
 6006 004a 1B68     		ldr	r3, [r3]
 6007 004c 0433     		adds	r3, r3, #4
 6008 004e 1946     		mov	r1, r3
 6009 0050 1A48     		ldr	r0, .L407+12
 6010 0052 FFF7FEFF 		bl	vListInsertEnd
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
ARM GAS  /tmp/cc6ZjiVz.s 			page 194


4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 6011              		.loc 1 4801 0
 6012 0056 26E0     		b	.L406
 6013              	.L403:
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6014              		.loc 1 4733 0
 6015 0058 FA68     		ldr	r2, [r7, #12]
 6016 005a 7B68     		ldr	r3, [r7, #4]
 6017 005c 1344     		add	r3, r3, r2
 6018 005e BB60     		str	r3, [r7, #8]
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6019              		.loc 1 4736 0
 6020 0060 144B     		ldr	r3, .L407+4
 6021 0062 1B68     		ldr	r3, [r3]
 6022 0064 BA68     		ldr	r2, [r7, #8]
 6023 0066 5A60     		str	r2, [r3, #4]
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6024              		.loc 1 4738 0
 6025 0068 BA68     		ldr	r2, [r7, #8]
 6026 006a FB68     		ldr	r3, [r7, #12]
 6027 006c 9A42     		cmp	r2, r3
 6028 006e 09D2     		bcs	.L405
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6029              		.loc 1 4742 0
 6030 0070 134B     		ldr	r3, .L407+16
ARM GAS  /tmp/cc6ZjiVz.s 			page 195


 6031 0072 1A68     		ldr	r2, [r3]
 6032 0074 0F4B     		ldr	r3, .L407+4
 6033 0076 1B68     		ldr	r3, [r3]
 6034 0078 0433     		adds	r3, r3, #4
 6035 007a 1946     		mov	r1, r3
 6036 007c 1046     		mov	r0, r2
 6037 007e FFF7FEFF 		bl	vListInsert
 6038              		.loc 1 4801 0
 6039 0082 10E0     		b	.L406
 6040              	.L405:
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6041              		.loc 1 4748 0
 6042 0084 0F4B     		ldr	r3, .L407+20
 6043 0086 1A68     		ldr	r2, [r3]
 6044 0088 0A4B     		ldr	r3, .L407+4
 6045 008a 1B68     		ldr	r3, [r3]
 6046 008c 0433     		adds	r3, r3, #4
 6047 008e 1946     		mov	r1, r3
 6048 0090 1046     		mov	r0, r2
 6049 0092 FFF7FEFF 		bl	vListInsert
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6050              		.loc 1 4753 0
 6051 0096 0C4B     		ldr	r3, .L407+24
 6052 0098 1B68     		ldr	r3, [r3]
 6053 009a BA68     		ldr	r2, [r7, #8]
 6054 009c 9A42     		cmp	r2, r3
 6055 009e 02D2     		bcs	.L406
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6056              		.loc 1 4755 0
 6057 00a0 094A     		ldr	r2, .L407+24
 6058 00a2 BB68     		ldr	r3, [r7, #8]
 6059 00a4 1360     		str	r3, [r2]
 6060              	.L406:
 6061              		.loc 1 4801 0
 6062 00a6 00BF     		nop
 6063 00a8 1037     		adds	r7, r7, #16
 6064              	.LCFI236:
 6065              		.cfi_def_cfa_offset 8
 6066 00aa BD46     		mov	sp, r7
 6067              	.LCFI237:
 6068              		.cfi_def_cfa_register 13
 6069              		@ sp needed
 6070 00ac 80BD     		pop	{r7, pc}
 6071              	.L408:
 6072 00ae 00BF     		.align	2
 6073              	.L407:
 6074 00b0 00000000 		.word	xTickCount
 6075 00b4 00000000 		.word	pxCurrentTCB
 6076 00b8 00000000 		.word	uxTopReadyPriority
 6077 00bc 00000000 		.word	xSuspendedTaskList
 6078 00c0 00000000 		.word	pxOverflowDelayedTaskList
 6079 00c4 00000000 		.word	pxDelayedTaskList
 6080 00c8 00000000 		.word	xNextTaskUnblockTime
 6081              		.cfi_endproc
 6082              	.LFE51:
 6084              		.text
 6085              	.Letext0:
ARM GAS  /tmp/cc6ZjiVz.s 			page 196


 6086              		.file 3 "/opt/gcc4mbed/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 6087              		.file 4 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 6088              		.file 5 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/sys/lock.h"
 6089              		.file 6 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/sys/_types.h"
 6090              		.file 7 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/sys/reent.h"
 6091              		.file 8 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 6092              		.file 9 "Inc/FreeRTOSConfig.h"
 6093              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 6094              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 6095              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/cc6ZjiVz.s 			page 197


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/cc6ZjiVz.s:22     .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/cc6ZjiVz.s:19     .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/cc6ZjiVz.s:25     .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/cc6ZjiVz.s:28     .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/cc6ZjiVz.s:31     .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/cc6ZjiVz.s:34     .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/cc6ZjiVz.s:37     .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/cc6ZjiVz.s:40     .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/cc6ZjiVz.s:43     .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/cc6ZjiVz.s:46     .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/cc6ZjiVz.s:49     .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/cc6ZjiVz.s:52     .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/cc6ZjiVz.s:55     .bss.xPendingReadyList:0000000000000000 $d
     /tmp/cc6ZjiVz.s:58     .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/cc6ZjiVz.s:61     .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/cc6ZjiVz.s:64     .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/cc6ZjiVz.s:67     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/cc6ZjiVz.s:70     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/cc6ZjiVz.s:73     .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/cc6ZjiVz.s:76     .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/cc6ZjiVz.s:79     .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/cc6ZjiVz.s:82     .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/cc6ZjiVz.s:85     .bss.xTickCount:0000000000000000 $d
     /tmp/cc6ZjiVz.s:88     .bss.xTickCount:0000000000000000 xTickCount
     /tmp/cc6ZjiVz.s:91     .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/cc6ZjiVz.s:94     .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/cc6ZjiVz.s:97     .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/cc6ZjiVz.s:100    .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/cc6ZjiVz.s:103    .bss.uxPendedTicks:0000000000000000 $d
     /tmp/cc6ZjiVz.s:106    .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/cc6ZjiVz.s:109    .bss.xYieldPending:0000000000000000 $d
     /tmp/cc6ZjiVz.s:112    .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/cc6ZjiVz.s:115    .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/cc6ZjiVz.s:118    .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/cc6ZjiVz.s:121    .bss.uxTaskNumber:0000000000000000 $d
     /tmp/cc6ZjiVz.s:124    .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/cc6ZjiVz.s:127    .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/cc6ZjiVz.s:130    .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/cc6ZjiVz.s:133    .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/cc6ZjiVz.s:136    .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/cc6ZjiVz.s:139    .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/cc6ZjiVz.s:142    .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/cc6ZjiVz.s:145    .text.xTaskCreate:0000000000000000 $t
     /tmp/cc6ZjiVz.s:152    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/cc6ZjiVz.s:262    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/cc6ZjiVz.s:451    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/cc6ZjiVz.s:256    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/cc6ZjiVz.s:445    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/cc6ZjiVz.s:3925   .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/cc6ZjiVz.s:584    .text.prvAddNewTaskToReadyList:00000000000000b8 $d
     /tmp/cc6ZjiVz.s:595    .text.vTaskDelete:0000000000000000 $t
     /tmp/cc6ZjiVz.s:602    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/cc6ZjiVz.s:4122   .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/cc6ZjiVz.s:4168   .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/cc6ZjiVz.s:782    .text.vTaskDelete:00000000000000f4 $d
ARM GAS  /tmp/cc6ZjiVz.s 			page 198


     /tmp/cc6ZjiVz.s:796    .text.vTaskDelay:0000000000000000 $t
     /tmp/cc6ZjiVz.s:803    .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/cc6ZjiVz.s:2157   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/cc6ZjiVz.s:5951   .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/cc6ZjiVz.s:2203   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/cc6ZjiVz.s:894    .text.vTaskDelay:0000000000000060 $d
     /tmp/cc6ZjiVz.s:900    .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/cc6ZjiVz.s:907    .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/cc6ZjiVz.s:962    .text.uxTaskPriorityGet:0000000000000030 $d
     /tmp/cc6ZjiVz.s:967    .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/cc6ZjiVz.s:974    .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/cc6ZjiVz.s:1063   .text.uxTaskPriorityGetFromISR:0000000000000054 $d
     /tmp/cc6ZjiVz.s:1068   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/cc6ZjiVz.s:1075   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/cc6ZjiVz.s:1316   .text.vTaskPrioritySet:000000000000014c $d
     /tmp/cc6ZjiVz.s:1324   .text.vTaskSuspend:0000000000000000 $t
     /tmp/cc6ZjiVz.s:1331   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/cc6ZjiVz.s:2926   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/cc6ZjiVz.s:1510   .text.vTaskSuspend:00000000000000f0 $d
     /tmp/cc6ZjiVz.s:1522   .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/cc6ZjiVz.s:1528   .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/cc6ZjiVz.s:1636   .text.prvTaskIsTaskSuspended:000000000000006c $d
     /tmp/cc6ZjiVz.s:1642   .text.vTaskResume:0000000000000000 $t
     /tmp/cc6ZjiVz.s:1649   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/cc6ZjiVz.s:1778   .text.vTaskResume:00000000000000a8 $d
     /tmp/cc6ZjiVz.s:1786   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/cc6ZjiVz.s:1793   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/cc6ZjiVz.s:1954   .text.xTaskResumeFromISR:00000000000000cc $d
     /tmp/cc6ZjiVz.s:1963   .rodata:0000000000000000 $d
     /tmp/cc6ZjiVz.s:1967   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/cc6ZjiVz.s:1974   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/cc6ZjiVz.s:2076   .text.vTaskStartScheduler:0000000000000074 $d
     /tmp/cc6ZjiVz.s:3869   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/cc6ZjiVz.s:2086   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/cc6ZjiVz.s:2093   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/cc6ZjiVz.s:2145   .text.vTaskEndScheduler:000000000000002c $d
     /tmp/cc6ZjiVz.s:2150   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/cc6ZjiVz.s:2191   .text.vTaskSuspendAll:0000000000000018 $d
     /tmp/cc6ZjiVz.s:2196   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/cc6ZjiVz.s:2664   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/cc6ZjiVz.s:2408   .text.xTaskResumeAll:0000000000000114 $d
     /tmp/cc6ZjiVz.s:2421   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/cc6ZjiVz.s:2428   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/cc6ZjiVz.s:2468   .text.xTaskGetTickCount:000000000000001c $d
     /tmp/cc6ZjiVz.s:2473   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/cc6ZjiVz.s:2480   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/cc6ZjiVz.s:2521   .text.xTaskGetTickCountFromISR:0000000000000020 $d
     /tmp/cc6ZjiVz.s:2526   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/cc6ZjiVz.s:2533   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/cc6ZjiVz.s:2564   .text.uxTaskGetNumberOfTasks:0000000000000014 $d
     /tmp/cc6ZjiVz.s:2569   .text.pcTaskGetName:0000000000000000 $t
     /tmp/cc6ZjiVz.s:2576   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/cc6ZjiVz.s:2652   .text.pcTaskGetName:0000000000000044 $d
     /tmp/cc6ZjiVz.s:2657   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/cc6ZjiVz.s:2904   .text.xTaskIncrementTick:000000000000014c $d
     /tmp/cc6ZjiVz.s:2919   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/cc6ZjiVz.s:3066   .text.vTaskSwitchContext:00000000000000a0 $d
ARM GAS  /tmp/cc6ZjiVz.s 			page 199


     /tmp/cc6ZjiVz.s:3075   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/cc6ZjiVz.s:3082   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/cc6ZjiVz.s:3149   .text.vTaskPlaceOnEventList:0000000000000044 $d
     /tmp/cc6ZjiVz.s:3154   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/cc6ZjiVz.s:3161   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/cc6ZjiVz.s:3260   .text.vTaskPlaceOnUnorderedEventList:000000000000006c $d
     /tmp/cc6ZjiVz.s:3266   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/cc6ZjiVz.s:3273   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/cc6ZjiVz.s:3403   .text.xTaskRemoveFromEventList:00000000000000ac $d
     /tmp/cc6ZjiVz.s:3413   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/cc6ZjiVz.s:3420   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 xTaskRemoveFromUnorderedEventList
     /tmp/cc6ZjiVz.s:3564   .text.xTaskRemoveFromUnorderedEventList:00000000000000b8 $d
     /tmp/cc6ZjiVz.s:3573   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/cc6ZjiVz.s:3580   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/cc6ZjiVz.s:3649   .text.vTaskSetTimeOutState:0000000000000040 $d
     /tmp/cc6ZjiVz.s:3655   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/cc6ZjiVz.s:3662   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/cc6ZjiVz.s:3813   .text.xTaskCheckForTimeOut:00000000000000b4 $d
     /tmp/cc6ZjiVz.s:3819   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/cc6ZjiVz.s:3826   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/cc6ZjiVz.s:3858   .text.vTaskMissedYield:0000000000000014 $d
     /tmp/cc6ZjiVz.s:3863   .text.prvIdleTask:0000000000000000 $t
     /tmp/cc6ZjiVz.s:4020   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/cc6ZjiVz.s:3913   .text.prvIdleTask:0000000000000028 $d
     /tmp/cc6ZjiVz.s:3919   .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/cc6ZjiVz.s:4002   .text.prvInitialiseTaskLists:0000000000000060 $d
     /tmp/cc6ZjiVz.s:4014   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/cc6ZjiVz.s:4109   .text.prvCheckTasksWaitingTermination:000000000000006c $d
     /tmp/cc6ZjiVz.s:4116   .text.prvDeleteTCB:0000000000000000 $t
     /tmp/cc6ZjiVz.s:4162   .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/cc6ZjiVz.s:4237   .text.prvResetNextTaskUnblockTime:0000000000000044 $d
     /tmp/cc6ZjiVz.s:4243   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/cc6ZjiVz.s:4250   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/cc6ZjiVz.s:4290   .text.xTaskGetCurrentTaskHandle:000000000000001c $d
     /tmp/cc6ZjiVz.s:4295   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/cc6ZjiVz.s:4302   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/cc6ZjiVz.s:4362   .text.xTaskGetSchedulerState:0000000000000034 $d
     /tmp/cc6ZjiVz.s:4368   .text.vTaskPriorityInherit:0000000000000000 $t
     /tmp/cc6ZjiVz.s:4375   .text.vTaskPriorityInherit:0000000000000000 vTaskPriorityInherit
     /tmp/cc6ZjiVz.s:4528   .text.vTaskPriorityInherit:00000000000000e0 $d
     /tmp/cc6ZjiVz.s:4535   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/cc6ZjiVz.s:4542   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/cc6ZjiVz.s:4724   .text.xTaskPriorityDisinherit:00000000000000fc $d
     /tmp/cc6ZjiVz.s:4731   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/cc6ZjiVz.s:4738   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/cc6ZjiVz.s:4787   .text.uxTaskResetEventItemValue:000000000000002c $d
     /tmp/cc6ZjiVz.s:4792   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/cc6ZjiVz.s:4799   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/cc6ZjiVz.s:4842   .text.pvTaskIncrementMutexHeldCount:0000000000000024 $d
     /tmp/cc6ZjiVz.s:4847   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/cc6ZjiVz.s:4854   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/cc6ZjiVz.s:4961   .text.ulTaskNotifyTake:0000000000000088 $d
     /tmp/cc6ZjiVz.s:4967   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/cc6ZjiVz.s:4974   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/cc6ZjiVz.s:5100   .text.xTaskNotifyWait:00000000000000ac $d
     /tmp/cc6ZjiVz.s:5106   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/cc6ZjiVz.s:5113   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
ARM GAS  /tmp/cc6ZjiVz.s 			page 200


     /tmp/cc6ZjiVz.s:5193   .text.xTaskGenericNotify:0000000000000060 $d
     /tmp/cc6ZjiVz.s:5198   .text.xTaskGenericNotify:0000000000000074 $t
     /tmp/cc6ZjiVz.s:5340   .text.xTaskGenericNotify:0000000000000130 $d
     /tmp/cc6ZjiVz.s:5348   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/cc6ZjiVz.s:5355   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/cc6ZjiVz.s:5457   .text.xTaskGenericNotifyFromISR:0000000000000080 $d
     /tmp/cc6ZjiVz.s:5462   .text.xTaskGenericNotifyFromISR:0000000000000094 $t
     /tmp/cc6ZjiVz.s:5631   .text.xTaskGenericNotifyFromISR:0000000000000174 $d
     /tmp/cc6ZjiVz.s:5641   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/cc6ZjiVz.s:5648   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/cc6ZjiVz.s:5853   .text.vTaskNotifyGiveFromISR:0000000000000108 $d
     /tmp/cc6ZjiVz.s:5863   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/cc6ZjiVz.s:5870   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/cc6ZjiVz.s:5940   .text.xTaskNotifyStateClear:0000000000000048 $d
     /tmp/cc6ZjiVz.s:5945   .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/cc6ZjiVz.s:6074   .text.prvAddCurrentTaskToDelayedList:00000000000000b0 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
xPortStartScheduler
vPortEndScheduler
vListInsert
vListInitialise
