ARM GAS  /tmp/ccDSLKwL.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	pxCurrentTCB
  18              		.section	.bss.pxCurrentTCB,"aw",%nobits
  19              		.align	2
  22              	pxCurrentTCB:
  23 0000 00000000 		.space	4
  24              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  25              		.align	2
  28              	pxReadyTasksLists:
  29 0000 00000000 		.space	140
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  31              		.align	2
  34              	xDelayedTaskList1:
  35 0000 00000000 		.space	20
  35      00000000 
  35      00000000 
  35      00000000 
  35      00000000 
  36              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  37              		.align	2
  40              	xDelayedTaskList2:
  41 0000 00000000 		.space	20
  41      00000000 
  41      00000000 
  41      00000000 
  41      00000000 
  42              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  43              		.align	2
  46              	pxDelayedTaskList:
  47 0000 00000000 		.space	4
  48              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  49              		.align	2
  52              	pxOverflowDelayedTaskList:
  53 0000 00000000 		.space	4
  54              		.section	.bss.xPendingReadyList,"aw",%nobits
  55              		.align	2
  58              	xPendingReadyList:
  59 0000 00000000 		.space	20
ARM GAS  /tmp/ccDSLKwL.s 			page 2


  59      00000000 
  59      00000000 
  59      00000000 
  59      00000000 
  60              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  61              		.align	2
  64              	xTasksWaitingTermination:
  65 0000 00000000 		.space	20
  65      00000000 
  65      00000000 
  65      00000000 
  65      00000000 
  66              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  67              		.align	2
  70              	uxDeletedTasksWaitingCleanUp:
  71 0000 00000000 		.space	4
  72              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  73              		.align	2
  76              	xSuspendedTaskList:
  77 0000 00000000 		.space	20
  77      00000000 
  77      00000000 
  77      00000000 
  77      00000000 
  78              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  79              		.align	2
  82              	uxCurrentNumberOfTasks:
  83 0000 00000000 		.space	4
  84              		.section	.bss.xTickCount,"aw",%nobits
  85              		.align	2
  88              	xTickCount:
  89 0000 00000000 		.space	4
  90              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  91              		.align	2
  94              	uxTopReadyPriority:
  95 0000 00000000 		.space	4
  96              		.section	.bss.xSchedulerRunning,"aw",%nobits
  97              		.align	2
 100              	xSchedulerRunning:
 101 0000 00000000 		.space	4
 102              		.section	.bss.uxPendedTicks,"aw",%nobits
 103              		.align	2
 106              	uxPendedTicks:
 107 0000 00000000 		.space	4
 108              		.section	.bss.xYieldPending,"aw",%nobits
 109              		.align	2
 112              	xYieldPending:
 113 0000 00000000 		.space	4
 114              		.section	.bss.xNumOfOverflows,"aw",%nobits
 115              		.align	2
 118              	xNumOfOverflows:
 119 0000 00000000 		.space	4
 120              		.section	.bss.uxTaskNumber,"aw",%nobits
 121              		.align	2
 124              	uxTaskNumber:
 125 0000 00000000 		.space	4
 126              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
ARM GAS  /tmp/ccDSLKwL.s 			page 3


 127              		.align	2
 130              	xNextTaskUnblockTime:
 131 0000 00000000 		.space	4
 132              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 133              		.align	2
 136              	xIdleTaskHandle:
 137 0000 00000000 		.space	4
 138              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 139              		.align	2
 142              	uxSchedulerSuspended:
 143 0000 00000000 		.space	4
 144              		.section	.text.xTaskCreate,"ax",%progbits
 145              		.align	1
 146              		.global	xTaskCreate
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu fpv4-sp-d16
 152              	xTaskCreate:
 153              	.LFB5:
 154              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
ARM GAS  /tmp/ccDSLKwL.s 			page 4


  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
ARM GAS  /tmp/ccDSLKwL.s 			page 5


  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
ARM GAS  /tmp/ccDSLKwL.s 			page 6


 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccDSLKwL.s 			page 7


 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccDSLKwL.s 			page 8


 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
ARM GAS  /tmp/ccDSLKwL.s 			page 9


 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static variables must be declared volatile. */
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
ARM GAS  /tmp/ccDSLKwL.s 			page 10


 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFA
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a t
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of e
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint +e956 */
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  /tmp/ccDSLKwL.s 			page 11


 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask );
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvInitialiseTaskLists( void );
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static void prvDeleteTCB( TCB_t *pxTCB );
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvCheckTasksWaitingTermination( void );
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
ARM GAS  /tmp/ccDSLKwL.s 			page 12


 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const Base
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArr
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcN
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte );
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static TickType_t prvGetExpectedIdleTime( void );
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
ARM GAS  /tmp/ccDSLKwL.s 			page 13


 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ); /*lint !e971 Unqualified char types are allowed f
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB );
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccDSLKwL.s 			page 14


 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				this task had a statically allocated stack in case it is
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
ARM GAS  /tmp/ccDSLKwL.s 			page 15


 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const uint16_t usStackDepth,
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 155              		.loc 1 682 0
 156              		.cfi_startproc
 157              		@ args = 8, pretend = 0, frame = 32
 158              		@ frame_needed = 1, uses_anonymous_args = 0
 159 0000 80B5     		push	{r7, lr}
 160              	.LCFI0:
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 7, -8
 163              		.cfi_offset 14, -4
 164 0002 8CB0     		sub	sp, sp, #48
 165              	.LCFI1:
 166              		.cfi_def_cfa_offset 56
 167 0004 04AF     		add	r7, sp, #16
 168              	.LCFI2:
 169              		.cfi_def_cfa 7, 40
 170 0006 F860     		str	r0, [r7, #12]
 171 0008 B960     		str	r1, [r7, #8]
 172 000a 3B60     		str	r3, [r7]
 173 000c 1346     		mov	r3, r2	@ movhi
 174 000e FB80     		strh	r3, [r7, #6]	@ movhi
 175              	.LBB97:
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
ARM GAS  /tmp/ccDSLKwL.s 			page 16


 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 176              		.loc 1 716 0
 177 0010 FB88     		ldrh	r3, [r7, #6]
 178 0012 9B00     		lsls	r3, r3, #2
 179 0014 1846     		mov	r0, r3
 180 0016 FFF7FEFF 		bl	pvPortMalloc
 181 001a 7861     		str	r0, [r7, #20]
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 182              		.loc 1 718 0
 183 001c 7B69     		ldr	r3, [r7, #20]
 184 001e 002B     		cmp	r3, #0
 185 0020 0ED0     		beq	.L2
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 186              		.loc 1 721 0
 187 0022 5420     		movs	r0, #84
 188 0024 FFF7FEFF 		bl	pvPortMalloc
 189 0028 F861     		str	r0, [r7, #28]
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 190              		.loc 1 723 0
 191 002a FB69     		ldr	r3, [r7, #28]
 192 002c 002B     		cmp	r3, #0
 193 002e 03D0     		beq	.L3
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 194              		.loc 1 726 0
 195 0030 FB69     		ldr	r3, [r7, #28]
 196 0032 7A69     		ldr	r2, [r7, #20]
 197 0034 1A63     		str	r2, [r3, #48]
 198 0036 05E0     		b	.L5
 199              	.L3:
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
ARM GAS  /tmp/ccDSLKwL.s 			page 17


 200              		.loc 1 732 0
 201 0038 7869     		ldr	r0, [r7, #20]
 202 003a FFF7FEFF 		bl	vPortFree
 203 003e 01E0     		b	.L5
 204              	.L2:
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 205              		.loc 1 737 0
 206 0040 0023     		movs	r3, #0
 207 0042 FB61     		str	r3, [r7, #28]
 208              	.L5:
 209              	.LBE97:
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 210              		.loc 1 742 0
 211 0044 FB69     		ldr	r3, [r7, #28]
 212 0046 002B     		cmp	r3, #0
 213 0048 13D0     		beq	.L6
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 214              		.loc 1 752 0
 215 004a FA88     		ldrh	r2, [r7, #6]
 216 004c 0023     		movs	r3, #0
 217 004e 0393     		str	r3, [sp, #12]
 218 0050 FB69     		ldr	r3, [r7, #28]
 219 0052 0293     		str	r3, [sp, #8]
 220 0054 FB6A     		ldr	r3, [r7, #44]
 221 0056 0193     		str	r3, [sp, #4]
 222 0058 BB6A     		ldr	r3, [r7, #40]
 223 005a 0093     		str	r3, [sp]
 224 005c 3B68     		ldr	r3, [r7]
 225 005e B968     		ldr	r1, [r7, #8]
 226 0060 F868     		ldr	r0, [r7, #12]
 227 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 228              		.loc 1 753 0
 229 0066 F869     		ldr	r0, [r7, #28]
 230 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 231              		.loc 1 754 0
 232 006c 0123     		movs	r3, #1
 233 006e BB61     		str	r3, [r7, #24]
 234 0070 02E0     		b	.L7
ARM GAS  /tmp/ccDSLKwL.s 			page 18


 235              	.L6:
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 236              		.loc 1 758 0
 237 0072 4FF0FF33 		mov	r3, #-1
 238 0076 BB61     		str	r3, [r7, #24]
 239              	.L7:
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 240              		.loc 1 761 0
 241 0078 BB69     		ldr	r3, [r7, #24]
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 242              		.loc 1 762 0
 243 007a 1846     		mov	r0, r3
 244 007c 2037     		adds	r7, r7, #32
 245              	.LCFI3:
 246              		.cfi_def_cfa_offset 8
 247 007e BD46     		mov	sp, r7
 248              	.LCFI4:
 249              		.cfi_def_cfa_register 13
 250              		@ sp needed
 251 0080 80BD     		pop	{r7, pc}
 252              		.cfi_endproc
 253              	.LFE5:
 255              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 256              		.align	1
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 260              		.fpu fpv4-sp-d16
 262              	prvInitialiseNewTask:
 263              	.LFB6:
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 264              		.loc 1 775 0
 265              		.cfi_startproc
 266              		@ args = 16, pretend = 0, frame = 32
 267              		@ frame_needed = 1, uses_anonymous_args = 0
 268 0000 80B5     		push	{r7, lr}
 269              	.LCFI5:
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
 272              		.cfi_offset 14, -4
ARM GAS  /tmp/ccDSLKwL.s 			page 19


 273 0002 88B0     		sub	sp, sp, #32
 274              	.LCFI6:
 275              		.cfi_def_cfa_offset 40
 276 0004 00AF     		add	r7, sp, #0
 277              	.LCFI7:
 278              		.cfi_def_cfa_register 7
 279 0006 F860     		str	r0, [r7, #12]
 280 0008 B960     		str	r1, [r7, #8]
 281 000a 7A60     		str	r2, [r7, #4]
 282 000c 3B60     		str	r3, [r7]
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 283              		.loc 1 807 0
 284 000e 3B6B     		ldr	r3, [r7, #48]
 285 0010 1A6B     		ldr	r2, [r3, #48]
 286 0012 7B68     		ldr	r3, [r7, #4]
 287 0014 03F18043 		add	r3, r3, #1073741824
 288 0018 013B     		subs	r3, r3, #1
 289 001a 9B00     		lsls	r3, r3, #2
 290 001c 1344     		add	r3, r3, r2
 291 001e BB61     		str	r3, [r7, #24]
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 292              		.loc 1 808 0
 293 0020 BB69     		ldr	r3, [r7, #24]
 294 0022 23F00703 		bic	r3, r3, #7
 295 0026 BB61     		str	r3, [r7, #24]
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccDSLKwL.s 			page 20


 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 296              		.loc 1 811 0
 297 0028 BB69     		ldr	r3, [r7, #24]
 298 002a 03F00703 		and	r3, r3, #7
 299 002e 002B     		cmp	r3, #0
 300 0030 09D0     		beq	.L10
 301              	.LBB98:
 302              	.LBB99:
 303              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
ARM GAS  /tmp/ccDSLKwL.s 			page 21


  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
ARM GAS  /tmp/ccDSLKwL.s 			page 22


 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
ARM GAS  /tmp/ccDSLKwL.s 			page 23


 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccDSLKwL.s 			page 24


 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 304              		.loc 2 237 0 discriminator 1
 305              		.syntax unified
 306              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 307 0032 4FF05003 			mov r3, #80												
 308 0036 83F31188 		msr basepri, r3											
 309 003a BFF36F8F 		isb														
 310 003e BFF34F8F 		dsb														
 311              	
 312              	@ 0 "" 2
 313              		.thumb
 314              		.syntax unified
 315 0042 7B61     		str	r3, [r7, #20]
 316              	.L11:
 317              	.LBE99:
 318              	.LBE98:
 319              		.loc 1 811 0 discriminator 1
 320 0044 FEE7     		b	.L11
 321              	.L10:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 322              		.loc 1 827 0
 323 0046 0023     		movs	r3, #0
 324 0048 FB61     		str	r3, [r7, #28]
 325 004a 12E0     		b	.L12
ARM GAS  /tmp/ccDSLKwL.s 			page 25


 326              	.L15:
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 327              		.loc 1 829 0
 328 004c BA68     		ldr	r2, [r7, #8]
 329 004e FB69     		ldr	r3, [r7, #28]
 330 0050 1344     		add	r3, r3, r2
 331 0052 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 332 0054 3A6B     		ldr	r2, [r7, #48]
 333 0056 FB69     		ldr	r3, [r7, #28]
 334 0058 1344     		add	r3, r3, r2
 335 005a 3433     		adds	r3, r3, #52
 336 005c 0A46     		mov	r2, r1
 337 005e 1A70     		strb	r2, [r3]
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 338              		.loc 1 834 0
 339 0060 BA68     		ldr	r2, [r7, #8]
 340 0062 FB69     		ldr	r3, [r7, #28]
 341 0064 1344     		add	r3, r3, r2
 342 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 343 0068 002B     		cmp	r3, #0
 344 006a 06D0     		beq	.L18
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 345              		.loc 1 827 0 discriminator 2
 346 006c FB69     		ldr	r3, [r7, #28]
 347 006e 0133     		adds	r3, r3, #1
 348 0070 FB61     		str	r3, [r7, #28]
 349              	.L12:
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 350              		.loc 1 827 0 is_stmt 0 discriminator 1
 351 0072 FB69     		ldr	r3, [r7, #28]
 352 0074 0F2B     		cmp	r3, #15
 353 0076 E9D9     		bls	.L15
 354 0078 00E0     		b	.L14
 355              	.L18:
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 356              		.loc 1 836 0 is_stmt 1
 357 007a 00BF     		nop
 358              	.L14:
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 359              		.loc 1 846 0
 360 007c 3B6B     		ldr	r3, [r7, #48]
 361 007e 0022     		movs	r2, #0
ARM GAS  /tmp/ccDSLKwL.s 			page 26


 362 0080 83F84320 		strb	r2, [r3, #67]
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 363              		.loc 1 850 0
 364 0084 BB6A     		ldr	r3, [r7, #40]
 365 0086 062B     		cmp	r3, #6
 366 0088 01D9     		bls	.L16
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 367              		.loc 1 852 0
 368 008a 0623     		movs	r3, #6
 369 008c BB62     		str	r3, [r7, #40]
 370              	.L16:
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 371              		.loc 1 859 0
 372 008e 3B6B     		ldr	r3, [r7, #48]
 373 0090 BA6A     		ldr	r2, [r7, #40]
 374 0092 DA62     		str	r2, [r3, #44]
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 375              		.loc 1 862 0
 376 0094 3B6B     		ldr	r3, [r7, #48]
 377 0096 BA6A     		ldr	r2, [r7, #40]
 378 0098 5A64     		str	r2, [r3, #68]
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 379              		.loc 1 863 0
 380 009a 3B6B     		ldr	r3, [r7, #48]
 381 009c 0022     		movs	r2, #0
 382 009e 9A64     		str	r2, [r3, #72]
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 383              		.loc 1 867 0
 384 00a0 3B6B     		ldr	r3, [r7, #48]
 385 00a2 0433     		adds	r3, r3, #4
 386 00a4 1846     		mov	r0, r3
 387 00a6 FFF7FEFF 		bl	vListInitialiseItem
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 388              		.loc 1 868 0
 389 00aa 3B6B     		ldr	r3, [r7, #48]
 390 00ac 1833     		adds	r3, r3, #24
 391 00ae 1846     		mov	r0, r3
 392 00b0 FFF7FEFF 		bl	vListInitialiseItem
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
ARM GAS  /tmp/ccDSLKwL.s 			page 27


 393              		.loc 1 872 0
 394 00b4 3B6B     		ldr	r3, [r7, #48]
 395 00b6 3A6B     		ldr	r2, [r7, #48]
 396 00b8 1A61     		str	r2, [r3, #16]
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 397              		.loc 1 875 0
 398 00ba BB6A     		ldr	r3, [r7, #40]
 399 00bc C3F10702 		rsb	r2, r3, #7
 400 00c0 3B6B     		ldr	r3, [r7, #48]
 401 00c2 9A61     		str	r2, [r3, #24]
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 402              		.loc 1 876 0
 403 00c4 3B6B     		ldr	r3, [r7, #48]
 404 00c6 3A6B     		ldr	r2, [r7, #48]
 405 00c8 5A62     		str	r2, [r3, #36]
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  /tmp/ccDSLKwL.s 			page 28


 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 406              		.loc 1 918 0
 407 00ca 3B6B     		ldr	r3, [r7, #48]
 408 00cc 0022     		movs	r2, #0
 409 00ce DA64     		str	r2, [r3, #76]
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 410              		.loc 1 919 0
 411 00d0 3B6B     		ldr	r3, [r7, #48]
 412 00d2 0022     		movs	r2, #0
 413 00d4 83F85020 		strb	r2, [r3, #80]
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the	top of stack variable is updated. */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 414              		.loc 1 946 0
 415 00d8 3A68     		ldr	r2, [r7]
 416 00da F968     		ldr	r1, [r7, #12]
 417 00dc B869     		ldr	r0, [r7, #24]
 418 00de FFF7FEFF 		bl	pxPortInitialiseStack
 419 00e2 0246     		mov	r2, r0
 420 00e4 3B6B     		ldr	r3, [r7, #48]
 421 00e6 1A60     		str	r2, [r3]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 422              		.loc 1 950 0
 423 00e8 FB6A     		ldr	r3, [r7, #44]
 424 00ea 002B     		cmp	r3, #0
 425 00ec 02D0     		beq	.L19
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
ARM GAS  /tmp/ccDSLKwL.s 			page 29


 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 426              		.loc 1 954 0
 427 00ee FB6A     		ldr	r3, [r7, #44]
 428 00f0 3A6B     		ldr	r2, [r7, #48]
 429 00f2 1A60     		str	r2, [r3]
 430              	.L19:
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 431              		.loc 1 960 0
 432 00f4 00BF     		nop
 433 00f6 2037     		adds	r7, r7, #32
 434              	.LCFI8:
 435              		.cfi_def_cfa_offset 8
 436 00f8 BD46     		mov	sp, r7
 437              	.LCFI9:
 438              		.cfi_def_cfa_register 13
 439              		@ sp needed
 440 00fa 80BD     		pop	{r7, pc}
 441              		.cfi_endproc
 442              	.LFE6:
 444              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 445              		.align	1
 446              		.syntax unified
 447              		.thumb
 448              		.thumb_func
 449              		.fpu fpv4-sp-d16
 451              	prvAddNewTaskToReadyList:
 452              	.LFB7:
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 453              		.loc 1 964 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 8
 456              		@ frame_needed = 1, uses_anonymous_args = 0
 457 0000 80B5     		push	{r7, lr}
 458              	.LCFI10:
 459              		.cfi_def_cfa_offset 8
 460              		.cfi_offset 7, -8
 461              		.cfi_offset 14, -4
 462 0002 82B0     		sub	sp, sp, #8
 463              	.LCFI11:
 464              		.cfi_def_cfa_offset 16
 465 0004 00AF     		add	r7, sp, #0
 466              	.LCFI12:
 467              		.cfi_def_cfa_register 7
 468 0006 7860     		str	r0, [r7, #4]
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 469              		.loc 1 967 0
 470 0008 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  /tmp/ccDSLKwL.s 			page 30


 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 471              		.loc 1 969 0
 472 000c 2A4B     		ldr	r3, .L25
 473 000e 1B68     		ldr	r3, [r3]
 474 0010 0133     		adds	r3, r3, #1
 475 0012 294A     		ldr	r2, .L25
 476 0014 1360     		str	r3, [r2]
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 477              		.loc 1 970 0
 478 0016 294B     		ldr	r3, .L25+4
 479 0018 1B68     		ldr	r3, [r3]
 480 001a 002B     		cmp	r3, #0
 481 001c 09D1     		bne	.L21
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 482              		.loc 1 974 0
 483 001e 274A     		ldr	r2, .L25+4
 484 0020 7B68     		ldr	r3, [r7, #4]
 485 0022 1360     		str	r3, [r2]
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 486              		.loc 1 976 0
 487 0024 244B     		ldr	r3, .L25
 488 0026 1B68     		ldr	r3, [r3]
 489 0028 012B     		cmp	r3, #1
 490 002a 10D1     		bne	.L22
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 491              		.loc 1 981 0
 492 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 493 0030 0DE0     		b	.L22
 494              	.L21:
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 495              		.loc 1 993 0
 496 0032 234B     		ldr	r3, .L25+8
 497 0034 1B68     		ldr	r3, [r3]
 498 0036 002B     		cmp	r3, #0
 499 0038 09D1     		bne	.L22
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
ARM GAS  /tmp/ccDSLKwL.s 			page 31


 500              		.loc 1 995 0
 501 003a 204B     		ldr	r3, .L25+4
 502 003c 1B68     		ldr	r3, [r3]
 503 003e DA6A     		ldr	r2, [r3, #44]
 504 0040 7B68     		ldr	r3, [r7, #4]
 505 0042 DB6A     		ldr	r3, [r3, #44]
 506 0044 9A42     		cmp	r2, r3
 507 0046 02D8     		bhi	.L22
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 508              		.loc 1 997 0
 509 0048 1C4A     		ldr	r2, .L25+4
 510 004a 7B68     		ldr	r3, [r7, #4]
 511 004c 1360     		str	r3, [r2]
 512              	.L22:
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 513              		.loc 1 1010 0
 514 004e 1D4B     		ldr	r3, .L25+12
 515 0050 1B68     		ldr	r3, [r3]
 516 0052 0133     		adds	r3, r3, #1
 517 0054 1B4A     		ldr	r2, .L25+12
 518 0056 1360     		str	r3, [r2]
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 519              		.loc 1 1020 0
 520 0058 7B68     		ldr	r3, [r7, #4]
 521 005a DB6A     		ldr	r3, [r3, #44]
 522 005c 0122     		movs	r2, #1
 523 005e 9A40     		lsls	r2, r2, r3
 524 0060 194B     		ldr	r3, .L25+16
 525 0062 1B68     		ldr	r3, [r3]
 526 0064 1343     		orrs	r3, r3, r2
 527 0066 184A     		ldr	r2, .L25+16
 528 0068 1360     		str	r3, [r2]
 529 006a 7B68     		ldr	r3, [r7, #4]
 530 006c DA6A     		ldr	r2, [r3, #44]
 531 006e 1346     		mov	r3, r2
ARM GAS  /tmp/ccDSLKwL.s 			page 32


 532 0070 9B00     		lsls	r3, r3, #2
 533 0072 1344     		add	r3, r3, r2
 534 0074 9B00     		lsls	r3, r3, #2
 535 0076 154A     		ldr	r2, .L25+20
 536 0078 1A44     		add	r2, r2, r3
 537 007a 7B68     		ldr	r3, [r7, #4]
 538 007c 0433     		adds	r3, r3, #4
 539 007e 1946     		mov	r1, r3
 540 0080 1046     		mov	r0, r2
 541 0082 FFF7FEFF 		bl	vListInsertEnd
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 542              		.loc 1 1024 0
 543 0086 FFF7FEFF 		bl	vPortExitCritical
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 544              		.loc 1 1026 0
 545 008a 0D4B     		ldr	r3, .L25+8
 546 008c 1B68     		ldr	r3, [r3]
 547 008e 002B     		cmp	r3, #0
 548 0090 0ED0     		beq	.L24
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 549              		.loc 1 1030 0
 550 0092 0A4B     		ldr	r3, .L25+4
 551 0094 1B68     		ldr	r3, [r3]
 552 0096 DA6A     		ldr	r2, [r3, #44]
 553 0098 7B68     		ldr	r3, [r7, #4]
 554 009a DB6A     		ldr	r3, [r3, #44]
 555 009c 9A42     		cmp	r2, r3
 556 009e 07D2     		bcs	.L24
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 557              		.loc 1 1032 0
 558 00a0 0B4B     		ldr	r3, .L25+24
 559 00a2 4FF08052 		mov	r2, #268435456
 560 00a6 1A60     		str	r2, [r3]
 561              		.syntax unified
 562              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 563 00a8 BFF34F8F 		dsb
 564              	@ 0 "" 2
 565              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 566 00ac BFF36F8F 		isb
 567              	@ 0 "" 2
 568              		.thumb
 569              		.syntax unified
 570              	.L24:
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccDSLKwL.s 			page 33


1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 571              		.loc 1 1043 0
 572 00b0 00BF     		nop
 573 00b2 0837     		adds	r7, r7, #8
 574              	.LCFI13:
 575              		.cfi_def_cfa_offset 8
 576 00b4 BD46     		mov	sp, r7
 577              	.LCFI14:
 578              		.cfi_def_cfa_register 13
 579              		@ sp needed
 580 00b6 80BD     		pop	{r7, pc}
 581              	.L26:
 582              		.align	2
 583              	.L25:
 584 00b8 00000000 		.word	uxCurrentNumberOfTasks
 585 00bc 00000000 		.word	pxCurrentTCB
 586 00c0 00000000 		.word	xSchedulerRunning
 587 00c4 00000000 		.word	uxTaskNumber
 588 00c8 00000000 		.word	uxTopReadyPriority
 589 00cc 00000000 		.word	pxReadyTasksLists
 590 00d0 04ED00E0 		.word	-536810236
 591              		.cfi_endproc
 592              	.LFE7:
 594              		.section	.text.vTaskDelete,"ax",%progbits
 595              		.align	1
 596              		.global	vTaskDelete
 597              		.syntax unified
 598              		.thumb
 599              		.thumb_func
 600              		.fpu fpv4-sp-d16
 602              	vTaskDelete:
 603              	.LFB8:
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 604              		.loc 1 1049 0
 605              		.cfi_startproc
 606              		@ args = 0, pretend = 0, frame = 16
 607              		@ frame_needed = 1, uses_anonymous_args = 0
 608 0000 80B5     		push	{r7, lr}
 609              	.LCFI15:
 610              		.cfi_def_cfa_offset 8
 611              		.cfi_offset 7, -8
 612              		.cfi_offset 14, -4
 613 0002 84B0     		sub	sp, sp, #16
 614              	.LCFI16:
 615              		.cfi_def_cfa_offset 24
 616 0004 00AF     		add	r7, sp, #0
 617              	.LCFI17:
 618              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccDSLKwL.s 			page 34


 619 0006 7860     		str	r0, [r7, #4]
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 620              		.loc 1 1052 0
 621 0008 FFF7FEFF 		bl	vPortEnterCritical
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 622              		.loc 1 1056 0
 623 000c 7B68     		ldr	r3, [r7, #4]
 624 000e 002B     		cmp	r3, #0
 625 0010 02D1     		bne	.L28
 626              		.loc 1 1056 0 is_stmt 0 discriminator 1
 627 0012 384B     		ldr	r3, .L39
 628 0014 1B68     		ldr	r3, [r3]
 629 0016 00E0     		b	.L29
 630              	.L28:
 631              		.loc 1 1056 0 discriminator 2
 632 0018 7B68     		ldr	r3, [r7, #4]
 633              	.L29:
 634              		.loc 1 1056 0 discriminator 4
 635 001a FB60     		str	r3, [r7, #12]
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 636              		.loc 1 1059 0 is_stmt 1 discriminator 4
 637 001c FB68     		ldr	r3, [r7, #12]
 638 001e 0433     		adds	r3, r3, #4
 639 0020 1846     		mov	r0, r3
 640 0022 FFF7FEFF 		bl	uxListRemove
 641 0026 0346     		mov	r3, r0
 642 0028 002B     		cmp	r3, #0
 643 002a 15D1     		bne	.L30
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 644              		.loc 1 1061 0
 645 002c FB68     		ldr	r3, [r7, #12]
 646 002e DA6A     		ldr	r2, [r3, #44]
 647 0030 3149     		ldr	r1, .L39+4
 648 0032 1346     		mov	r3, r2
 649 0034 9B00     		lsls	r3, r3, #2
 650 0036 1344     		add	r3, r3, r2
 651 0038 9B00     		lsls	r3, r3, #2
 652 003a 0B44     		add	r3, r3, r1
 653 003c 1B68     		ldr	r3, [r3]
 654 003e 002B     		cmp	r3, #0
 655 0040 0AD1     		bne	.L30
 656              		.loc 1 1061 0 is_stmt 0 discriminator 1
 657 0042 FB68     		ldr	r3, [r7, #12]
 658 0044 DB6A     		ldr	r3, [r3, #44]
 659 0046 0122     		movs	r2, #1
 660 0048 02FA03F3 		lsl	r3, r2, r3
 661 004c DA43     		mvns	r2, r3
 662 004e 2B4B     		ldr	r3, .L39+8
 663 0050 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccDSLKwL.s 			page 35


 664 0052 1340     		ands	r3, r3, r2
 665 0054 294A     		ldr	r2, .L39+8
 666 0056 1360     		str	r3, [r2]
 667              	.L30:
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 668              		.loc 1 1069 0 is_stmt 1
 669 0058 FB68     		ldr	r3, [r7, #12]
 670 005a 9B6A     		ldr	r3, [r3, #40]
 671 005c 002B     		cmp	r3, #0
 672 005e 04D0     		beq	.L32
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 673              		.loc 1 1071 0
 674 0060 FB68     		ldr	r3, [r7, #12]
 675 0062 1833     		adds	r3, r3, #24
 676 0064 1846     		mov	r0, r3
 677 0066 FFF7FEFF 		bl	uxListRemove
 678              	.L32:
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 679              		.loc 1 1082 0
 680 006a 254B     		ldr	r3, .L39+12
 681 006c 1B68     		ldr	r3, [r3]
 682 006e 0133     		adds	r3, r3, #1
 683 0070 234A     		ldr	r2, .L39+12
 684 0072 1360     		str	r3, [r2]
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 685              		.loc 1 1084 0
 686 0074 1F4B     		ldr	r3, .L39
 687 0076 1B68     		ldr	r3, [r3]
 688 0078 FA68     		ldr	r2, [r7, #12]
 689 007a 9A42     		cmp	r2, r3
 690 007c 0BD1     		bne	.L33
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
ARM GAS  /tmp/ccDSLKwL.s 			page 36


 691              		.loc 1 1091 0
 692 007e FB68     		ldr	r3, [r7, #12]
 693 0080 0433     		adds	r3, r3, #4
 694 0082 1946     		mov	r1, r3
 695 0084 1F48     		ldr	r0, .L39+16
 696 0086 FFF7FEFF 		bl	vListInsertEnd
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 697              		.loc 1 1096 0
 698 008a 1F4B     		ldr	r3, .L39+20
 699 008c 1B68     		ldr	r3, [r3]
 700 008e 0133     		adds	r3, r3, #1
 701 0090 1D4A     		ldr	r2, .L39+20
 702 0092 1360     		str	r3, [r2]
 703 0094 09E0     		b	.L34
 704              	.L33:
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 705              		.loc 1 1107 0
 706 0096 1D4B     		ldr	r3, .L39+24
 707 0098 1B68     		ldr	r3, [r3]
 708 009a 013B     		subs	r3, r3, #1
 709 009c 1B4A     		ldr	r2, .L39+24
 710 009e 1360     		str	r3, [r2]
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 711              		.loc 1 1108 0
 712 00a0 F868     		ldr	r0, [r7, #12]
 713 00a2 FFF7FEFF 		bl	prvDeleteTCB
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 714              		.loc 1 1112 0
 715 00a6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 716              	.L34:
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 717              		.loc 1 1117 0
 718 00aa FFF7FEFF 		bl	vPortExitCritical
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
ARM GAS  /tmp/ccDSLKwL.s 			page 37


1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 719              		.loc 1 1121 0
 720 00ae 184B     		ldr	r3, .L39+28
 721 00b0 1B68     		ldr	r3, [r3]
 722 00b2 002B     		cmp	r3, #0
 723 00b4 1AD0     		beq	.L38
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 724              		.loc 1 1123 0
 725 00b6 0F4B     		ldr	r3, .L39
 726 00b8 1B68     		ldr	r3, [r3]
 727 00ba FA68     		ldr	r2, [r7, #12]
 728 00bc 9A42     		cmp	r2, r3
 729 00be 15D1     		bne	.L38
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 730              		.loc 1 1125 0
 731 00c0 144B     		ldr	r3, .L39+32
 732 00c2 1B68     		ldr	r3, [r3]
 733 00c4 002B     		cmp	r3, #0
 734 00c6 09D0     		beq	.L36
 735              	.LBB100:
 736              	.LBB101:
 737              		.loc 2 237 0 discriminator 1
 738              		.syntax unified
 739              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 740 00c8 4FF05003 			mov r3, #80												
 741 00cc 83F31188 		msr basepri, r3											
 742 00d0 BFF36F8F 		isb														
 743 00d4 BFF34F8F 		dsb														
 744              	
 745              	@ 0 "" 2
 746              		.thumb
 747              		.syntax unified
 748 00d8 BB60     		str	r3, [r7, #8]
 749              	.L37:
 750              	.LBE101:
 751              	.LBE100:
 752              		.loc 1 1125 0 discriminator 1
 753 00da FEE7     		b	.L37
 754              	.L36:
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 755              		.loc 1 1126 0
 756 00dc 0E4B     		ldr	r3, .L39+36
 757 00de 4FF08052 		mov	r2, #268435456
 758 00e2 1A60     		str	r2, [r3]
 759              		.syntax unified
 760              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 761 00e4 BFF34F8F 		dsb
 762              	@ 0 "" 2
 763              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 764 00e8 BFF36F8F 		isb
 765              	@ 0 "" 2
 766              		.thumb
 767              		.syntax unified
 768              	.L38:
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccDSLKwL.s 			page 38


1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 769              		.loc 1 1133 0
 770 00ec 00BF     		nop
 771 00ee 1037     		adds	r7, r7, #16
 772              	.LCFI18:
 773              		.cfi_def_cfa_offset 8
 774 00f0 BD46     		mov	sp, r7
 775              	.LCFI19:
 776              		.cfi_def_cfa_register 13
 777              		@ sp needed
 778 00f2 80BD     		pop	{r7, pc}
 779              	.L40:
 780              		.align	2
 781              	.L39:
 782 00f4 00000000 		.word	pxCurrentTCB
 783 00f8 00000000 		.word	pxReadyTasksLists
 784 00fc 00000000 		.word	uxTopReadyPriority
 785 0100 00000000 		.word	uxTaskNumber
 786 0104 00000000 		.word	xTasksWaitingTermination
 787 0108 00000000 		.word	uxDeletedTasksWaitingCleanUp
 788 010c 00000000 		.word	uxCurrentNumberOfTasks
 789 0110 00000000 		.word	xSchedulerRunning
 790 0114 00000000 		.word	uxSchedulerSuspended
 791 0118 04ED00E0 		.word	-536810236
 792              		.cfi_endproc
 793              	.LFE8:
 795              		.section	.text.vTaskDelayUntil,"ax",%progbits
 796              		.align	1
 797              		.global	vTaskDelayUntil
 798              		.syntax unified
 799              		.thumb
 800              		.thumb_func
 801              		.fpu fpv4-sp-d16
 803              	vTaskDelayUntil:
 804              	.LFB9:
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 805              		.loc 1 1141 0
 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 40
 808              		@ frame_needed = 1, uses_anonymous_args = 0
 809 0000 80B5     		push	{r7, lr}
 810              	.LCFI20:
 811              		.cfi_def_cfa_offset 8
 812              		.cfi_offset 7, -8
 813              		.cfi_offset 14, -4
ARM GAS  /tmp/ccDSLKwL.s 			page 39


 814 0002 8AB0     		sub	sp, sp, #40
 815              	.LCFI21:
 816              		.cfi_def_cfa_offset 48
 817 0004 00AF     		add	r7, sp, #0
 818              	.LCFI22:
 819              		.cfi_def_cfa_register 7
 820 0006 7860     		str	r0, [r7, #4]
 821 0008 3960     		str	r1, [r7]
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 822              		.loc 1 1143 0
 823 000a 0023     		movs	r3, #0
 824 000c 7B62     		str	r3, [r7, #36]
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 825              		.loc 1 1145 0
 826 000e 7B68     		ldr	r3, [r7, #4]
 827 0010 002B     		cmp	r3, #0
 828 0012 09D1     		bne	.L42
 829              	.LBB102:
 830              	.LBB103:
 831              		.loc 2 237 0 discriminator 1
 832              		.syntax unified
 833              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 834 0014 4FF05003 			mov r3, #80												
 835 0018 83F31188 		msr basepri, r3											
 836 001c BFF36F8F 		isb														
 837 0020 BFF34F8F 		dsb														
 838              	
 839              	@ 0 "" 2
 840              		.thumb
 841              		.syntax unified
 842 0024 7B61     		str	r3, [r7, #20]
 843              	.L43:
 844              	.LBE103:
 845              	.LBE102:
 846              		.loc 1 1145 0 discriminator 1
 847 0026 FEE7     		b	.L43
 848              	.L42:
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 849              		.loc 1 1146 0
 850 0028 3B68     		ldr	r3, [r7]
 851 002a 002B     		cmp	r3, #0
 852 002c 09D1     		bne	.L44
 853              	.LBB104:
 854              	.LBB105:
 855              		.loc 2 237 0 discriminator 1
 856              		.syntax unified
 857              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 858 002e 4FF05003 			mov r3, #80												
 859 0032 83F31188 		msr basepri, r3											
 860 0036 BFF36F8F 		isb														
 861 003a BFF34F8F 		dsb														
 862              	
 863              	@ 0 "" 2
 864              		.thumb
 865              		.syntax unified
ARM GAS  /tmp/ccDSLKwL.s 			page 40


 866 003e 3B61     		str	r3, [r7, #16]
 867              	.L45:
 868              	.LBE105:
 869              	.LBE104:
 870              		.loc 1 1146 0 discriminator 2
 871 0040 FEE7     		b	.L45
 872              	.L44:
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 873              		.loc 1 1147 0
 874 0042 294B     		ldr	r3, .L54
 875 0044 1B68     		ldr	r3, [r3]
 876 0046 002B     		cmp	r3, #0
 877 0048 09D0     		beq	.L46
 878              	.LBB106:
 879              	.LBB107:
 880              		.loc 2 237 0 discriminator 1
 881              		.syntax unified
 882              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 883 004a 4FF05003 			mov r3, #80												
 884 004e 83F31188 		msr basepri, r3											
 885 0052 BFF36F8F 		isb														
 886 0056 BFF34F8F 		dsb														
 887              	
 888              	@ 0 "" 2
 889              		.thumb
 890              		.syntax unified
 891 005a FB60     		str	r3, [r7, #12]
 892              	.L47:
 893              	.LBE107:
 894              	.LBE106:
 895              		.loc 1 1147 0 discriminator 3
 896 005c FEE7     		b	.L47
 897              	.L46:
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 898              		.loc 1 1149 0
 899 005e FFF7FEFF 		bl	vTaskSuspendAll
 900              	.LBB108:
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 901              		.loc 1 1153 0
 902 0062 224B     		ldr	r3, .L54+4
 903 0064 1B68     		ldr	r3, [r3]
 904 0066 3B62     		str	r3, [r7, #32]
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 905              		.loc 1 1156 0
 906 0068 7B68     		ldr	r3, [r7, #4]
 907 006a 1A68     		ldr	r2, [r3]
 908 006c 3B68     		ldr	r3, [r7]
 909 006e 1344     		add	r3, r3, r2
 910 0070 FB61     		str	r3, [r7, #28]
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
ARM GAS  /tmp/ccDSLKwL.s 			page 41


 911              		.loc 1 1158 0
 912 0072 7B68     		ldr	r3, [r7, #4]
 913 0074 1A68     		ldr	r2, [r3]
 914 0076 3B6A     		ldr	r3, [r7, #32]
 915 0078 9A42     		cmp	r2, r3
 916 007a 0BD9     		bls	.L48
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 917              		.loc 1 1165 0
 918 007c 7B68     		ldr	r3, [r7, #4]
 919 007e 1A68     		ldr	r2, [r3]
 920 0080 FB69     		ldr	r3, [r7, #28]
 921 0082 9A42     		cmp	r2, r3
 922 0084 11D9     		bls	.L49
 923              		.loc 1 1165 0 is_stmt 0 discriminator 1
 924 0086 FA69     		ldr	r2, [r7, #28]
 925 0088 3B6A     		ldr	r3, [r7, #32]
 926 008a 9A42     		cmp	r2, r3
 927 008c 0DD9     		bls	.L49
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 928              		.loc 1 1167 0 is_stmt 1
 929 008e 0123     		movs	r3, #1
 930 0090 7B62     		str	r3, [r7, #36]
 931 0092 0AE0     		b	.L49
 932              	.L48:
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 933              		.loc 1 1179 0
 934 0094 7B68     		ldr	r3, [r7, #4]
 935 0096 1A68     		ldr	r2, [r3]
 936 0098 FB69     		ldr	r3, [r7, #28]
 937 009a 9A42     		cmp	r2, r3
 938 009c 03D8     		bhi	.L50
 939              		.loc 1 1179 0 is_stmt 0 discriminator 1
 940 009e FA69     		ldr	r2, [r7, #28]
 941 00a0 3B6A     		ldr	r3, [r7, #32]
 942 00a2 9A42     		cmp	r2, r3
 943 00a4 01D9     		bls	.L49
 944              	.L50:
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
ARM GAS  /tmp/ccDSLKwL.s 			page 42


 945              		.loc 1 1181 0 is_stmt 1
 946 00a6 0123     		movs	r3, #1
 947 00a8 7B62     		str	r3, [r7, #36]
 948              	.L49:
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 949              		.loc 1 1190 0
 950 00aa 7B68     		ldr	r3, [r7, #4]
 951 00ac FA69     		ldr	r2, [r7, #28]
 952 00ae 1A60     		str	r2, [r3]
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 953              		.loc 1 1192 0
 954 00b0 7B6A     		ldr	r3, [r7, #36]
 955 00b2 002B     		cmp	r3, #0
 956 00b4 06D0     		beq	.L51
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 957              		.loc 1 1198 0
 958 00b6 FA69     		ldr	r2, [r7, #28]
 959 00b8 3B6A     		ldr	r3, [r7, #32]
 960 00ba D31A     		subs	r3, r2, r3
 961 00bc 0021     		movs	r1, #0
 962 00be 1846     		mov	r0, r3
 963 00c0 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 964              	.L51:
 965              	.LBE108:
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 966              		.loc 1 1205 0
 967 00c4 FFF7FEFF 		bl	xTaskResumeAll
 968 00c8 B861     		str	r0, [r7, #24]
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 969              		.loc 1 1209 0
 970 00ca BB69     		ldr	r3, [r7, #24]
 971 00cc 002B     		cmp	r3, #0
 972 00ce 07D1     		bne	.L53
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccDSLKwL.s 			page 43


1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 973              		.loc 1 1211 0
 974 00d0 074B     		ldr	r3, .L54+8
 975 00d2 4FF08052 		mov	r2, #268435456
 976 00d6 1A60     		str	r2, [r3]
 977              		.syntax unified
 978              	@ 1211 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 979 00d8 BFF34F8F 		dsb
 980              	@ 0 "" 2
 981              	@ 1211 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 982 00dc BFF36F8F 		isb
 983              	@ 0 "" 2
 984              		.thumb
 985              		.syntax unified
 986              	.L53:
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 987              		.loc 1 1217 0
 988 00e0 00BF     		nop
 989 00e2 2837     		adds	r7, r7, #40
 990              	.LCFI23:
 991              		.cfi_def_cfa_offset 8
 992 00e4 BD46     		mov	sp, r7
 993              	.LCFI24:
 994              		.cfi_def_cfa_register 13
 995              		@ sp needed
 996 00e6 80BD     		pop	{r7, pc}
 997              	.L55:
 998              		.align	2
 999              	.L54:
 1000 00e8 00000000 		.word	uxSchedulerSuspended
 1001 00ec 00000000 		.word	xTickCount
 1002 00f0 04ED00E0 		.word	-536810236
 1003              		.cfi_endproc
 1004              	.LFE9:
 1006              		.section	.text.vTaskDelay,"ax",%progbits
 1007              		.align	1
 1008              		.global	vTaskDelay
 1009              		.syntax unified
 1010              		.thumb
 1011              		.thumb_func
 1012              		.fpu fpv4-sp-d16
 1014              	vTaskDelay:
 1015              	.LFB10:
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1016              		.loc 1 1225 0
ARM GAS  /tmp/ccDSLKwL.s 			page 44


 1017              		.cfi_startproc
 1018              		@ args = 0, pretend = 0, frame = 16
 1019              		@ frame_needed = 1, uses_anonymous_args = 0
 1020 0000 80B5     		push	{r7, lr}
 1021              	.LCFI25:
 1022              		.cfi_def_cfa_offset 8
 1023              		.cfi_offset 7, -8
 1024              		.cfi_offset 14, -4
 1025 0002 84B0     		sub	sp, sp, #16
 1026              	.LCFI26:
 1027              		.cfi_def_cfa_offset 24
 1028 0004 00AF     		add	r7, sp, #0
 1029              	.LCFI27:
 1030              		.cfi_def_cfa_register 7
 1031 0006 7860     		str	r0, [r7, #4]
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1032              		.loc 1 1226 0
 1033 0008 0023     		movs	r3, #0
 1034 000a FB60     		str	r3, [r7, #12]
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 1035              		.loc 1 1229 0
 1036 000c 7B68     		ldr	r3, [r7, #4]
 1037 000e 002B     		cmp	r3, #0
 1038 0010 16D0     		beq	.L57
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 1039              		.loc 1 1231 0
 1040 0012 134B     		ldr	r3, .L62
 1041 0014 1B68     		ldr	r3, [r3]
 1042 0016 002B     		cmp	r3, #0
 1043 0018 09D0     		beq	.L58
 1044              	.LBB109:
 1045              	.LBB110:
 1046              		.loc 2 237 0 discriminator 1
 1047              		.syntax unified
 1048              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1049 001a 4FF05003 			mov r3, #80												
 1050 001e 83F31188 		msr basepri, r3											
 1051 0022 BFF36F8F 		isb														
 1052 0026 BFF34F8F 		dsb														
 1053              	
 1054              	@ 0 "" 2
 1055              		.thumb
 1056              		.syntax unified
 1057 002a BB60     		str	r3, [r7, #8]
 1058              	.L59:
 1059              	.LBE110:
 1060              	.LBE109:
 1061              		.loc 1 1231 0 discriminator 1
 1062 002c FEE7     		b	.L59
 1063              	.L58:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1064              		.loc 1 1232 0
 1065 002e FFF7FEFF 		bl	vTaskSuspendAll
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccDSLKwL.s 			page 45


1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1066              		.loc 1 1243 0
 1067 0032 0021     		movs	r1, #0
 1068 0034 7868     		ldr	r0, [r7, #4]
 1069 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1070              		.loc 1 1245 0
 1071 003a FFF7FEFF 		bl	xTaskResumeAll
 1072 003e F860     		str	r0, [r7, #12]
 1073              	.L57:
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1074              		.loc 1 1254 0
 1075 0040 FB68     		ldr	r3, [r7, #12]
 1076 0042 002B     		cmp	r3, #0
 1077 0044 07D1     		bne	.L61
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1078              		.loc 1 1256 0
 1079 0046 074B     		ldr	r3, .L62+4
 1080 0048 4FF08052 		mov	r2, #268435456
 1081 004c 1A60     		str	r2, [r3]
 1082              		.syntax unified
 1083              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1084 004e BFF34F8F 		dsb
 1085              	@ 0 "" 2
 1086              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1087 0052 BFF36F8F 		isb
 1088              	@ 0 "" 2
 1089              		.thumb
 1090              		.syntax unified
 1091              	.L61:
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1092              		.loc 1 1262 0
 1093 0056 00BF     		nop
ARM GAS  /tmp/ccDSLKwL.s 			page 46


 1094 0058 1037     		adds	r7, r7, #16
 1095              	.LCFI28:
 1096              		.cfi_def_cfa_offset 8
 1097 005a BD46     		mov	sp, r7
 1098              	.LCFI29:
 1099              		.cfi_def_cfa_register 13
 1100              		@ sp needed
 1101 005c 80BD     		pop	{r7, pc}
 1102              	.L63:
 1103 005e 00BF     		.align	2
 1104              	.L62:
 1105 0060 00000000 		.word	uxSchedulerSuspended
 1106 0064 04ED00E0 		.word	-536810236
 1107              		.cfi_endproc
 1108              	.LFE10:
 1110              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1111              		.align	1
 1112              		.global	uxTaskPriorityGet
 1113              		.syntax unified
 1114              		.thumb
 1115              		.thumb_func
 1116              		.fpu fpv4-sp-d16
 1118              	uxTaskPriorityGet:
 1119              	.LFB11:
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccDSLKwL.s 			page 47


1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1120              		.loc 1 1341 0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 16
 1123              		@ frame_needed = 1, uses_anonymous_args = 0
 1124 0000 80B5     		push	{r7, lr}
 1125              	.LCFI30:
 1126              		.cfi_def_cfa_offset 8
 1127              		.cfi_offset 7, -8
 1128              		.cfi_offset 14, -4
 1129 0002 84B0     		sub	sp, sp, #16
 1130              	.LCFI31:
ARM GAS  /tmp/ccDSLKwL.s 			page 48


 1131              		.cfi_def_cfa_offset 24
 1132 0004 00AF     		add	r7, sp, #0
 1133              	.LCFI32:
 1134              		.cfi_def_cfa_register 7
 1135 0006 7860     		str	r0, [r7, #4]
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1136              		.loc 1 1345 0
 1137 0008 FFF7FEFF 		bl	vPortEnterCritical
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1138              		.loc 1 1349 0
 1139 000c 7B68     		ldr	r3, [r7, #4]
 1140 000e 002B     		cmp	r3, #0
 1141 0010 02D1     		bne	.L65
 1142              		.loc 1 1349 0 is_stmt 0 discriminator 1
 1143 0012 074B     		ldr	r3, .L68
 1144 0014 1B68     		ldr	r3, [r3]
 1145 0016 00E0     		b	.L66
 1146              	.L65:
 1147              		.loc 1 1349 0 discriminator 2
 1148 0018 7B68     		ldr	r3, [r7, #4]
 1149              	.L66:
 1150              		.loc 1 1349 0 discriminator 4
 1151 001a FB60     		str	r3, [r7, #12]
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1152              		.loc 1 1350 0 is_stmt 1 discriminator 4
 1153 001c FB68     		ldr	r3, [r7, #12]
 1154 001e DB6A     		ldr	r3, [r3, #44]
 1155 0020 BB60     		str	r3, [r7, #8]
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1156              		.loc 1 1352 0 discriminator 4
 1157 0022 FFF7FEFF 		bl	vPortExitCritical
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1158              		.loc 1 1354 0 discriminator 4
 1159 0026 BB68     		ldr	r3, [r7, #8]
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1160              		.loc 1 1355 0 discriminator 4
 1161 0028 1846     		mov	r0, r3
 1162 002a 1037     		adds	r7, r7, #16
 1163              	.LCFI33:
 1164              		.cfi_def_cfa_offset 8
 1165 002c BD46     		mov	sp, r7
 1166              	.LCFI34:
 1167              		.cfi_def_cfa_register 13
 1168              		@ sp needed
 1169 002e 80BD     		pop	{r7, pc}
 1170              	.L69:
 1171              		.align	2
 1172              	.L68:
 1173 0030 00000000 		.word	pxCurrentTCB
ARM GAS  /tmp/ccDSLKwL.s 			page 49


 1174              		.cfi_endproc
 1175              	.LFE11:
 1177              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1178              		.align	1
 1179              		.global	uxTaskPriorityGetFromISR
 1180              		.syntax unified
 1181              		.thumb
 1182              		.thumb_func
 1183              		.fpu fpv4-sp-d16
 1185              	uxTaskPriorityGetFromISR:
 1186              	.LFB12:
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1187              		.loc 1 1363 0
 1188              		.cfi_startproc
 1189              		@ args = 0, pretend = 0, frame = 32
 1190              		@ frame_needed = 1, uses_anonymous_args = 0
 1191 0000 80B5     		push	{r7, lr}
 1192              	.LCFI35:
 1193              		.cfi_def_cfa_offset 8
 1194              		.cfi_offset 7, -8
 1195              		.cfi_offset 14, -4
 1196 0002 88B0     		sub	sp, sp, #32
 1197              	.LCFI36:
 1198              		.cfi_def_cfa_offset 40
 1199 0004 00AF     		add	r7, sp, #0
 1200              	.LCFI37:
 1201              		.cfi_def_cfa_register 7
 1202 0006 7860     		str	r0, [r7, #4]
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1203              		.loc 1 1383 0
 1204 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
ARM GAS  /tmp/ccDSLKwL.s 			page 50


 1205              	.LBB111:
 1206              	.LBB112:
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1207              		.loc 2 253 0
 1208              		.syntax unified
 1209              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1210 000c EFF31182 			mrs r2, basepri											
 1211 0010 4FF05003 		mov r3, #80												
 1212 0014 83F31188 		msr basepri, r3											
 1213 0018 BFF36F8F 		isb														
 1214 001c BFF34F8F 		dsb														
 1215              	
 1216              	@ 0 "" 2
 1217              		.thumb
 1218              		.syntax unified
 1219 0020 3A61     		str	r2, [r7, #16]
 1220 0022 FB60     		str	r3, [r7, #12]
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1221              		.loc 2 265 0
 1222 0024 3B69     		ldr	r3, [r7, #16]
 1223              	.LBE112:
 1224              	.LBE111:
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1225              		.loc 1 1385 0
 1226 0026 FB61     		str	r3, [r7, #28]
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1227              		.loc 1 1389 0
ARM GAS  /tmp/ccDSLKwL.s 			page 51


 1228 0028 7B68     		ldr	r3, [r7, #4]
 1229 002a 002B     		cmp	r3, #0
 1230 002c 02D1     		bne	.L72
 1231              		.loc 1 1389 0 is_stmt 0 discriminator 1
 1232 002e 094B     		ldr	r3, .L75
 1233 0030 1B68     		ldr	r3, [r3]
 1234 0032 00E0     		b	.L73
 1235              	.L72:
 1236              		.loc 1 1389 0 discriminator 2
 1237 0034 7B68     		ldr	r3, [r7, #4]
 1238              	.L73:
 1239              		.loc 1 1389 0 discriminator 4
 1240 0036 BB61     		str	r3, [r7, #24]
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1241              		.loc 1 1390 0 is_stmt 1 discriminator 4
 1242 0038 BB69     		ldr	r3, [r7, #24]
 1243 003a DB6A     		ldr	r3, [r3, #44]
 1244 003c 7B61     		str	r3, [r7, #20]
 1245 003e FB69     		ldr	r3, [r7, #28]
 1246 0040 BB60     		str	r3, [r7, #8]
 1247              	.LBB113:
 1248              	.LBB114:
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1249              		.loc 2 271 0 discriminator 4
 1250 0042 BB68     		ldr	r3, [r7, #8]
 1251              		.syntax unified
 1252              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1253 0044 83F31188 			msr basepri, r3	
 1254              	@ 0 "" 2
 1255              		.thumb
 1256              		.syntax unified
 1257              	.LBE114:
 1258              	.LBE113:
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1259              		.loc 1 1394 0 discriminator 4
 1260 0048 7B69     		ldr	r3, [r7, #20]
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1261              		.loc 1 1395 0 discriminator 4
 1262 004a 1846     		mov	r0, r3
 1263 004c 2037     		adds	r7, r7, #32
 1264              	.LCFI38:
 1265              		.cfi_def_cfa_offset 8
 1266 004e BD46     		mov	sp, r7
 1267              	.LCFI39:
 1268              		.cfi_def_cfa_register 13
 1269              		@ sp needed
 1270 0050 80BD     		pop	{r7, pc}
 1271              	.L76:
 1272 0052 00BF     		.align	2
ARM GAS  /tmp/ccDSLKwL.s 			page 52


 1273              	.L75:
 1274 0054 00000000 		.word	pxCurrentTCB
 1275              		.cfi_endproc
 1276              	.LFE12:
 1278              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1279              		.align	1
 1280              		.global	vTaskPrioritySet
 1281              		.syntax unified
 1282              		.thumb
 1283              		.thumb_func
 1284              		.fpu fpv4-sp-d16
 1286              	vTaskPrioritySet:
 1287              	.LFB13:
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1288              		.loc 1 1403 0
 1289              		.cfi_startproc
 1290              		@ args = 0, pretend = 0, frame = 32
 1291              		@ frame_needed = 1, uses_anonymous_args = 0
 1292 0000 80B5     		push	{r7, lr}
 1293              	.LCFI40:
 1294              		.cfi_def_cfa_offset 8
 1295              		.cfi_offset 7, -8
 1296              		.cfi_offset 14, -4
 1297 0002 88B0     		sub	sp, sp, #32
 1298              	.LCFI41:
 1299              		.cfi_def_cfa_offset 40
 1300 0004 00AF     		add	r7, sp, #0
 1301              	.LCFI42:
 1302              		.cfi_def_cfa_register 7
 1303 0006 7860     		str	r0, [r7, #4]
 1304 0008 3960     		str	r1, [r7]
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1305              		.loc 1 1406 0
 1306 000a 0023     		movs	r3, #0
 1307 000c FB61     		str	r3, [r7, #28]
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1308              		.loc 1 1408 0
 1309 000e 3B68     		ldr	r3, [r7]
 1310 0010 062B     		cmp	r3, #6
 1311 0012 09D9     		bls	.L78
 1312              	.LBB115:
 1313              	.LBB116:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1314              		.loc 2 237 0 discriminator 1
 1315              		.syntax unified
 1316              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1317 0014 4FF05003 			mov r3, #80												
ARM GAS  /tmp/ccDSLKwL.s 			page 53


 1318 0018 83F31188 		msr basepri, r3											
 1319 001c BFF36F8F 		isb														
 1320 0020 BFF34F8F 		dsb														
 1321              	
 1322              	@ 0 "" 2
 1323              		.thumb
 1324              		.syntax unified
 1325 0024 FB60     		str	r3, [r7, #12]
 1326              	.L79:
 1327              	.LBE116:
 1328              	.LBE115:
 1329              		.loc 1 1408 0 discriminator 1
 1330 0026 FEE7     		b	.L79
 1331              	.L78:
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1332              		.loc 1 1411 0
 1333 0028 3B68     		ldr	r3, [r7]
 1334 002a 062B     		cmp	r3, #6
 1335 002c 01D9     		bls	.L80
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1336              		.loc 1 1413 0
 1337 002e 0623     		movs	r3, #6
 1338 0030 3B60     		str	r3, [r7]
 1339              	.L80:
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1340              		.loc 1 1420 0
 1341 0032 FFF7FEFF 		bl	vPortEnterCritical
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1342              		.loc 1 1424 0
 1343 0036 7B68     		ldr	r3, [r7, #4]
 1344 0038 002B     		cmp	r3, #0
 1345 003a 02D1     		bne	.L81
 1346              		.loc 1 1424 0 is_stmt 0 discriminator 1
 1347 003c 434B     		ldr	r3, .L92
 1348 003e 1B68     		ldr	r3, [r3]
 1349 0040 00E0     		b	.L82
 1350              	.L81:
 1351              		.loc 1 1424 0 discriminator 2
 1352 0042 7B68     		ldr	r3, [r7, #4]
 1353              	.L82:
 1354              		.loc 1 1424 0 discriminator 4
 1355 0044 BB61     		str	r3, [r7, #24]
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccDSLKwL.s 			page 54


1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1356              		.loc 1 1430 0 is_stmt 1 discriminator 4
 1357 0046 BB69     		ldr	r3, [r7, #24]
 1358 0048 5B6C     		ldr	r3, [r3, #68]
 1359 004a 7B61     		str	r3, [r7, #20]
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1360              		.loc 1 1438 0 discriminator 4
 1361 004c 7A69     		ldr	r2, [r7, #20]
 1362 004e 3B68     		ldr	r3, [r7]
 1363 0050 9A42     		cmp	r2, r3
 1364 0052 74D0     		beq	.L83
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1365              		.loc 1 1442 0
 1366 0054 3A68     		ldr	r2, [r7]
 1367 0056 7B69     		ldr	r3, [r7, #20]
 1368 0058 9A42     		cmp	r2, r3
 1369 005a 0DD9     		bls	.L84
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1370              		.loc 1 1444 0
 1371 005c 3B4B     		ldr	r3, .L92
 1372 005e 1B68     		ldr	r3, [r3]
 1373 0060 BA69     		ldr	r2, [r7, #24]
 1374 0062 9A42     		cmp	r2, r3
 1375 0064 0FD0     		beq	.L85
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1376              		.loc 1 1449 0
 1377 0066 394B     		ldr	r3, .L92
 1378 0068 1B68     		ldr	r3, [r3]
 1379 006a DA6A     		ldr	r2, [r3, #44]
 1380 006c 3B68     		ldr	r3, [r7]
 1381 006e 9A42     		cmp	r2, r3
 1382 0070 09D8     		bhi	.L85
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1383              		.loc 1 1451 0
 1384 0072 0123     		movs	r3, #1
 1385 0074 FB61     		str	r3, [r7, #28]
 1386 0076 06E0     		b	.L85
 1387              	.L84:
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
ARM GAS  /tmp/ccDSLKwL.s 			page 55


1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1388              		.loc 1 1465 0
 1389 0078 344B     		ldr	r3, .L92
 1390 007a 1B68     		ldr	r3, [r3]
 1391 007c BA69     		ldr	r2, [r7, #24]
 1392 007e 9A42     		cmp	r2, r3
 1393 0080 01D1     		bne	.L85
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1394              		.loc 1 1470 0
 1395 0082 0123     		movs	r3, #1
 1396 0084 FB61     		str	r3, [r7, #28]
 1397              	.L85:
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1398              		.loc 1 1482 0
 1399 0086 BB69     		ldr	r3, [r7, #24]
 1400 0088 DB6A     		ldr	r3, [r3, #44]
 1401 008a 3B61     		str	r3, [r7, #16]
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1402              		.loc 1 1488 0
 1403 008c BB69     		ldr	r3, [r7, #24]
 1404 008e 5A6C     		ldr	r2, [r3, #68]
 1405 0090 BB69     		ldr	r3, [r7, #24]
 1406 0092 DB6A     		ldr	r3, [r3, #44]
 1407 0094 9A42     		cmp	r2, r3
 1408 0096 02D1     		bne	.L86
ARM GAS  /tmp/ccDSLKwL.s 			page 56


1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1409              		.loc 1 1490 0
 1410 0098 BB69     		ldr	r3, [r7, #24]
 1411 009a 3A68     		ldr	r2, [r7]
 1412 009c DA62     		str	r2, [r3, #44]
 1413              	.L86:
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1414              		.loc 1 1498 0
 1415 009e BB69     		ldr	r3, [r7, #24]
 1416 00a0 3A68     		ldr	r2, [r7]
 1417 00a2 5A64     		str	r2, [r3, #68]
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1418              		.loc 1 1508 0
 1419 00a4 BB69     		ldr	r3, [r7, #24]
 1420 00a6 9B69     		ldr	r3, [r3, #24]
 1421 00a8 002B     		cmp	r3, #0
 1422 00aa 04DB     		blt	.L87
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1423              		.loc 1 1510 0
 1424 00ac 3B68     		ldr	r3, [r7]
 1425 00ae C3F10702 		rsb	r2, r3, #7
 1426 00b2 BB69     		ldr	r3, [r7, #24]
 1427 00b4 9A61     		str	r2, [r3, #24]
 1428              	.L87:
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1429              		.loc 1 1521 0
 1430 00b6 BB69     		ldr	r3, [r7, #24]
 1431 00b8 5969     		ldr	r1, [r3, #20]
 1432 00ba 3A69     		ldr	r2, [r7, #16]
ARM GAS  /tmp/ccDSLKwL.s 			page 57


 1433 00bc 1346     		mov	r3, r2
 1434 00be 9B00     		lsls	r3, r3, #2
 1435 00c0 1344     		add	r3, r3, r2
 1436 00c2 9B00     		lsls	r3, r3, #2
 1437 00c4 224A     		ldr	r2, .L92+4
 1438 00c6 1344     		add	r3, r3, r2
 1439 00c8 9942     		cmp	r1, r3
 1440 00ca 01D1     		bne	.L88
 1441              		.loc 1 1521 0 is_stmt 0 discriminator 1
 1442 00cc 0123     		movs	r3, #1
 1443 00ce 00E0     		b	.L89
 1444              	.L88:
 1445              		.loc 1 1521 0 discriminator 2
 1446 00d0 0023     		movs	r3, #0
 1447              	.L89:
 1448              		.loc 1 1521 0 discriminator 4
 1449 00d2 002B     		cmp	r3, #0
 1450 00d4 28D0     		beq	.L90
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1451              		.loc 1 1526 0 is_stmt 1
 1452 00d6 BB69     		ldr	r3, [r7, #24]
 1453 00d8 0433     		adds	r3, r3, #4
 1454 00da 1846     		mov	r0, r3
 1455 00dc FFF7FEFF 		bl	uxListRemove
 1456 00e0 0346     		mov	r3, r0
 1457 00e2 002B     		cmp	r3, #0
 1458 00e4 09D1     		bne	.L91
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1459              		.loc 1 1531 0
 1460 00e6 0122     		movs	r2, #1
 1461 00e8 3B69     		ldr	r3, [r7, #16]
 1462 00ea 02FA03F3 		lsl	r3, r2, r3
 1463 00ee DA43     		mvns	r2, r3
 1464 00f0 184B     		ldr	r3, .L92+8
 1465 00f2 1B68     		ldr	r3, [r3]
 1466 00f4 1340     		ands	r3, r3, r2
 1467 00f6 174A     		ldr	r2, .L92+8
 1468 00f8 1360     		str	r3, [r2]
 1469              	.L91:
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1470              		.loc 1 1537 0
 1471 00fa BB69     		ldr	r3, [r7, #24]
 1472 00fc DB6A     		ldr	r3, [r3, #44]
 1473 00fe 0122     		movs	r2, #1
ARM GAS  /tmp/ccDSLKwL.s 			page 58


 1474 0100 9A40     		lsls	r2, r2, r3
 1475 0102 144B     		ldr	r3, .L92+8
 1476 0104 1B68     		ldr	r3, [r3]
 1477 0106 1343     		orrs	r3, r3, r2
 1478 0108 124A     		ldr	r2, .L92+8
 1479 010a 1360     		str	r3, [r2]
 1480 010c BB69     		ldr	r3, [r7, #24]
 1481 010e DA6A     		ldr	r2, [r3, #44]
 1482 0110 1346     		mov	r3, r2
 1483 0112 9B00     		lsls	r3, r3, #2
 1484 0114 1344     		add	r3, r3, r2
 1485 0116 9B00     		lsls	r3, r3, #2
 1486 0118 0D4A     		ldr	r2, .L92+4
 1487 011a 1A44     		add	r2, r2, r3
 1488 011c BB69     		ldr	r3, [r7, #24]
 1489 011e 0433     		adds	r3, r3, #4
 1490 0120 1946     		mov	r1, r3
 1491 0122 1046     		mov	r0, r2
 1492 0124 FFF7FEFF 		bl	vListInsertEnd
 1493              	.L90:
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1494              		.loc 1 1544 0
 1495 0128 FB69     		ldr	r3, [r7, #28]
 1496 012a 002B     		cmp	r3, #0
 1497 012c 07D0     		beq	.L83
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1498              		.loc 1 1546 0
 1499 012e 0A4B     		ldr	r3, .L92+12
 1500 0130 4FF08052 		mov	r2, #268435456
 1501 0134 1A60     		str	r2, [r3]
 1502              		.syntax unified
 1503              	@ 1546 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1504 0136 BFF34F8F 		dsb
 1505              	@ 0 "" 2
 1506              	@ 1546 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1507 013a BFF36F8F 		isb
 1508              	@ 0 "" 2
 1509              		.thumb
 1510              		.syntax unified
 1511              	.L83:
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccDSLKwL.s 			page 59


1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1512              		.loc 1 1558 0
 1513 013e FFF7FEFF 		bl	vPortExitCritical
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1514              		.loc 1 1559 0
 1515 0142 00BF     		nop
 1516 0144 2037     		adds	r7, r7, #32
 1517              	.LCFI43:
 1518              		.cfi_def_cfa_offset 8
 1519 0146 BD46     		mov	sp, r7
 1520              	.LCFI44:
 1521              		.cfi_def_cfa_register 13
 1522              		@ sp needed
 1523 0148 80BD     		pop	{r7, pc}
 1524              	.L93:
 1525 014a 00BF     		.align	2
 1526              	.L92:
 1527 014c 00000000 		.word	pxCurrentTCB
 1528 0150 00000000 		.word	pxReadyTasksLists
 1529 0154 00000000 		.word	uxTopReadyPriority
 1530 0158 04ED00E0 		.word	-536810236
 1531              		.cfi_endproc
 1532              	.LFE13:
 1534              		.section	.text.vTaskSuspend,"ax",%progbits
 1535              		.align	1
 1536              		.global	vTaskSuspend
 1537              		.syntax unified
 1538              		.thumb
 1539              		.thumb_func
 1540              		.fpu fpv4-sp-d16
 1542              	vTaskSuspend:
 1543              	.LFB14:
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1544              		.loc 1 1567 0
 1545              		.cfi_startproc
 1546              		@ args = 0, pretend = 0, frame = 16
 1547              		@ frame_needed = 1, uses_anonymous_args = 0
 1548 0000 80B5     		push	{r7, lr}
 1549              	.LCFI45:
 1550              		.cfi_def_cfa_offset 8
 1551              		.cfi_offset 7, -8
 1552              		.cfi_offset 14, -4
 1553 0002 84B0     		sub	sp, sp, #16
 1554              	.LCFI46:
 1555              		.cfi_def_cfa_offset 24
 1556 0004 00AF     		add	r7, sp, #0
 1557              	.LCFI47:
 1558              		.cfi_def_cfa_register 7
 1559 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccDSLKwL.s 			page 60


1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1560              		.loc 1 1570 0
 1561 0008 FFF7FEFF 		bl	vPortEnterCritical
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1562              		.loc 1 1574 0
 1563 000c 7B68     		ldr	r3, [r7, #4]
 1564 000e 002B     		cmp	r3, #0
 1565 0010 02D1     		bne	.L95
 1566              		.loc 1 1574 0 is_stmt 0 discriminator 1
 1567 0012 374B     		ldr	r3, .L108
 1568 0014 1B68     		ldr	r3, [r3]
 1569 0016 00E0     		b	.L96
 1570              	.L95:
 1571              		.loc 1 1574 0 discriminator 2
 1572 0018 7B68     		ldr	r3, [r7, #4]
 1573              	.L96:
 1574              		.loc 1 1574 0 discriminator 4
 1575 001a FB60     		str	r3, [r7, #12]
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1576              		.loc 1 1580 0 is_stmt 1 discriminator 4
 1577 001c FB68     		ldr	r3, [r7, #12]
 1578 001e 0433     		adds	r3, r3, #4
 1579 0020 1846     		mov	r0, r3
 1580 0022 FFF7FEFF 		bl	uxListRemove
 1581 0026 0346     		mov	r3, r0
 1582 0028 002B     		cmp	r3, #0
 1583 002a 15D1     		bne	.L97
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1584              		.loc 1 1582 0
 1585 002c FB68     		ldr	r3, [r7, #12]
 1586 002e DA6A     		ldr	r2, [r3, #44]
 1587 0030 3049     		ldr	r1, .L108+4
 1588 0032 1346     		mov	r3, r2
 1589 0034 9B00     		lsls	r3, r3, #2
 1590 0036 1344     		add	r3, r3, r2
 1591 0038 9B00     		lsls	r3, r3, #2
 1592 003a 0B44     		add	r3, r3, r1
 1593 003c 1B68     		ldr	r3, [r3]
 1594 003e 002B     		cmp	r3, #0
 1595 0040 0AD1     		bne	.L97
 1596              		.loc 1 1582 0 is_stmt 0 discriminator 1
 1597 0042 FB68     		ldr	r3, [r7, #12]
 1598 0044 DB6A     		ldr	r3, [r3, #44]
 1599 0046 0122     		movs	r2, #1
 1600 0048 02FA03F3 		lsl	r3, r2, r3
 1601 004c DA43     		mvns	r2, r3
ARM GAS  /tmp/ccDSLKwL.s 			page 61


 1602 004e 2A4B     		ldr	r3, .L108+8
 1603 0050 1B68     		ldr	r3, [r3]
 1604 0052 1340     		ands	r3, r3, r2
 1605 0054 284A     		ldr	r2, .L108+8
 1606 0056 1360     		str	r3, [r2]
 1607              	.L97:
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1608              		.loc 1 1590 0 is_stmt 1
 1609 0058 FB68     		ldr	r3, [r7, #12]
 1610 005a 9B6A     		ldr	r3, [r3, #40]
 1611 005c 002B     		cmp	r3, #0
 1612 005e 04D0     		beq	.L99
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1613              		.loc 1 1592 0
 1614 0060 FB68     		ldr	r3, [r7, #12]
 1615 0062 1833     		adds	r3, r3, #24
 1616 0064 1846     		mov	r0, r3
 1617 0066 FFF7FEFF 		bl	uxListRemove
 1618              	.L99:
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1619              		.loc 1 1599 0
 1620 006a FB68     		ldr	r3, [r7, #12]
 1621 006c 0433     		adds	r3, r3, #4
 1622 006e 1946     		mov	r1, r3
 1623 0070 2248     		ldr	r0, .L108+12
 1624 0072 FFF7FEFF 		bl	vListInsertEnd
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1625              		.loc 1 1601 0
 1626 0076 FFF7FEFF 		bl	vPortExitCritical
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1627              		.loc 1 1603 0
 1628 007a 214B     		ldr	r3, .L108+16
 1629 007c 1B68     		ldr	r3, [r3]
 1630 007e 002B     		cmp	r3, #0
 1631 0080 05D0     		beq	.L100
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1632              		.loc 1 1607 0
 1633 0082 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  /tmp/ccDSLKwL.s 			page 62


1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1634              		.loc 1 1609 0
 1635 0086 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1636              		.loc 1 1611 0
 1637 008a FFF7FEFF 		bl	vPortExitCritical
 1638              	.L100:
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1639              		.loc 1 1618 0
 1640 008e 184B     		ldr	r3, .L108
 1641 0090 1B68     		ldr	r3, [r3]
 1642 0092 FA68     		ldr	r2, [r7, #12]
 1643 0094 9A42     		cmp	r2, r3
 1644 0096 26D1     		bne	.L107
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1645              		.loc 1 1620 0
 1646 0098 194B     		ldr	r3, .L108+16
 1647 009a 1B68     		ldr	r3, [r3]
 1648 009c 002B     		cmp	r3, #0
 1649 009e 16D0     		beq	.L102
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1650              		.loc 1 1623 0
 1651 00a0 184B     		ldr	r3, .L108+20
 1652 00a2 1B68     		ldr	r3, [r3]
 1653 00a4 002B     		cmp	r3, #0
 1654 00a6 09D0     		beq	.L103
 1655              	.LBB117:
 1656              	.LBB118:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1657              		.loc 2 237 0 discriminator 1
 1658              		.syntax unified
 1659              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1660 00a8 4FF05003 			mov r3, #80												
 1661 00ac 83F31188 		msr basepri, r3											
 1662 00b0 BFF36F8F 		isb														
 1663 00b4 BFF34F8F 		dsb														
 1664              	
 1665              	@ 0 "" 2
 1666              		.thumb
 1667              		.syntax unified
 1668 00b8 BB60     		str	r3, [r7, #8]
 1669              	.L104:
 1670              	.LBE118:
 1671              	.LBE117:
 1672              		.loc 1 1623 0 discriminator 1
 1673 00ba FEE7     		b	.L104
ARM GAS  /tmp/ccDSLKwL.s 			page 63


 1674              	.L103:
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1675              		.loc 1 1624 0
 1676 00bc 124B     		ldr	r3, .L108+24
 1677 00be 4FF08052 		mov	r2, #268435456
 1678 00c2 1A60     		str	r2, [r3]
 1679              		.syntax unified
 1680              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1681 00c4 BFF34F8F 		dsb
 1682              	@ 0 "" 2
 1683              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1684 00c8 BFF36F8F 		isb
 1685              	@ 0 "" 2
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1686              		.loc 1 1649 0
 1687              		.thumb
 1688              		.syntax unified
 1689 00cc 0BE0     		b	.L107
 1690              	.L102:
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1691              		.loc 1 1631 0
 1692 00ce 0B4B     		ldr	r3, .L108+12
 1693 00d0 1A68     		ldr	r2, [r3]
 1694 00d2 0E4B     		ldr	r3, .L108+28
 1695 00d4 1B68     		ldr	r3, [r3]
 1696 00d6 9A42     		cmp	r2, r3
 1697 00d8 03D1     		bne	.L106
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1698              		.loc 1 1637 0
 1699 00da 054B     		ldr	r3, .L108
 1700 00dc 0022     		movs	r2, #0
 1701 00de 1A60     		str	r2, [r3]
 1702              		.loc 1 1649 0
ARM GAS  /tmp/ccDSLKwL.s 			page 64


 1703 00e0 01E0     		b	.L107
 1704              	.L106:
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1705              		.loc 1 1641 0
 1706 00e2 FFF7FEFF 		bl	vTaskSwitchContext
 1707              	.L107:
 1708              		.loc 1 1649 0
 1709 00e6 00BF     		nop
 1710 00e8 1037     		adds	r7, r7, #16
 1711              	.LCFI48:
 1712              		.cfi_def_cfa_offset 8
 1713 00ea BD46     		mov	sp, r7
 1714              	.LCFI49:
 1715              		.cfi_def_cfa_register 13
 1716              		@ sp needed
 1717 00ec 80BD     		pop	{r7, pc}
 1718              	.L109:
 1719 00ee 00BF     		.align	2
 1720              	.L108:
 1721 00f0 00000000 		.word	pxCurrentTCB
 1722 00f4 00000000 		.word	pxReadyTasksLists
 1723 00f8 00000000 		.word	uxTopReadyPriority
 1724 00fc 00000000 		.word	xSuspendedTaskList
 1725 0100 00000000 		.word	xSchedulerRunning
 1726 0104 00000000 		.word	uxSchedulerSuspended
 1727 0108 04ED00E0 		.word	-536810236
 1728 010c 00000000 		.word	uxCurrentNumberOfTasks
 1729              		.cfi_endproc
 1730              	.LFE14:
 1732              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1733              		.align	1
 1734              		.syntax unified
 1735              		.thumb
 1736              		.thumb_func
 1737              		.fpu fpv4-sp-d16
 1739              	prvTaskIsTaskSuspended:
 1740              	.LFB15:
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1741              		.loc 1 1657 0
 1742              		.cfi_startproc
 1743              		@ args = 0, pretend = 0, frame = 24
 1744              		@ frame_needed = 1, uses_anonymous_args = 0
 1745              		@ link register save eliminated.
 1746 0000 80B4     		push	{r7}
 1747              	.LCFI50:
 1748              		.cfi_def_cfa_offset 4
 1749              		.cfi_offset 7, -4
 1750 0002 87B0     		sub	sp, sp, #28
 1751              	.LCFI51:
 1752              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccDSLKwL.s 			page 65


 1753 0004 00AF     		add	r7, sp, #0
 1754              	.LCFI52:
 1755              		.cfi_def_cfa_register 7
 1756 0006 7860     		str	r0, [r7, #4]
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1757              		.loc 1 1658 0
 1758 0008 0023     		movs	r3, #0
 1759 000a 7B61     		str	r3, [r7, #20]
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1760              		.loc 1 1659 0
 1761 000c 7B68     		ldr	r3, [r7, #4]
 1762 000e 3B61     		str	r3, [r7, #16]
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 1763              		.loc 1 1665 0
 1764 0010 7B68     		ldr	r3, [r7, #4]
 1765 0012 002B     		cmp	r3, #0
 1766 0014 09D1     		bne	.L111
 1767              	.LBB119:
 1768              	.LBB120:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1769              		.loc 2 237 0 discriminator 1
 1770              		.syntax unified
 1771              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1772 0016 4FF05003 			mov r3, #80												
 1773 001a 83F31188 		msr basepri, r3											
 1774 001e BFF36F8F 		isb														
 1775 0022 BFF34F8F 		dsb														
 1776              	
 1777              	@ 0 "" 2
 1778              		.thumb
 1779              		.syntax unified
 1780 0026 FB60     		str	r3, [r7, #12]
 1781              	.L112:
 1782              	.LBE120:
 1783              	.LBE119:
 1784              		.loc 1 1665 0 discriminator 1
 1785 0028 FEE7     		b	.L112
 1786              	.L111:
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1787              		.loc 1 1668 0
 1788 002a 3B69     		ldr	r3, [r7, #16]
 1789 002c 5B69     		ldr	r3, [r3, #20]
 1790 002e 0F4A     		ldr	r2, .L119
 1791 0030 9342     		cmp	r3, r2
 1792 0032 01D1     		bne	.L113
 1793              		.loc 1 1668 0 is_stmt 0 discriminator 1
 1794 0034 0123     		movs	r3, #1
 1795 0036 00E0     		b	.L114
 1796              	.L113:
 1797              		.loc 1 1668 0 discriminator 2
ARM GAS  /tmp/ccDSLKwL.s 			page 66


 1798 0038 0023     		movs	r3, #0
 1799              	.L114:
 1800              		.loc 1 1668 0 discriminator 4
 1801 003a 002B     		cmp	r3, #0
 1802 003c 0FD0     		beq	.L115
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1803              		.loc 1 1671 0 is_stmt 1
 1804 003e 3B69     		ldr	r3, [r7, #16]
 1805 0040 9B6A     		ldr	r3, [r3, #40]
 1806 0042 0B4A     		ldr	r2, .L119+4
 1807 0044 9342     		cmp	r3, r2
 1808 0046 0AD0     		beq	.L115
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 1809              		.loc 1 1675 0
 1810 0048 3B69     		ldr	r3, [r7, #16]
 1811 004a 9B6A     		ldr	r3, [r3, #40]
 1812 004c 002B     		cmp	r3, #0
 1813 004e 01D1     		bne	.L116
 1814              		.loc 1 1675 0 is_stmt 0 discriminator 1
 1815 0050 0123     		movs	r3, #1
 1816 0052 00E0     		b	.L117
 1817              	.L116:
 1818              		.loc 1 1675 0 discriminator 2
 1819 0054 0023     		movs	r3, #0
 1820              	.L117:
 1821              		.loc 1 1675 0 discriminator 4
 1822 0056 002B     		cmp	r3, #0
 1823 0058 01D0     		beq	.L115
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 1824              		.loc 1 1677 0 is_stmt 1
 1825 005a 0123     		movs	r3, #1
 1826 005c 7B61     		str	r3, [r7, #20]
 1827              	.L115:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 1828              		.loc 1 1694 0
ARM GAS  /tmp/ccDSLKwL.s 			page 67


 1829 005e 7B69     		ldr	r3, [r7, #20]
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1830              		.loc 1 1695 0
 1831 0060 1846     		mov	r0, r3
 1832 0062 1C37     		adds	r7, r7, #28
 1833              	.LCFI53:
 1834              		.cfi_def_cfa_offset 4
 1835 0064 BD46     		mov	sp, r7
 1836              	.LCFI54:
 1837              		.cfi_def_cfa_register 13
 1838              		@ sp needed
 1839 0066 5DF8047B 		ldr	r7, [sp], #4
 1840              	.LCFI55:
 1841              		.cfi_restore 7
 1842              		.cfi_def_cfa_offset 0
 1843 006a 7047     		bx	lr
 1844              	.L120:
 1845              		.align	2
 1846              	.L119:
 1847 006c 00000000 		.word	xSuspendedTaskList
 1848 0070 00000000 		.word	xPendingReadyList
 1849              		.cfi_endproc
 1850              	.LFE15:
 1852              		.section	.text.vTaskResume,"ax",%progbits
 1853              		.align	1
 1854              		.global	vTaskResume
 1855              		.syntax unified
 1856              		.thumb
 1857              		.thumb_func
 1858              		.fpu fpv4-sp-d16
 1860              	vTaskResume:
 1861              	.LFB16:
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1862              		.loc 1 1703 0
 1863              		.cfi_startproc
 1864              		@ args = 0, pretend = 0, frame = 16
 1865              		@ frame_needed = 1, uses_anonymous_args = 0
 1866 0000 80B5     		push	{r7, lr}
 1867              	.LCFI56:
 1868              		.cfi_def_cfa_offset 8
 1869              		.cfi_offset 7, -8
 1870              		.cfi_offset 14, -4
 1871 0002 84B0     		sub	sp, sp, #16
 1872              	.LCFI57:
 1873              		.cfi_def_cfa_offset 24
 1874 0004 00AF     		add	r7, sp, #0
 1875              	.LCFI58:
 1876              		.cfi_def_cfa_register 7
 1877 0006 7860     		str	r0, [r7, #4]
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
ARM GAS  /tmp/ccDSLKwL.s 			page 68


 1878              		.loc 1 1704 0
 1879 0008 7B68     		ldr	r3, [r7, #4]
 1880 000a FB60     		str	r3, [r7, #12]
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 1881              		.loc 1 1707 0
 1882 000c 7B68     		ldr	r3, [r7, #4]
 1883 000e 002B     		cmp	r3, #0
 1884 0010 09D1     		bne	.L122
 1885              	.LBB121:
 1886              	.LBB122:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1887              		.loc 2 237 0 discriminator 1
 1888              		.syntax unified
 1889              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1890 0012 4FF05003 			mov r3, #80												
 1891 0016 83F31188 		msr basepri, r3											
 1892 001a BFF36F8F 		isb														
 1893 001e BFF34F8F 		dsb														
 1894              	
 1895              	@ 0 "" 2
 1896              		.thumb
 1897              		.syntax unified
 1898 0022 BB60     		str	r3, [r7, #8]
 1899              	.L123:
 1900              	.LBE122:
 1901              	.LBE121:
 1902              		.loc 1 1707 0 discriminator 1
 1903 0024 FEE7     		b	.L123
 1904              	.L122:
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1905              		.loc 1 1711 0
 1906 0026 FB68     		ldr	r3, [r7, #12]
 1907 0028 002B     		cmp	r3, #0
 1908 002a 39D0     		beq	.L126
 1909              		.loc 1 1711 0 is_stmt 0 discriminator 1
 1910 002c 1E4B     		ldr	r3, .L127
 1911 002e 1B68     		ldr	r3, [r3]
 1912 0030 FA68     		ldr	r2, [r7, #12]
 1913 0032 9A42     		cmp	r2, r3
 1914 0034 34D0     		beq	.L126
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1915              		.loc 1 1713 0 is_stmt 1
 1916 0036 FFF7FEFF 		bl	vPortEnterCritical
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1917              		.loc 1 1715 0
 1918 003a F868     		ldr	r0, [r7, #12]
 1919 003c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1920 0040 0346     		mov	r3, r0
 1921 0042 002B     		cmp	r3, #0
 1922 0044 2AD0     		beq	.L125
ARM GAS  /tmp/ccDSLKwL.s 			page 69


1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1923              		.loc 1 1721 0
 1924 0046 FB68     		ldr	r3, [r7, #12]
 1925 0048 0433     		adds	r3, r3, #4
 1926 004a 1846     		mov	r0, r3
 1927 004c FFF7FEFF 		bl	uxListRemove
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1928              		.loc 1 1722 0
 1929 0050 FB68     		ldr	r3, [r7, #12]
 1930 0052 DB6A     		ldr	r3, [r3, #44]
 1931 0054 0122     		movs	r2, #1
 1932 0056 9A40     		lsls	r2, r2, r3
 1933 0058 144B     		ldr	r3, .L127+4
 1934 005a 1B68     		ldr	r3, [r3]
 1935 005c 1343     		orrs	r3, r3, r2
 1936 005e 134A     		ldr	r2, .L127+4
 1937 0060 1360     		str	r3, [r2]
 1938 0062 FB68     		ldr	r3, [r7, #12]
 1939 0064 DA6A     		ldr	r2, [r3, #44]
 1940 0066 1346     		mov	r3, r2
 1941 0068 9B00     		lsls	r3, r3, #2
 1942 006a 1344     		add	r3, r3, r2
 1943 006c 9B00     		lsls	r3, r3, #2
 1944 006e 104A     		ldr	r2, .L127+8
 1945 0070 1A44     		add	r2, r2, r3
 1946 0072 FB68     		ldr	r3, [r7, #12]
 1947 0074 0433     		adds	r3, r3, #4
 1948 0076 1946     		mov	r1, r3
 1949 0078 1046     		mov	r0, r2
 1950 007a FFF7FEFF 		bl	vListInsertEnd
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1951              		.loc 1 1725 0
 1952 007e FB68     		ldr	r3, [r7, #12]
 1953 0080 DA6A     		ldr	r2, [r3, #44]
 1954 0082 094B     		ldr	r3, .L127
 1955 0084 1B68     		ldr	r3, [r3]
 1956 0086 DB6A     		ldr	r3, [r3, #44]
 1957 0088 9A42     		cmp	r2, r3
 1958 008a 07D3     		bcc	.L125
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1959              		.loc 1 1730 0
 1960 008c 094B     		ldr	r3, .L127+12
 1961 008e 4FF08052 		mov	r2, #268435456
 1962 0092 1A60     		str	r2, [r3]
 1963              		.syntax unified
 1964              	@ 1730 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
ARM GAS  /tmp/ccDSLKwL.s 			page 70


 1965 0094 BFF34F8F 		dsb
 1966              	@ 0 "" 2
 1967              	@ 1730 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1968 0098 BFF36F8F 		isb
 1969              	@ 0 "" 2
 1970              		.thumb
 1971              		.syntax unified
 1972              	.L125:
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1973              		.loc 1 1742 0
 1974 009c FFF7FEFF 		bl	vPortExitCritical
 1975              	.L126:
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1976              		.loc 1 1748 0
 1977 00a0 00BF     		nop
 1978 00a2 1037     		adds	r7, r7, #16
 1979              	.LCFI59:
 1980              		.cfi_def_cfa_offset 8
 1981 00a4 BD46     		mov	sp, r7
 1982              	.LCFI60:
 1983              		.cfi_def_cfa_register 13
 1984              		@ sp needed
 1985 00a6 80BD     		pop	{r7, pc}
 1986              	.L128:
 1987              		.align	2
 1988              	.L127:
 1989 00a8 00000000 		.word	pxCurrentTCB
 1990 00ac 00000000 		.word	uxTopReadyPriority
 1991 00b0 00000000 		.word	pxReadyTasksLists
 1992 00b4 04ED00E0 		.word	-536810236
 1993              		.cfi_endproc
 1994              	.LFE16:
 1996              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1997              		.align	1
 1998              		.global	xTaskResumeFromISR
 1999              		.syntax unified
 2000              		.thumb
 2001              		.thumb_func
 2002              		.fpu fpv4-sp-d16
 2004              	xTaskResumeFromISR:
 2005              	.LFB17:
ARM GAS  /tmp/ccDSLKwL.s 			page 71


1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2006              		.loc 1 1757 0
 2007              		.cfi_startproc
 2008              		@ args = 0, pretend = 0, frame = 40
 2009              		@ frame_needed = 1, uses_anonymous_args = 0
 2010 0000 80B5     		push	{r7, lr}
 2011              	.LCFI61:
 2012              		.cfi_def_cfa_offset 8
 2013              		.cfi_offset 7, -8
 2014              		.cfi_offset 14, -4
 2015 0002 8AB0     		sub	sp, sp, #40
 2016              	.LCFI62:
 2017              		.cfi_def_cfa_offset 48
 2018 0004 00AF     		add	r7, sp, #0
 2019              	.LCFI63:
 2020              		.cfi_def_cfa_register 7
 2021 0006 7860     		str	r0, [r7, #4]
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2022              		.loc 1 1758 0
 2023 0008 0023     		movs	r3, #0
 2024 000a 7B62     		str	r3, [r7, #36]
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 2025              		.loc 1 1759 0
 2026 000c 7B68     		ldr	r3, [r7, #4]
 2027 000e 3B62     		str	r3, [r7, #32]
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2028              		.loc 1 1762 0
 2029 0010 7B68     		ldr	r3, [r7, #4]
 2030 0012 002B     		cmp	r3, #0
 2031 0014 09D1     		bne	.L130
 2032              	.LBB123:
 2033              	.LBB124:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2034              		.loc 2 237 0 discriminator 1
 2035              		.syntax unified
 2036              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2037 0016 4FF05003 			mov r3, #80												
 2038 001a 83F31188 		msr basepri, r3											
 2039 001e BFF36F8F 		isb														
 2040 0022 BFF34F8F 		dsb														
 2041              	
 2042              	@ 0 "" 2
 2043              		.thumb
 2044              		.syntax unified
 2045 0026 BB61     		str	r3, [r7, #24]
 2046              	.L131:
 2047              	.LBE124:
ARM GAS  /tmp/ccDSLKwL.s 			page 72


 2048              	.LBE123:
 2049              		.loc 1 1762 0 discriminator 1
 2050 0028 FEE7     		b	.L131
 2051              	.L130:
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2052              		.loc 1 1780 0
 2053 002a FFF7FEFF 		bl	vPortValidateInterruptPriority
 2054              	.LBB125:
 2055              	.LBB126:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2056              		.loc 2 253 0
 2057              		.syntax unified
 2058              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2059 002e EFF31182 			mrs r2, basepri											
 2060 0032 4FF05003 		mov r3, #80												
 2061 0036 83F31188 		msr basepri, r3											
 2062 003a BFF36F8F 		isb														
 2063 003e BFF34F8F 		dsb														
 2064              	
 2065              	@ 0 "" 2
 2066              		.thumb
 2067              		.syntax unified
 2068 0042 7A61     		str	r2, [r7, #20]
 2069 0044 3B61     		str	r3, [r7, #16]
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2070              		.loc 2 265 0
 2071 0046 7B69     		ldr	r3, [r7, #20]
 2072              	.LBE126:
 2073              	.LBE125:
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2074              		.loc 1 1782 0
 2075 0048 FB61     		str	r3, [r7, #28]
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2076              		.loc 1 1784 0
 2077 004a 386A     		ldr	r0, [r7, #32]
 2078 004c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2079 0050 0346     		mov	r3, r0
 2080 0052 002B     		cmp	r3, #0
ARM GAS  /tmp/ccDSLKwL.s 			page 73


 2081 0054 2FD0     		beq	.L133
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2082              		.loc 1 1789 0
 2083 0056 1D4B     		ldr	r3, .L138
 2084 0058 1B68     		ldr	r3, [r3]
 2085 005a 002B     		cmp	r3, #0
 2086 005c 25D1     		bne	.L134
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2087              		.loc 1 1793 0
 2088 005e 3B6A     		ldr	r3, [r7, #32]
 2089 0060 DA6A     		ldr	r2, [r3, #44]
 2090 0062 1B4B     		ldr	r3, .L138+4
 2091 0064 1B68     		ldr	r3, [r3]
 2092 0066 DB6A     		ldr	r3, [r3, #44]
 2093 0068 9A42     		cmp	r2, r3
 2094 006a 01D3     		bcc	.L135
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 2095              		.loc 1 1795 0
 2096 006c 0123     		movs	r3, #1
 2097 006e 7B62     		str	r3, [r7, #36]
 2098              	.L135:
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2099              		.loc 1 1802 0
 2100 0070 3B6A     		ldr	r3, [r7, #32]
 2101 0072 0433     		adds	r3, r3, #4
 2102 0074 1846     		mov	r0, r3
 2103 0076 FFF7FEFF 		bl	uxListRemove
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2104              		.loc 1 1803 0
 2105 007a 3B6A     		ldr	r3, [r7, #32]
 2106 007c DB6A     		ldr	r3, [r3, #44]
 2107 007e 0122     		movs	r2, #1
 2108 0080 9A40     		lsls	r2, r2, r3
 2109 0082 144B     		ldr	r3, .L138+8
 2110 0084 1B68     		ldr	r3, [r3]
 2111 0086 1343     		orrs	r3, r3, r2
 2112 0088 124A     		ldr	r2, .L138+8
 2113 008a 1360     		str	r3, [r2]
 2114 008c 3B6A     		ldr	r3, [r7, #32]
 2115 008e DA6A     		ldr	r2, [r3, #44]
 2116 0090 1346     		mov	r3, r2
 2117 0092 9B00     		lsls	r3, r3, #2
 2118 0094 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccDSLKwL.s 			page 74


 2119 0096 9B00     		lsls	r3, r3, #2
 2120 0098 0F4A     		ldr	r2, .L138+12
 2121 009a 1A44     		add	r2, r2, r3
 2122 009c 3B6A     		ldr	r3, [r7, #32]
 2123 009e 0433     		adds	r3, r3, #4
 2124 00a0 1946     		mov	r1, r3
 2125 00a2 1046     		mov	r0, r2
 2126 00a4 FFF7FEFF 		bl	vListInsertEnd
 2127 00a8 05E0     		b	.L133
 2128              	.L134:
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2129              		.loc 1 1810 0
 2130 00aa 3B6A     		ldr	r3, [r7, #32]
 2131 00ac 1833     		adds	r3, r3, #24
 2132 00ae 1946     		mov	r1, r3
 2133 00b0 0A48     		ldr	r0, .L138+16
 2134 00b2 FFF7FEFF 		bl	vListInsertEnd
 2135              	.L133:
 2136 00b6 FB69     		ldr	r3, [r7, #28]
 2137 00b8 FB60     		str	r3, [r7, #12]
 2138              	.LBB127:
 2139              	.LBB128:
 2140              		.loc 2 271 0
 2141 00ba FB68     		ldr	r3, [r7, #12]
 2142              		.syntax unified
 2143              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2144 00bc 83F31188 			msr basepri, r3	
 2145              	@ 0 "" 2
 2146              		.thumb
 2147              		.syntax unified
 2148              	.LBE128:
 2149              	.LBE127:
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 2150              		.loc 1 1820 0
 2151 00c0 7B6A     		ldr	r3, [r7, #36]
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2152              		.loc 1 1821 0
 2153 00c2 1846     		mov	r0, r3
 2154 00c4 2837     		adds	r7, r7, #40
 2155              	.LCFI64:
 2156              		.cfi_def_cfa_offset 8
 2157 00c6 BD46     		mov	sp, r7
ARM GAS  /tmp/ccDSLKwL.s 			page 75


 2158              	.LCFI65:
 2159              		.cfi_def_cfa_register 13
 2160              		@ sp needed
 2161 00c8 80BD     		pop	{r7, pc}
 2162              	.L139:
 2163 00ca 00BF     		.align	2
 2164              	.L138:
 2165 00cc 00000000 		.word	uxSchedulerSuspended
 2166 00d0 00000000 		.word	pxCurrentTCB
 2167 00d4 00000000 		.word	uxTopReadyPriority
 2168 00d8 00000000 		.word	pxReadyTasksLists
 2169 00dc 00000000 		.word	xPendingReadyList
 2170              		.cfi_endproc
 2171              	.LFE17:
 2173              		.section	.rodata
 2174              		.align	2
 2175              	.LC0:
 2176 0000 49444C45 		.ascii	"IDLE\000"
 2176      00
 2177              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2178              		.align	1
 2179              		.global	vTaskStartScheduler
 2180              		.syntax unified
 2181              		.thumb
 2182              		.thumb_func
 2183              		.fpu fpv4-sp-d16
 2185              	vTaskStartScheduler:
 2186              	.LFB18:
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2187              		.loc 1 1827 0
 2188              		.cfi_startproc
 2189              		@ args = 0, pretend = 0, frame = 16
 2190              		@ frame_needed = 1, uses_anonymous_args = 0
 2191 0000 80B5     		push	{r7, lr}
 2192              	.LCFI66:
 2193              		.cfi_def_cfa_offset 8
 2194              		.cfi_offset 7, -8
 2195              		.cfi_offset 14, -4
 2196 0002 86B0     		sub	sp, sp, #24
 2197              	.LCFI67:
 2198              		.cfi_def_cfa_offset 32
 2199 0004 02AF     		add	r7, sp, #8
 2200              	.LCFI68:
 2201              		.cfi_def_cfa 7, 24
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
ARM GAS  /tmp/ccDSLKwL.s 			page 76


1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												"IDLE",
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL,
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
 2202              		.loc 1 1860 0
 2203 0006 1B4B     		ldr	r3, .L145
 2204 0008 0193     		str	r3, [sp, #4]
 2205 000a 0023     		movs	r3, #0
 2206 000c 0093     		str	r3, [sp]
 2207 000e 0023     		movs	r3, #0
 2208 0010 8022     		movs	r2, #128
 2209 0012 1949     		ldr	r1, .L145+4
 2210 0014 1948     		ldr	r0, .L145+8
 2211 0016 FFF7FEFF 		bl	xTaskCreate
 2212 001a F860     		str	r0, [r7, #12]
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
ARM GAS  /tmp/ccDSLKwL.s 			page 77


 2213              		.loc 1 1881 0
 2214 001c FB68     		ldr	r3, [r7, #12]
 2215 001e 012B     		cmp	r3, #1
 2216 0020 15D1     		bne	.L141
 2217              	.LBB129:
 2218              	.LBB130:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2219              		.loc 2 237 0
 2220              		.syntax unified
 2221              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2222 0022 4FF05003 			mov r3, #80												
 2223 0026 83F31188 		msr basepri, r3											
 2224 002a BFF36F8F 		isb														
 2225 002e BFF34F8F 		dsb														
 2226              	
 2227              	@ 0 "" 2
 2228              		.thumb
 2229              		.syntax unified
 2230 0032 BB60     		str	r3, [r7, #8]
 2231              	.LBE130:
 2232              	.LBE129:
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2233              		.loc 1 1898 0
 2234 0034 124B     		ldr	r3, .L145+12
 2235 0036 4FF0FF32 		mov	r2, #-1
 2236 003a 1A60     		str	r2, [r3]
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2237              		.loc 1 1899 0
 2238 003c 114B     		ldr	r3, .L145+16
 2239 003e 0122     		movs	r2, #1
 2240 0040 1A60     		str	r2, [r3]
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2241              		.loc 1 1900 0
 2242 0042 114B     		ldr	r3, .L145+20
 2243 0044 0022     		movs	r2, #0
 2244 0046 1A60     		str	r2, [r3]
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
ARM GAS  /tmp/ccDSLKwL.s 			page 78


1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2245              		.loc 1 1909 0
 2246 0048 FFF7FEFF 		bl	xPortStartScheduler
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2247              		.loc 1 1930 0
 2248 004c 0DE0     		b	.L144
 2249              	.L141:
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2250              		.loc 1 1924 0
 2251 004e FB68     		ldr	r3, [r7, #12]
 2252 0050 B3F1FF3F 		cmp	r3, #-1
 2253 0054 09D1     		bne	.L144
 2254              	.LBB131:
 2255              	.LBB132:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2256              		.loc 2 237 0 discriminator 1
 2257              		.syntax unified
 2258              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2259 0056 4FF05003 			mov r3, #80												
 2260 005a 83F31188 		msr basepri, r3											
 2261 005e BFF36F8F 		isb														
 2262 0062 BFF34F8F 		dsb														
 2263              	
 2264              	@ 0 "" 2
 2265              		.thumb
 2266              		.syntax unified
 2267 0066 7B60     		str	r3, [r7, #4]
 2268              	.L143:
 2269              	.LBE132:
 2270              	.LBE131:
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2271              		.loc 1 1924 0 discriminator 2
 2272 0068 FEE7     		b	.L143
 2273              	.L144:
ARM GAS  /tmp/ccDSLKwL.s 			page 79


 2274              		.loc 1 1930 0
 2275 006a 00BF     		nop
 2276 006c 1037     		adds	r7, r7, #16
 2277              	.LCFI69:
 2278              		.cfi_def_cfa_offset 8
 2279 006e BD46     		mov	sp, r7
 2280              	.LCFI70:
 2281              		.cfi_def_cfa_register 13
 2282              		@ sp needed
 2283 0070 80BD     		pop	{r7, pc}
 2284              	.L146:
 2285 0072 00BF     		.align	2
 2286              	.L145:
 2287 0074 00000000 		.word	xIdleTaskHandle
 2288 0078 00000000 		.word	.LC0
 2289 007c 00000000 		.word	prvIdleTask
 2290 0080 00000000 		.word	xNextTaskUnblockTime
 2291 0084 00000000 		.word	xSchedulerRunning
 2292 0088 00000000 		.word	xTickCount
 2293              		.cfi_endproc
 2294              	.LFE18:
 2296              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2297              		.align	1
 2298              		.global	vTaskEndScheduler
 2299              		.syntax unified
 2300              		.thumb
 2301              		.thumb_func
 2302              		.fpu fpv4-sp-d16
 2304              	vTaskEndScheduler:
 2305              	.LFB19:
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2306              		.loc 1 1934 0
 2307              		.cfi_startproc
 2308              		@ args = 0, pretend = 0, frame = 8
 2309              		@ frame_needed = 1, uses_anonymous_args = 0
 2310 0000 80B5     		push	{r7, lr}
 2311              	.LCFI71:
 2312              		.cfi_def_cfa_offset 8
 2313              		.cfi_offset 7, -8
 2314              		.cfi_offset 14, -4
 2315 0002 82B0     		sub	sp, sp, #8
 2316              	.LCFI72:
 2317              		.cfi_def_cfa_offset 16
 2318 0004 00AF     		add	r7, sp, #0
 2319              	.LCFI73:
 2320              		.cfi_def_cfa_register 7
 2321              	.LBB133:
 2322              	.LBB134:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2323              		.loc 2 237 0
 2324              		.syntax unified
 2325              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2326 0006 4FF05003 			mov r3, #80												
 2327 000a 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccDSLKwL.s 			page 80


 2328 000e BFF36F8F 		isb														
 2329 0012 BFF34F8F 		dsb														
 2330              	
 2331              	@ 0 "" 2
 2332              		.thumb
 2333              		.syntax unified
 2334 0016 7B60     		str	r3, [r7, #4]
 2335              	.LBE134:
 2336              	.LBE133:
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2337              		.loc 1 1939 0
 2338 0018 044B     		ldr	r3, .L148
 2339 001a 0022     		movs	r2, #0
 2340 001c 1A60     		str	r2, [r3]
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2341              		.loc 1 1940 0
 2342 001e FFF7FEFF 		bl	vPortEndScheduler
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2343              		.loc 1 1941 0
 2344 0022 00BF     		nop
 2345 0024 0837     		adds	r7, r7, #8
 2346              	.LCFI74:
 2347              		.cfi_def_cfa_offset 8
 2348 0026 BD46     		mov	sp, r7
 2349              	.LCFI75:
 2350              		.cfi_def_cfa_register 13
 2351              		@ sp needed
 2352 0028 80BD     		pop	{r7, pc}
 2353              	.L149:
 2354 002a 00BF     		.align	2
 2355              	.L148:
 2356 002c 00000000 		.word	xSchedulerRunning
 2357              		.cfi_endproc
 2358              	.LFE19:
 2360              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2361              		.align	1
 2362              		.global	vTaskSuspendAll
 2363              		.syntax unified
 2364              		.thumb
 2365              		.thumb_func
 2366              		.fpu fpv4-sp-d16
 2368              	vTaskSuspendAll:
 2369              	.LFB20:
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2370              		.loc 1 1945 0
 2371              		.cfi_startproc
 2372              		@ args = 0, pretend = 0, frame = 0
 2373              		@ frame_needed = 1, uses_anonymous_args = 0
 2374              		@ link register save eliminated.
 2375 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccDSLKwL.s 			page 81


 2376              	.LCFI76:
 2377              		.cfi_def_cfa_offset 4
 2378              		.cfi_offset 7, -4
 2379 0002 00AF     		add	r7, sp, #0
 2380              	.LCFI77:
 2381              		.cfi_def_cfa_register 7
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 2382              		.loc 1 1950 0
 2383 0004 044B     		ldr	r3, .L151
 2384 0006 1B68     		ldr	r3, [r3]
 2385 0008 0133     		adds	r3, r3, #1
 2386 000a 034A     		ldr	r2, .L151
 2387 000c 1360     		str	r3, [r2]
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2388              		.loc 1 1951 0
 2389 000e 00BF     		nop
 2390 0010 BD46     		mov	sp, r7
 2391              	.LCFI78:
 2392              		.cfi_def_cfa_register 13
 2393              		@ sp needed
 2394 0012 5DF8047B 		ldr	r7, [sp], #4
 2395              	.LCFI79:
 2396              		.cfi_restore 7
 2397              		.cfi_def_cfa_offset 0
 2398 0016 7047     		bx	lr
 2399              	.L152:
 2400              		.align	2
 2401              	.L151:
 2402 0018 00000000 		.word	uxSchedulerSuspended
 2403              		.cfi_endproc
 2404              	.LFE20:
 2406              		.section	.text.xTaskResumeAll,"ax",%progbits
 2407              		.align	1
 2408              		.global	xTaskResumeAll
 2409              		.syntax unified
 2410              		.thumb
 2411              		.thumb_func
 2412              		.fpu fpv4-sp-d16
 2414              	xTaskResumeAll:
 2415              	.LFB21:
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
ARM GAS  /tmp/ccDSLKwL.s 			page 82


1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2416              		.loc 1 2018 0
 2417              		.cfi_startproc
 2418              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccDSLKwL.s 			page 83


 2419              		@ frame_needed = 1, uses_anonymous_args = 0
 2420 0000 80B5     		push	{r7, lr}
 2421              	.LCFI80:
 2422              		.cfi_def_cfa_offset 8
 2423              		.cfi_offset 7, -8
 2424              		.cfi_offset 14, -4
 2425 0002 84B0     		sub	sp, sp, #16
 2426              	.LCFI81:
 2427              		.cfi_def_cfa_offset 24
 2428 0004 00AF     		add	r7, sp, #0
 2429              	.LCFI82:
 2430              		.cfi_def_cfa_register 7
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2431              		.loc 1 2019 0
 2432 0006 0023     		movs	r3, #0
 2433 0008 FB60     		str	r3, [r7, #12]
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2434              		.loc 1 2020 0
 2435 000a 0023     		movs	r3, #0
 2436 000c BB60     		str	r3, [r7, #8]
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2437              		.loc 1 2024 0
 2438 000e 414B     		ldr	r3, .L164
 2439 0010 1B68     		ldr	r3, [r3]
 2440 0012 002B     		cmp	r3, #0
 2441 0014 09D1     		bne	.L154
 2442              	.LBB135:
 2443              	.LBB136:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2444              		.loc 2 237 0 discriminator 1
 2445              		.syntax unified
 2446              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2447 0016 4FF05003 			mov r3, #80												
 2448 001a 83F31188 		msr basepri, r3											
 2449 001e BFF36F8F 		isb														
 2450 0022 BFF34F8F 		dsb														
 2451              	
 2452              	@ 0 "" 2
 2453              		.thumb
 2454              		.syntax unified
 2455 0026 3B60     		str	r3, [r7]
 2456              	.L155:
 2457              	.LBE136:
 2458              	.LBE135:
 2459              		.loc 1 2024 0 discriminator 1
 2460 0028 FEE7     		b	.L155
 2461              	.L154:
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
ARM GAS  /tmp/ccDSLKwL.s 			page 84


 2462              		.loc 1 2031 0
 2463 002a FFF7FEFF 		bl	vPortEnterCritical
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 2464              		.loc 1 2033 0
 2465 002e 394B     		ldr	r3, .L164
 2466 0030 1B68     		ldr	r3, [r3]
 2467 0032 013B     		subs	r3, r3, #1
 2468 0034 374A     		ldr	r2, .L164
 2469 0036 1360     		str	r3, [r2]
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2470              		.loc 1 2035 0
 2471 0038 364B     		ldr	r3, .L164
 2472 003a 1B68     		ldr	r3, [r3]
 2473 003c 002B     		cmp	r3, #0
 2474 003e 61D1     		bne	.L156
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2475              		.loc 1 2037 0
 2476 0040 354B     		ldr	r3, .L164+4
 2477 0042 1B68     		ldr	r3, [r3]
 2478 0044 002B     		cmp	r3, #0
 2479 0046 5DD0     		beq	.L156
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2480              		.loc 1 2041 0
 2481 0048 2EE0     		b	.L157
 2482              	.L158:
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 2483              		.loc 1 2043 0
 2484 004a 344B     		ldr	r3, .L164+8
 2485 004c DB68     		ldr	r3, [r3, #12]
 2486 004e DB68     		ldr	r3, [r3, #12]
 2487 0050 FB60     		str	r3, [r7, #12]
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2488              		.loc 1 2044 0
 2489 0052 FB68     		ldr	r3, [r7, #12]
 2490 0054 1833     		adds	r3, r3, #24
 2491 0056 1846     		mov	r0, r3
 2492 0058 FFF7FEFF 		bl	uxListRemove
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2493              		.loc 1 2045 0
 2494 005c FB68     		ldr	r3, [r7, #12]
 2495 005e 0433     		adds	r3, r3, #4
 2496 0060 1846     		mov	r0, r3
 2497 0062 FFF7FEFF 		bl	uxListRemove
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2498              		.loc 1 2046 0
 2499 0066 FB68     		ldr	r3, [r7, #12]
 2500 0068 DB6A     		ldr	r3, [r3, #44]
 2501 006a 0122     		movs	r2, #1
 2502 006c 9A40     		lsls	r2, r2, r3
 2503 006e 2C4B     		ldr	r3, .L164+12
ARM GAS  /tmp/ccDSLKwL.s 			page 85


 2504 0070 1B68     		ldr	r3, [r3]
 2505 0072 1343     		orrs	r3, r3, r2
 2506 0074 2A4A     		ldr	r2, .L164+12
 2507 0076 1360     		str	r3, [r2]
 2508 0078 FB68     		ldr	r3, [r7, #12]
 2509 007a DA6A     		ldr	r2, [r3, #44]
 2510 007c 1346     		mov	r3, r2
 2511 007e 9B00     		lsls	r3, r3, #2
 2512 0080 1344     		add	r3, r3, r2
 2513 0082 9B00     		lsls	r3, r3, #2
 2514 0084 274A     		ldr	r2, .L164+16
 2515 0086 1A44     		add	r2, r2, r3
 2516 0088 FB68     		ldr	r3, [r7, #12]
 2517 008a 0433     		adds	r3, r3, #4
 2518 008c 1946     		mov	r1, r3
 2519 008e 1046     		mov	r0, r2
 2520 0090 FFF7FEFF 		bl	vListInsertEnd
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2521              		.loc 1 2050 0
 2522 0094 FB68     		ldr	r3, [r7, #12]
 2523 0096 DA6A     		ldr	r2, [r3, #44]
 2524 0098 234B     		ldr	r3, .L164+20
 2525 009a 1B68     		ldr	r3, [r3]
 2526 009c DB6A     		ldr	r3, [r3, #44]
 2527 009e 9A42     		cmp	r2, r3
 2528 00a0 02D3     		bcc	.L157
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2529              		.loc 1 2052 0
 2530 00a2 224B     		ldr	r3, .L164+24
 2531 00a4 0122     		movs	r2, #1
 2532 00a6 1A60     		str	r2, [r3]
 2533              	.L157:
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2534              		.loc 1 2041 0
 2535 00a8 1C4B     		ldr	r3, .L164+8
 2536 00aa 1B68     		ldr	r3, [r3]
 2537 00ac 002B     		cmp	r3, #0
 2538 00ae CCD1     		bne	.L158
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 2539              		.loc 1 2060 0
 2540 00b0 FB68     		ldr	r3, [r7, #12]
 2541 00b2 002B     		cmp	r3, #0
 2542 00b4 01D0     		beq	.L159
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
ARM GAS  /tmp/ccDSLKwL.s 			page 86


2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2543              		.loc 1 2068 0
 2544 00b6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2545              	.L159:
 2546              	.LBB137:
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2547              		.loc 1 2076 0
 2548 00ba 1D4B     		ldr	r3, .L164+28
 2549 00bc 1B68     		ldr	r3, [r3]
 2550 00be 7B60     		str	r3, [r7, #4]
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2551              		.loc 1 2078 0
 2552 00c0 7B68     		ldr	r3, [r7, #4]
 2553 00c2 002B     		cmp	r3, #0
 2554 00c4 10D0     		beq	.L160
 2555              	.L162:
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2556              		.loc 1 2082 0
 2557 00c6 FFF7FEFF 		bl	xTaskIncrementTick
 2558 00ca 0346     		mov	r3, r0
 2559 00cc 002B     		cmp	r3, #0
 2560 00ce 02D0     		beq	.L161
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
 2561              		.loc 1 2084 0
 2562 00d0 164B     		ldr	r3, .L164+24
 2563 00d2 0122     		movs	r2, #1
 2564 00d4 1A60     		str	r2, [r3]
 2565              	.L161:
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
 2566              		.loc 1 2090 0
 2567 00d6 7B68     		ldr	r3, [r7, #4]
 2568 00d8 013B     		subs	r3, r3, #1
 2569 00da 7B60     		str	r3, [r7, #4]
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2570              		.loc 1 2091 0
 2571 00dc 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccDSLKwL.s 			page 87


 2572 00de 002B     		cmp	r3, #0
 2573 00e0 F1D1     		bne	.L162
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
 2574              		.loc 1 2093 0
 2575 00e2 134B     		ldr	r3, .L164+28
 2576 00e4 0022     		movs	r2, #0
 2577 00e6 1A60     		str	r2, [r3]
 2578              	.L160:
 2579              	.LBE137:
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2580              		.loc 1 2101 0
 2581 00e8 104B     		ldr	r3, .L164+24
 2582 00ea 1B68     		ldr	r3, [r3]
 2583 00ec 002B     		cmp	r3, #0
 2584 00ee 09D0     		beq	.L156
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2585              		.loc 1 2105 0
 2586 00f0 0123     		movs	r3, #1
 2587 00f2 BB60     		str	r3, [r7, #8]
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2588              		.loc 1 2108 0
 2589 00f4 0F4B     		ldr	r3, .L164+32
 2590 00f6 4FF08052 		mov	r2, #268435456
 2591 00fa 1A60     		str	r2, [r3]
 2592              		.syntax unified
 2593              	@ 2108 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2594 00fc BFF34F8F 		dsb
 2595              	@ 0 "" 2
 2596              	@ 2108 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2597 0100 BFF36F8F 		isb
 2598              	@ 0 "" 2
 2599              		.thumb
 2600              		.syntax unified
 2601              	.L156:
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccDSLKwL.s 			page 88


2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 2602              		.loc 1 2121 0
 2603 0104 FFF7FEFF 		bl	vPortExitCritical
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 2604              		.loc 1 2123 0
 2605 0108 BB68     		ldr	r3, [r7, #8]
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2606              		.loc 1 2124 0
 2607 010a 1846     		mov	r0, r3
 2608 010c 1037     		adds	r7, r7, #16
 2609              	.LCFI83:
 2610              		.cfi_def_cfa_offset 8
 2611 010e BD46     		mov	sp, r7
 2612              	.LCFI84:
 2613              		.cfi_def_cfa_register 13
 2614              		@ sp needed
 2615 0110 80BD     		pop	{r7, pc}
 2616              	.L165:
 2617 0112 00BF     		.align	2
 2618              	.L164:
 2619 0114 00000000 		.word	uxSchedulerSuspended
 2620 0118 00000000 		.word	uxCurrentNumberOfTasks
 2621 011c 00000000 		.word	xPendingReadyList
 2622 0120 00000000 		.word	uxTopReadyPriority
 2623 0124 00000000 		.word	pxReadyTasksLists
 2624 0128 00000000 		.word	pxCurrentTCB
 2625 012c 00000000 		.word	xYieldPending
 2626 0130 00000000 		.word	uxPendedTicks
 2627 0134 04ED00E0 		.word	-536810236
 2628              		.cfi_endproc
 2629              	.LFE21:
 2631              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2632              		.align	1
 2633              		.global	xTaskGetTickCount
 2634              		.syntax unified
 2635              		.thumb
 2636              		.thumb_func
 2637              		.fpu fpv4-sp-d16
 2639              	xTaskGetTickCount:
 2640              	.LFB22:
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2641              		.loc 1 2128 0
 2642              		.cfi_startproc
 2643              		@ args = 0, pretend = 0, frame = 8
 2644              		@ frame_needed = 1, uses_anonymous_args = 0
 2645              		@ link register save eliminated.
 2646 0000 80B4     		push	{r7}
 2647              	.LCFI85:
 2648              		.cfi_def_cfa_offset 4
 2649              		.cfi_offset 7, -4
 2650 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccDSLKwL.s 			page 89


 2651              	.LCFI86:
 2652              		.cfi_def_cfa_offset 16
 2653 0004 00AF     		add	r7, sp, #0
 2654              	.LCFI87:
 2655              		.cfi_def_cfa_register 7
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 2656              		.loc 1 2134 0
 2657 0006 054B     		ldr	r3, .L168
 2658 0008 1B68     		ldr	r3, [r3]
 2659 000a 7B60     		str	r3, [r7, #4]
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
 2660              		.loc 1 2138 0
 2661 000c 7B68     		ldr	r3, [r7, #4]
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2662              		.loc 1 2139 0
 2663 000e 1846     		mov	r0, r3
 2664 0010 0C37     		adds	r7, r7, #12
 2665              	.LCFI88:
 2666              		.cfi_def_cfa_offset 4
 2667 0012 BD46     		mov	sp, r7
 2668              	.LCFI89:
 2669              		.cfi_def_cfa_register 13
 2670              		@ sp needed
 2671 0014 5DF8047B 		ldr	r7, [sp], #4
 2672              	.LCFI90:
 2673              		.cfi_restore 7
 2674              		.cfi_def_cfa_offset 0
 2675 0018 7047     		bx	lr
 2676              	.L169:
 2677 001a 00BF     		.align	2
 2678              	.L168:
 2679 001c 00000000 		.word	xTickCount
 2680              		.cfi_endproc
 2681              	.LFE22:
 2683              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2684              		.align	1
 2685              		.global	xTaskGetTickCountFromISR
 2686              		.syntax unified
 2687              		.thumb
 2688              		.thumb_func
 2689              		.fpu fpv4-sp-d16
 2691              	xTaskGetTickCountFromISR:
 2692              	.LFB23:
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2693              		.loc 1 2143 0
 2694              		.cfi_startproc
ARM GAS  /tmp/ccDSLKwL.s 			page 90


 2695              		@ args = 0, pretend = 0, frame = 8
 2696              		@ frame_needed = 1, uses_anonymous_args = 0
 2697 0000 80B5     		push	{r7, lr}
 2698              	.LCFI91:
 2699              		.cfi_def_cfa_offset 8
 2700              		.cfi_offset 7, -8
 2701              		.cfi_offset 14, -4
 2702 0002 82B0     		sub	sp, sp, #8
 2703              	.LCFI92:
 2704              		.cfi_def_cfa_offset 16
 2705 0004 00AF     		add	r7, sp, #0
 2706              	.LCFI93:
 2707              		.cfi_def_cfa_register 7
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2708              		.loc 1 2161 0
 2709 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2710              		.loc 1 2163 0
 2711 000a 0023     		movs	r3, #0
 2712 000c 7B60     		str	r3, [r7, #4]
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 2713              		.loc 1 2165 0
 2714 000e 044B     		ldr	r3, .L172
 2715 0010 1B68     		ldr	r3, [r3]
 2716 0012 3B60     		str	r3, [r7]
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 2717              		.loc 1 2169 0
 2718 0014 3B68     		ldr	r3, [r7]
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2719              		.loc 1 2170 0
 2720 0016 1846     		mov	r0, r3
 2721 0018 0837     		adds	r7, r7, #8
 2722              	.LCFI94:
 2723              		.cfi_def_cfa_offset 8
 2724 001a BD46     		mov	sp, r7
ARM GAS  /tmp/ccDSLKwL.s 			page 91


 2725              	.LCFI95:
 2726              		.cfi_def_cfa_register 13
 2727              		@ sp needed
 2728 001c 80BD     		pop	{r7, pc}
 2729              	.L173:
 2730 001e 00BF     		.align	2
 2731              	.L172:
 2732 0020 00000000 		.word	xTickCount
 2733              		.cfi_endproc
 2734              	.LFE23:
 2736              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2737              		.align	1
 2738              		.global	uxTaskGetNumberOfTasks
 2739              		.syntax unified
 2740              		.thumb
 2741              		.thumb_func
 2742              		.fpu fpv4-sp-d16
 2744              	uxTaskGetNumberOfTasks:
 2745              	.LFB24:
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2746              		.loc 1 2174 0
 2747              		.cfi_startproc
 2748              		@ args = 0, pretend = 0, frame = 0
 2749              		@ frame_needed = 1, uses_anonymous_args = 0
 2750              		@ link register save eliminated.
 2751 0000 80B4     		push	{r7}
 2752              	.LCFI96:
 2753              		.cfi_def_cfa_offset 4
 2754              		.cfi_offset 7, -4
 2755 0002 00AF     		add	r7, sp, #0
 2756              	.LCFI97:
 2757              		.cfi_def_cfa_register 7
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 2758              		.loc 1 2177 0
 2759 0004 034B     		ldr	r3, .L176
 2760 0006 1B68     		ldr	r3, [r3]
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2761              		.loc 1 2178 0
 2762 0008 1846     		mov	r0, r3
 2763 000a BD46     		mov	sp, r7
 2764              	.LCFI98:
 2765              		.cfi_def_cfa_register 13
 2766              		@ sp needed
 2767 000c 5DF8047B 		ldr	r7, [sp], #4
 2768              	.LCFI99:
 2769              		.cfi_restore 7
 2770              		.cfi_def_cfa_offset 0
 2771 0010 7047     		bx	lr
 2772              	.L177:
 2773 0012 00BF     		.align	2
 2774              	.L176:
 2775 0014 00000000 		.word	uxCurrentNumberOfTasks
ARM GAS  /tmp/ccDSLKwL.s 			page 92


 2776              		.cfi_endproc
 2777              	.LFE24:
 2779              		.section	.text.pcTaskGetName,"ax",%progbits
 2780              		.align	1
 2781              		.global	pcTaskGetName
 2782              		.syntax unified
 2783              		.thumb
 2784              		.thumb_func
 2785              		.fpu fpv4-sp-d16
 2787              	pcTaskGetName:
 2788              	.LFB25:
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2789              		.loc 1 2182 0
 2790              		.cfi_startproc
 2791              		@ args = 0, pretend = 0, frame = 16
 2792              		@ frame_needed = 1, uses_anonymous_args = 0
 2793              		@ link register save eliminated.
 2794 0000 80B4     		push	{r7}
 2795              	.LCFI100:
 2796              		.cfi_def_cfa_offset 4
 2797              		.cfi_offset 7, -4
 2798 0002 85B0     		sub	sp, sp, #20
 2799              	.LCFI101:
 2800              		.cfi_def_cfa_offset 24
 2801 0004 00AF     		add	r7, sp, #0
 2802              	.LCFI102:
 2803              		.cfi_def_cfa_register 7
 2804 0006 7860     		str	r0, [r7, #4]
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2805              		.loc 1 2187 0
 2806 0008 7B68     		ldr	r3, [r7, #4]
 2807 000a 002B     		cmp	r3, #0
 2808 000c 02D1     		bne	.L179
 2809              		.loc 1 2187 0 is_stmt 0 discriminator 1
 2810 000e 0D4B     		ldr	r3, .L184
 2811 0010 1B68     		ldr	r3, [r3]
 2812 0012 00E0     		b	.L180
 2813              	.L179:
 2814              		.loc 1 2187 0 discriminator 2
 2815 0014 7B68     		ldr	r3, [r7, #4]
 2816              	.L180:
 2817              		.loc 1 2187 0 discriminator 4
 2818 0016 FB60     		str	r3, [r7, #12]
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2819              		.loc 1 2188 0 is_stmt 1 discriminator 4
 2820 0018 FB68     		ldr	r3, [r7, #12]
 2821 001a 002B     		cmp	r3, #0
 2822 001c 09D1     		bne	.L181
 2823              	.LBB138:
 2824              	.LBB139:
ARM GAS  /tmp/ccDSLKwL.s 			page 93


 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2825              		.loc 2 237 0 discriminator 1
 2826              		.syntax unified
 2827              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2828 001e 4FF05003 			mov r3, #80												
 2829 0022 83F31188 		msr basepri, r3											
 2830 0026 BFF36F8F 		isb														
 2831 002a BFF34F8F 		dsb														
 2832              	
 2833              	@ 0 "" 2
 2834              		.thumb
 2835              		.syntax unified
 2836 002e BB60     		str	r3, [r7, #8]
 2837              	.L182:
 2838              	.LBE139:
 2839              	.LBE138:
 2840              		.loc 1 2188 0 discriminator 1
 2841 0030 FEE7     		b	.L182
 2842              	.L181:
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2843              		.loc 1 2189 0
 2844 0032 FB68     		ldr	r3, [r7, #12]
 2845 0034 3433     		adds	r3, r3, #52
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2846              		.loc 1 2190 0
 2847 0036 1846     		mov	r0, r3
 2848 0038 1437     		adds	r7, r7, #20
 2849              	.LCFI103:
 2850              		.cfi_def_cfa_offset 4
 2851 003a BD46     		mov	sp, r7
 2852              	.LCFI104:
 2853              		.cfi_def_cfa_register 13
 2854              		@ sp needed
 2855 003c 5DF8047B 		ldr	r7, [sp], #4
 2856              	.LCFI105:
 2857              		.cfi_restore 7
 2858              		.cfi_def_cfa_offset 0
 2859 0040 7047     		bx	lr
 2860              	.L185:
 2861 0042 00BF     		.align	2
 2862              	.L184:
 2863 0044 00000000 		.word	pxCurrentTCB
 2864              		.cfi_endproc
 2865              	.LFE25:
 2867              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2868              		.align	1
 2869              		.global	xTaskIncrementTick
 2870              		.syntax unified
 2871              		.thumb
 2872              		.thumb_func
 2873              		.fpu fpv4-sp-d16
 2875              	xTaskIncrementTick:
 2876              	.LFB26:
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccDSLKwL.s 			page 94


2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
ARM GAS  /tmp/ccDSLKwL.s 			page 95


2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccDSLKwL.s 			page 96


2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
ARM GAS  /tmp/ccDSLKwL.s 			page 97


2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
ARM GAS  /tmp/ccDSLKwL.s 			page 98


2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
ARM GAS  /tmp/ccDSLKwL.s 			page 99


2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2877              		.loc 1 2500 0
 2878              		.cfi_startproc
 2879              		@ args = 0, pretend = 0, frame = 24
 2880              		@ frame_needed = 1, uses_anonymous_args = 0
 2881 0000 80B5     		push	{r7, lr}
 2882              	.LCFI106:
 2883              		.cfi_def_cfa_offset 8
 2884              		.cfi_offset 7, -8
 2885              		.cfi_offset 14, -4
 2886 0002 86B0     		sub	sp, sp, #24
 2887              	.LCFI107:
 2888              		.cfi_def_cfa_offset 32
 2889 0004 00AF     		add	r7, sp, #0
 2890              	.LCFI108:
 2891              		.cfi_def_cfa_register 7
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2892              		.loc 1 2503 0
 2893 0006 0023     		movs	r3, #0
 2894 0008 7B61     		str	r3, [r7, #20]
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2895              		.loc 1 2509 0
 2896 000a 504B     		ldr	r3, .L203
 2897 000c 1B68     		ldr	r3, [r3]
 2898 000e 002B     		cmp	r3, #0
 2899 0010 40F08C80 		bne	.L187
 2900              	.LBB140:
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
ARM GAS  /tmp/ccDSLKwL.s 			page 100


2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
 2901              		.loc 1 2513 0
 2902 0014 4E4B     		ldr	r3, .L203+4
 2903 0016 1B68     		ldr	r3, [r3]
 2904 0018 0133     		adds	r3, r3, #1
 2905 001a 3B61     		str	r3, [r7, #16]
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 2906              		.loc 1 2517 0
 2907 001c 4C4A     		ldr	r2, .L203+4
 2908 001e 3B69     		ldr	r3, [r7, #16]
 2909 0020 1360     		str	r3, [r2]
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
 2910              		.loc 1 2519 0
 2911 0022 3B69     		ldr	r3, [r7, #16]
 2912 0024 002B     		cmp	r3, #0
 2913 0026 1FD1     		bne	.L188
 2914              	.LBB141:
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 2915              		.loc 1 2521 0
 2916 0028 4A4B     		ldr	r3, .L203+8
 2917 002a 1B68     		ldr	r3, [r3]
 2918 002c 1B68     		ldr	r3, [r3]
 2919 002e 002B     		cmp	r3, #0
 2920 0030 09D0     		beq	.L189
 2921              	.LBB142:
 2922              	.LBB143:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2923              		.loc 2 237 0 discriminator 1
 2924              		.syntax unified
 2925              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2926 0032 4FF05003 			mov r3, #80												
 2927 0036 83F31188 		msr basepri, r3											
 2928 003a BFF36F8F 		isb														
 2929 003e BFF34F8F 		dsb														
 2930              	
 2931              	@ 0 "" 2
 2932              		.thumb
 2933              		.syntax unified
 2934 0042 3B60     		str	r3, [r7]
 2935              	.L190:
 2936              	.LBE143:
 2937              	.LBE142:
 2938              		.loc 1 2521 0 discriminator 1
 2939 0044 FEE7     		b	.L190
 2940              	.L189:
 2941              		.loc 1 2521 0 is_stmt 0 discriminator 2
 2942 0046 434B     		ldr	r3, .L203+8
 2943 0048 1B68     		ldr	r3, [r3]
 2944 004a FB60     		str	r3, [r7, #12]
 2945 004c 424B     		ldr	r3, .L203+12
 2946 004e 1B68     		ldr	r3, [r3]
 2947 0050 404A     		ldr	r2, .L203+8
ARM GAS  /tmp/ccDSLKwL.s 			page 101


 2948 0052 1360     		str	r3, [r2]
 2949 0054 404A     		ldr	r2, .L203+12
 2950 0056 FB68     		ldr	r3, [r7, #12]
 2951 0058 1360     		str	r3, [r2]
 2952 005a 404B     		ldr	r3, .L203+16
 2953 005c 1B68     		ldr	r3, [r3]
 2954 005e 0133     		adds	r3, r3, #1
 2955 0060 3E4A     		ldr	r2, .L203+16
 2956 0062 1360     		str	r3, [r2]
 2957 0064 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2958              	.L188:
 2959              	.LBE141:
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 2960              		.loc 1 2532 0 is_stmt 1
 2961 0068 3D4B     		ldr	r3, .L203+20
 2962 006a 1B68     		ldr	r3, [r3]
 2963 006c 3A69     		ldr	r2, [r7, #16]
 2964 006e 9A42     		cmp	r2, r3
 2965 0070 4DD3     		bcc	.L191
 2966              	.L198:
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2967              		.loc 1 2536 0
 2968 0072 384B     		ldr	r3, .L203+8
 2969 0074 1B68     		ldr	r3, [r3]
 2970 0076 1B68     		ldr	r3, [r3]
 2971 0078 002B     		cmp	r3, #0
 2972 007a 01D1     		bne	.L192
 2973              		.loc 1 2536 0 is_stmt 0 discriminator 1
 2974 007c 0123     		movs	r3, #1
 2975 007e 00E0     		b	.L193
 2976              	.L192:
 2977              		.loc 1 2536 0 discriminator 2
 2978 0080 0023     		movs	r3, #0
 2979              	.L193:
 2980              		.loc 1 2536 0 discriminator 4
 2981 0082 002B     		cmp	r3, #0
 2982 0084 04D0     		beq	.L194
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
ARM GAS  /tmp/ccDSLKwL.s 			page 102


 2983              		.loc 1 2543 0 is_stmt 1
 2984 0086 364B     		ldr	r3, .L203+20
 2985 0088 4FF0FF32 		mov	r2, #-1
 2986 008c 1A60     		str	r2, [r3]
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2987              		.loc 1 2544 0
 2988 008e 3EE0     		b	.L191
 2989              	.L194:
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 2990              		.loc 1 2552 0
 2991 0090 304B     		ldr	r3, .L203+8
 2992 0092 1B68     		ldr	r3, [r3]
 2993 0094 DB68     		ldr	r3, [r3, #12]
 2994 0096 DB68     		ldr	r3, [r3, #12]
 2995 0098 BB60     		str	r3, [r7, #8]
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2996              		.loc 1 2553 0
 2997 009a BB68     		ldr	r3, [r7, #8]
 2998 009c 5B68     		ldr	r3, [r3, #4]
 2999 009e 7B60     		str	r3, [r7, #4]
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 3000              		.loc 1 2555 0
 3001 00a0 3A69     		ldr	r2, [r7, #16]
 3002 00a2 7B68     		ldr	r3, [r7, #4]
 3003 00a4 9A42     		cmp	r2, r3
 3004 00a6 03D2     		bcs	.L195
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3005              		.loc 1 2562 0
 3006 00a8 2D4A     		ldr	r2, .L203+20
 3007 00aa 7B68     		ldr	r3, [r7, #4]
 3008 00ac 1360     		str	r3, [r2]
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 3009              		.loc 1 2563 0
 3010 00ae 2EE0     		b	.L191
 3011              	.L195:
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  /tmp/ccDSLKwL.s 			page 103


 3012              		.loc 1 2571 0
 3013 00b0 BB68     		ldr	r3, [r7, #8]
 3014 00b2 0433     		adds	r3, r3, #4
 3015 00b4 1846     		mov	r0, r3
 3016 00b6 FFF7FEFF 		bl	uxListRemove
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3017              		.loc 1 2575 0
 3018 00ba BB68     		ldr	r3, [r7, #8]
 3019 00bc 9B6A     		ldr	r3, [r3, #40]
 3020 00be 002B     		cmp	r3, #0
 3021 00c0 04D0     		beq	.L196
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3022              		.loc 1 2577 0
 3023 00c2 BB68     		ldr	r3, [r7, #8]
 3024 00c4 1833     		adds	r3, r3, #24
 3025 00c6 1846     		mov	r0, r3
 3026 00c8 FFF7FEFF 		bl	uxListRemove
 3027              	.L196:
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3028              		.loc 1 2586 0
 3029 00cc BB68     		ldr	r3, [r7, #8]
 3030 00ce DB6A     		ldr	r3, [r3, #44]
 3031 00d0 0122     		movs	r2, #1
 3032 00d2 9A40     		lsls	r2, r2, r3
 3033 00d4 234B     		ldr	r3, .L203+24
 3034 00d6 1B68     		ldr	r3, [r3]
 3035 00d8 1343     		orrs	r3, r3, r2
 3036 00da 224A     		ldr	r2, .L203+24
 3037 00dc 1360     		str	r3, [r2]
 3038 00de BB68     		ldr	r3, [r7, #8]
 3039 00e0 DA6A     		ldr	r2, [r3, #44]
 3040 00e2 1346     		mov	r3, r2
 3041 00e4 9B00     		lsls	r3, r3, #2
 3042 00e6 1344     		add	r3, r3, r2
 3043 00e8 9B00     		lsls	r3, r3, #2
 3044 00ea 1F4A     		ldr	r2, .L203+28
 3045 00ec 1A44     		add	r2, r2, r3
 3046 00ee BB68     		ldr	r3, [r7, #8]
 3047 00f0 0433     		adds	r3, r3, #4
 3048 00f2 1946     		mov	r1, r3
 3049 00f4 1046     		mov	r0, r2
 3050 00f6 FFF7FEFF 		bl	vListInsertEnd
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
ARM GAS  /tmp/ccDSLKwL.s 			page 104


2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3051              		.loc 1 2596 0
 3052 00fa BB68     		ldr	r3, [r7, #8]
 3053 00fc DA6A     		ldr	r2, [r3, #44]
 3054 00fe 1B4B     		ldr	r3, .L203+32
 3055 0100 1B68     		ldr	r3, [r3]
 3056 0102 DB6A     		ldr	r3, [r3, #44]
 3057 0104 9A42     		cmp	r2, r3
 3058 0106 B4D3     		bcc	.L198
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 3059              		.loc 1 2598 0
 3060 0108 0123     		movs	r3, #1
 3061 010a 7B61     		str	r3, [r7, #20]
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3062              		.loc 1 2536 0
 3063 010c B1E7     		b	.L198
 3064              	.L191:
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 3065              		.loc 1 2615 0
 3066 010e 174B     		ldr	r3, .L203+32
 3067 0110 1B68     		ldr	r3, [r3]
 3068 0112 DA6A     		ldr	r2, [r3, #44]
 3069 0114 1449     		ldr	r1, .L203+28
 3070 0116 1346     		mov	r3, r2
 3071 0118 9B00     		lsls	r3, r3, #2
 3072 011a 1344     		add	r3, r3, r2
 3073 011c 9B00     		lsls	r3, r3, #2
 3074 011e 0B44     		add	r3, r3, r1
 3075 0120 1B68     		ldr	r3, [r3]
 3076 0122 012B     		cmp	r3, #1
 3077 0124 07D9     		bls	.L200
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3078              		.loc 1 2617 0
ARM GAS  /tmp/ccDSLKwL.s 			page 105


 3079 0126 0123     		movs	r3, #1
 3080 0128 7B61     		str	r3, [r7, #20]
 3081 012a 04E0     		b	.L200
 3082              	.L187:
 3083              	.LBE140:
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
 3084              		.loc 1 2643 0
 3085 012c 104B     		ldr	r3, .L203+36
 3086 012e 1B68     		ldr	r3, [r3]
 3087 0130 0133     		adds	r3, r3, #1
 3088 0132 0F4A     		ldr	r2, .L203+36
 3089 0134 1360     		str	r3, [r2]
 3090              	.L200:
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
 3091              		.loc 1 2656 0
 3092 0136 0F4B     		ldr	r3, .L203+40
 3093 0138 1B68     		ldr	r3, [r3]
 3094 013a 002B     		cmp	r3, #0
 3095 013c 01D0     		beq	.L201
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccDSLKwL.s 			page 106


2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
 3096              		.loc 1 2658 0
 3097 013e 0123     		movs	r3, #1
 3098 0140 7B61     		str	r3, [r7, #20]
 3099              	.L201:
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 3100              		.loc 1 2667 0
 3101 0142 7B69     		ldr	r3, [r7, #20]
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3102              		.loc 1 2668 0
 3103 0144 1846     		mov	r0, r3
 3104 0146 1837     		adds	r7, r7, #24
 3105              	.LCFI109:
 3106              		.cfi_def_cfa_offset 8
 3107 0148 BD46     		mov	sp, r7
 3108              	.LCFI110:
 3109              		.cfi_def_cfa_register 13
 3110              		@ sp needed
 3111 014a 80BD     		pop	{r7, pc}
 3112              	.L204:
 3113              		.align	2
 3114              	.L203:
 3115 014c 00000000 		.word	uxSchedulerSuspended
 3116 0150 00000000 		.word	xTickCount
 3117 0154 00000000 		.word	pxDelayedTaskList
 3118 0158 00000000 		.word	pxOverflowDelayedTaskList
 3119 015c 00000000 		.word	xNumOfOverflows
 3120 0160 00000000 		.word	xNextTaskUnblockTime
 3121 0164 00000000 		.word	uxTopReadyPriority
 3122 0168 00000000 		.word	pxReadyTasksLists
 3123 016c 00000000 		.word	pxCurrentTCB
 3124 0170 00000000 		.word	uxPendedTicks
 3125 0174 00000000 		.word	xYieldPending
 3126              		.cfi_endproc
 3127              	.LFE26:
 3129              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3130              		.align	1
 3131              		.global	vTaskSwitchContext
 3132              		.syntax unified
 3133              		.thumb
 3134              		.thumb_func
 3135              		.fpu fpv4-sp-d16
 3137              	vTaskSwitchContext:
 3138              	.LFB27:
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
ARM GAS  /tmp/ccDSLKwL.s 			page 107


2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccDSLKwL.s 			page 108


2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3139              		.loc 1 2762 0
 3140              		.cfi_startproc
 3141              		@ args = 0, pretend = 0, frame = 24
 3142              		@ frame_needed = 1, uses_anonymous_args = 0
 3143              		@ link register save eliminated.
 3144 0000 80B4     		push	{r7}
 3145              	.LCFI111:
 3146              		.cfi_def_cfa_offset 4
 3147              		.cfi_offset 7, -4
 3148 0002 87B0     		sub	sp, sp, #28
 3149              	.LCFI112:
 3150              		.cfi_def_cfa_offset 32
 3151 0004 00AF     		add	r7, sp, #0
 3152              	.LCFI113:
 3153              		.cfi_def_cfa_register 7
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3154              		.loc 1 2763 0
 3155 0006 264B     		ldr	r3, .L213
 3156 0008 1B68     		ldr	r3, [r3]
 3157 000a 002B     		cmp	r3, #0
 3158 000c 03D0     		beq	.L206
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
ARM GAS  /tmp/ccDSLKwL.s 			page 109


 3159              		.loc 1 2767 0
 3160 000e 254B     		ldr	r3, .L213+4
 3161 0010 0122     		movs	r2, #1
 3162 0012 1A60     		str	r2, [r3]
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3163              		.loc 1 2817 0
 3164 0014 3EE0     		b	.L212
 3165              	.L206:
ARM GAS  /tmp/ccDSLKwL.s 			page 110


2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3166              		.loc 1 2771 0
 3167 0016 234B     		ldr	r3, .L213+4
 3168 0018 0022     		movs	r2, #0
 3169 001a 1A60     		str	r2, [r3]
 3170              	.LBB144:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3171              		.loc 1 2806 0
 3172 001c 224B     		ldr	r3, .L213+8
 3173 001e 1B68     		ldr	r3, [r3]
 3174 0020 FB60     		str	r3, [r7, #12]
 3175              	.LBB145:
 3176              	.LBB146:
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 3177              		.loc 2 176 0
 3178 0022 FB68     		ldr	r3, [r7, #12]
 3179              		.syntax unified
 3180              	@ 176 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3181 0024 B3FA83F3 		clz r3, r3
 3182              	@ 0 "" 2
 3183              		.thumb
 3184              		.syntax unified
 3185 0028 FB72     		strb	r3, [r7, #11]
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 3186              		.loc 2 177 0
 3187 002a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3188              	.LBE146:
 3189              	.LBE145:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3190              		.loc 1 2806 0
 3191 002c C3F11F03 		rsb	r3, r3, #31
 3192 0030 7B61     		str	r3, [r7, #20]
 3193 0032 1E49     		ldr	r1, .L213+12
 3194 0034 7A69     		ldr	r2, [r7, #20]
 3195 0036 1346     		mov	r3, r2
 3196 0038 9B00     		lsls	r3, r3, #2
 3197 003a 1344     		add	r3, r3, r2
 3198 003c 9B00     		lsls	r3, r3, #2
 3199 003e 0B44     		add	r3, r3, r1
 3200 0040 1B68     		ldr	r3, [r3]
 3201 0042 002B     		cmp	r3, #0
 3202 0044 09D1     		bne	.L209
 3203              	.LBB147:
 3204              	.LBB148:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3205              		.loc 2 237 0 discriminator 1
 3206              		.syntax unified
 3207              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3208 0046 4FF05003 			mov r3, #80												
 3209 004a 83F31188 		msr basepri, r3											
 3210 004e BFF36F8F 		isb														
 3211 0052 BFF34F8F 		dsb														
 3212              	
 3213              	@ 0 "" 2
 3214              		.thumb
 3215              		.syntax unified
 3216 0056 7B60     		str	r3, [r7, #4]
ARM GAS  /tmp/ccDSLKwL.s 			page 111


 3217              	.L210:
 3218              	.LBE148:
 3219              	.LBE147:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3220              		.loc 1 2806 0 discriminator 1
 3221 0058 FEE7     		b	.L210
 3222              	.L209:
 3223              	.LBB149:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3224              		.loc 1 2806 0 is_stmt 0 discriminator 2
 3225 005a 7A69     		ldr	r2, [r7, #20]
 3226 005c 1346     		mov	r3, r2
 3227 005e 9B00     		lsls	r3, r3, #2
 3228 0060 1344     		add	r3, r3, r2
 3229 0062 9B00     		lsls	r3, r3, #2
 3230 0064 114A     		ldr	r2, .L213+12
 3231 0066 1344     		add	r3, r3, r2
 3232 0068 3B61     		str	r3, [r7, #16]
 3233 006a 3B69     		ldr	r3, [r7, #16]
 3234 006c 5B68     		ldr	r3, [r3, #4]
 3235 006e 5A68     		ldr	r2, [r3, #4]
 3236 0070 3B69     		ldr	r3, [r7, #16]
 3237 0072 5A60     		str	r2, [r3, #4]
 3238 0074 3B69     		ldr	r3, [r7, #16]
 3239 0076 5A68     		ldr	r2, [r3, #4]
 3240 0078 3B69     		ldr	r3, [r7, #16]
 3241 007a 0833     		adds	r3, r3, #8
 3242 007c 9A42     		cmp	r2, r3
 3243 007e 04D1     		bne	.L211
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3244              		.loc 1 2806 0 discriminator 3
 3245 0080 3B69     		ldr	r3, [r7, #16]
 3246 0082 5B68     		ldr	r3, [r3, #4]
 3247 0084 5A68     		ldr	r2, [r3, #4]
 3248 0086 3B69     		ldr	r3, [r7, #16]
 3249 0088 5A60     		str	r2, [r3, #4]
 3250              	.L211:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3251              		.loc 1 2806 0 discriminator 5
 3252 008a 3B69     		ldr	r3, [r7, #16]
 3253 008c 5B68     		ldr	r3, [r3, #4]
 3254 008e DB68     		ldr	r3, [r3, #12]
 3255 0090 074A     		ldr	r2, .L213+16
 3256 0092 1360     		str	r3, [r2]
 3257              	.L212:
 3258              	.LBE149:
 3259              	.LBE144:
 3260              		.loc 1 2817 0 is_stmt 1
 3261 0094 00BF     		nop
 3262 0096 1C37     		adds	r7, r7, #28
 3263              	.LCFI114:
 3264              		.cfi_def_cfa_offset 4
 3265 0098 BD46     		mov	sp, r7
 3266              	.LCFI115:
 3267              		.cfi_def_cfa_register 13
 3268              		@ sp needed
 3269 009a 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccDSLKwL.s 			page 112


 3270              	.LCFI116:
 3271              		.cfi_restore 7
 3272              		.cfi_def_cfa_offset 0
 3273 009e 7047     		bx	lr
 3274              	.L214:
 3275              		.align	2
 3276              	.L213:
 3277 00a0 00000000 		.word	uxSchedulerSuspended
 3278 00a4 00000000 		.word	xYieldPending
 3279 00a8 00000000 		.word	uxTopReadyPriority
 3280 00ac 00000000 		.word	pxReadyTasksLists
 3281 00b0 00000000 		.word	pxCurrentTCB
 3282              		.cfi_endproc
 3283              	.LFE27:
 3285              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3286              		.align	1
 3287              		.global	vTaskPlaceOnEventList
 3288              		.syntax unified
 3289              		.thumb
 3290              		.thumb_func
 3291              		.fpu fpv4-sp-d16
 3293              	vTaskPlaceOnEventList:
 3294              	.LFB28:
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3295              		.loc 1 2821 0
 3296              		.cfi_startproc
 3297              		@ args = 0, pretend = 0, frame = 16
 3298              		@ frame_needed = 1, uses_anonymous_args = 0
 3299 0000 80B5     		push	{r7, lr}
 3300              	.LCFI117:
 3301              		.cfi_def_cfa_offset 8
 3302              		.cfi_offset 7, -8
 3303              		.cfi_offset 14, -4
 3304 0002 84B0     		sub	sp, sp, #16
 3305              	.LCFI118:
 3306              		.cfi_def_cfa_offset 24
 3307 0004 00AF     		add	r7, sp, #0
 3308              	.LCFI119:
 3309              		.cfi_def_cfa_register 7
 3310 0006 7860     		str	r0, [r7, #4]
 3311 0008 3960     		str	r1, [r7]
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3312              		.loc 1 2822 0
 3313 000a 7B68     		ldr	r3, [r7, #4]
 3314 000c 002B     		cmp	r3, #0
 3315 000e 09D1     		bne	.L216
 3316              	.LBB150:
 3317              	.LBB151:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3318              		.loc 2 237 0 discriminator 1
 3319              		.syntax unified
 3320              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3321 0010 4FF05003 			mov r3, #80												
 3322 0014 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccDSLKwL.s 			page 113


 3323 0018 BFF36F8F 		isb														
 3324 001c BFF34F8F 		dsb														
 3325              	
 3326              	@ 0 "" 2
 3327              		.thumb
 3328              		.syntax unified
 3329 0020 FB60     		str	r3, [r7, #12]
 3330              	.L217:
 3331              	.LBE151:
 3332              	.LBE150:
 3333              		.loc 1 2822 0 discriminator 1
 3334 0022 FEE7     		b	.L217
 3335              	.L216:
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3336              		.loc 1 2831 0
 3337 0024 074B     		ldr	r3, .L218
 3338 0026 1B68     		ldr	r3, [r3]
 3339 0028 1833     		adds	r3, r3, #24
 3340 002a 1946     		mov	r1, r3
 3341 002c 7868     		ldr	r0, [r7, #4]
 3342 002e FFF7FEFF 		bl	vListInsert
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3343              		.loc 1 2833 0
 3344 0032 0121     		movs	r1, #1
 3345 0034 3868     		ldr	r0, [r7]
 3346 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3347              		.loc 1 2834 0
 3348 003a 00BF     		nop
 3349 003c 1037     		adds	r7, r7, #16
 3350              	.LCFI120:
 3351              		.cfi_def_cfa_offset 8
 3352 003e BD46     		mov	sp, r7
 3353              	.LCFI121:
 3354              		.cfi_def_cfa_register 13
 3355              		@ sp needed
 3356 0040 80BD     		pop	{r7, pc}
 3357              	.L219:
 3358 0042 00BF     		.align	2
 3359              	.L218:
 3360 0044 00000000 		.word	pxCurrentTCB
 3361              		.cfi_endproc
 3362              	.LFE28:
 3364              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3365              		.align	1
 3366              		.global	vTaskPlaceOnUnorderedEventList
 3367              		.syntax unified
 3368              		.thumb
ARM GAS  /tmp/ccDSLKwL.s 			page 114


 3369              		.thumb_func
 3370              		.fpu fpv4-sp-d16
 3372              	vTaskPlaceOnUnorderedEventList:
 3373              	.LFB29:
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3374              		.loc 1 2838 0
 3375              		.cfi_startproc
 3376              		@ args = 0, pretend = 0, frame = 24
 3377              		@ frame_needed = 1, uses_anonymous_args = 0
 3378 0000 80B5     		push	{r7, lr}
 3379              	.LCFI122:
 3380              		.cfi_def_cfa_offset 8
 3381              		.cfi_offset 7, -8
 3382              		.cfi_offset 14, -4
 3383 0002 86B0     		sub	sp, sp, #24
 3384              	.LCFI123:
 3385              		.cfi_def_cfa_offset 32
 3386 0004 00AF     		add	r7, sp, #0
 3387              	.LCFI124:
 3388              		.cfi_def_cfa_register 7
 3389 0006 F860     		str	r0, [r7, #12]
 3390 0008 B960     		str	r1, [r7, #8]
 3391 000a 7A60     		str	r2, [r7, #4]
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3392              		.loc 1 2839 0
 3393 000c FB68     		ldr	r3, [r7, #12]
 3394 000e 002B     		cmp	r3, #0
 3395 0010 09D1     		bne	.L221
 3396              	.LBB152:
 3397              	.LBB153:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3398              		.loc 2 237 0 discriminator 1
 3399              		.syntax unified
 3400              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3401 0012 4FF05003 			mov r3, #80												
 3402 0016 83F31188 		msr basepri, r3											
 3403 001a BFF36F8F 		isb														
 3404 001e BFF34F8F 		dsb														
 3405              	
 3406              	@ 0 "" 2
 3407              		.thumb
 3408              		.syntax unified
 3409 0022 7B61     		str	r3, [r7, #20]
 3410              	.L222:
 3411              	.LBE153:
 3412              	.LBE152:
 3413              		.loc 1 2839 0 discriminator 1
 3414 0024 FEE7     		b	.L222
 3415              	.L221:
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 3416              		.loc 1 2843 0
ARM GAS  /tmp/ccDSLKwL.s 			page 115


 3417 0026 114B     		ldr	r3, .L225
 3418 0028 1B68     		ldr	r3, [r3]
 3419 002a 002B     		cmp	r3, #0
 3420 002c 09D1     		bne	.L223
 3421              	.LBB154:
 3422              	.LBB155:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3423              		.loc 2 237 0 discriminator 1
 3424              		.syntax unified
 3425              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3426 002e 4FF05003 			mov r3, #80												
 3427 0032 83F31188 		msr basepri, r3											
 3428 0036 BFF36F8F 		isb														
 3429 003a BFF34F8F 		dsb														
 3430              	
 3431              	@ 0 "" 2
 3432              		.thumb
 3433              		.syntax unified
 3434 003e 3B61     		str	r3, [r7, #16]
 3435              	.L224:
 3436              	.LBE155:
 3437              	.LBE154:
 3438              		.loc 1 2843 0 discriminator 2
 3439 0040 FEE7     		b	.L224
 3440              	.L223:
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 3441              		.loc 1 2848 0
 3442 0042 0B4B     		ldr	r3, .L225+4
 3443 0044 1B68     		ldr	r3, [r3]
 3444 0046 BA68     		ldr	r2, [r7, #8]
 3445 0048 42F00042 		orr	r2, r2, #-2147483648
 3446 004c 9A61     		str	r2, [r3, #24]
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3447              		.loc 1 2855 0
 3448 004e 084B     		ldr	r3, .L225+4
 3449 0050 1B68     		ldr	r3, [r3]
 3450 0052 1833     		adds	r3, r3, #24
 3451 0054 1946     		mov	r1, r3
 3452 0056 F868     		ldr	r0, [r7, #12]
 3453 0058 FFF7FEFF 		bl	vListInsertEnd
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3454              		.loc 1 2857 0
 3455 005c 0121     		movs	r1, #1
 3456 005e 7868     		ldr	r0, [r7, #4]
 3457 0060 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccDSLKwL.s 			page 116


 3458              		.loc 1 2858 0
 3459 0064 00BF     		nop
 3460 0066 1837     		adds	r7, r7, #24
 3461              	.LCFI125:
 3462              		.cfi_def_cfa_offset 8
 3463 0068 BD46     		mov	sp, r7
 3464              	.LCFI126:
 3465              		.cfi_def_cfa_register 13
 3466              		@ sp needed
 3467 006a 80BD     		pop	{r7, pc}
 3468              	.L226:
 3469              		.align	2
 3470              	.L225:
 3471 006c 00000000 		.word	uxSchedulerSuspended
 3472 0070 00000000 		.word	pxCurrentTCB
 3473              		.cfi_endproc
 3474              	.LFE29:
 3476              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3477              		.align	1
 3478              		.global	xTaskRemoveFromEventList
 3479              		.syntax unified
 3480              		.thumb
 3481              		.thumb_func
 3482              		.fpu fpv4-sp-d16
 3484              	xTaskRemoveFromEventList:
 3485              	.LFB30:
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccDSLKwL.s 			page 117


2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3486              		.loc 1 2895 0
 3487              		.cfi_startproc
 3488              		@ args = 0, pretend = 0, frame = 24
 3489              		@ frame_needed = 1, uses_anonymous_args = 0
 3490 0000 80B5     		push	{r7, lr}
 3491              	.LCFI127:
 3492              		.cfi_def_cfa_offset 8
 3493              		.cfi_offset 7, -8
 3494              		.cfi_offset 14, -4
 3495 0002 86B0     		sub	sp, sp, #24
 3496              	.LCFI128:
 3497              		.cfi_def_cfa_offset 32
 3498 0004 00AF     		add	r7, sp, #0
 3499              	.LCFI129:
 3500              		.cfi_def_cfa_register 7
 3501 0006 7860     		str	r0, [r7, #4]
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 3502              		.loc 1 2912 0
 3503 0008 7B68     		ldr	r3, [r7, #4]
 3504 000a DB68     		ldr	r3, [r3, #12]
 3505 000c DB68     		ldr	r3, [r3, #12]
 3506 000e 3B61     		str	r3, [r7, #16]
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3507              		.loc 1 2913 0
 3508 0010 3B69     		ldr	r3, [r7, #16]
 3509 0012 002B     		cmp	r3, #0
 3510 0014 09D1     		bne	.L228
 3511              	.LBB156:
 3512              	.LBB157:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3513              		.loc 2 237 0 discriminator 1
 3514              		.syntax unified
 3515              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3516 0016 4FF05003 			mov r3, #80												
 3517 001a 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccDSLKwL.s 			page 118


 3518 001e BFF36F8F 		isb														
 3519 0022 BFF34F8F 		dsb														
 3520              	
 3521              	@ 0 "" 2
 3522              		.thumb
 3523              		.syntax unified
 3524 0026 FB60     		str	r3, [r7, #12]
 3525              	.L229:
 3526              	.LBE157:
 3527              	.LBE156:
 3528              		.loc 1 2913 0 discriminator 1
 3529 0028 FEE7     		b	.L229
 3530              	.L228:
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3531              		.loc 1 2914 0
 3532 002a 3B69     		ldr	r3, [r7, #16]
 3533 002c 1833     		adds	r3, r3, #24
 3534 002e 1846     		mov	r0, r3
 3535 0030 FFF7FEFF 		bl	uxListRemove
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3536              		.loc 1 2916 0
 3537 0034 1D4B     		ldr	r3, .L235
 3538 0036 1B68     		ldr	r3, [r3]
 3539 0038 002B     		cmp	r3, #0
 3540 003a 1CD1     		bne	.L230
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3541              		.loc 1 2918 0
 3542 003c 3B69     		ldr	r3, [r7, #16]
 3543 003e 0433     		adds	r3, r3, #4
 3544 0040 1846     		mov	r0, r3
 3545 0042 FFF7FEFF 		bl	uxListRemove
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3546              		.loc 1 2919 0
 3547 0046 3B69     		ldr	r3, [r7, #16]
 3548 0048 DB6A     		ldr	r3, [r3, #44]
 3549 004a 0122     		movs	r2, #1
 3550 004c 9A40     		lsls	r2, r2, r3
 3551 004e 184B     		ldr	r3, .L235+4
 3552 0050 1B68     		ldr	r3, [r3]
 3553 0052 1343     		orrs	r3, r3, r2
 3554 0054 164A     		ldr	r2, .L235+4
 3555 0056 1360     		str	r3, [r2]
 3556 0058 3B69     		ldr	r3, [r7, #16]
 3557 005a DA6A     		ldr	r2, [r3, #44]
 3558 005c 1346     		mov	r3, r2
 3559 005e 9B00     		lsls	r3, r3, #2
 3560 0060 1344     		add	r3, r3, r2
 3561 0062 9B00     		lsls	r3, r3, #2
 3562 0064 134A     		ldr	r2, .L235+8
 3563 0066 1A44     		add	r2, r2, r3
 3564 0068 3B69     		ldr	r3, [r7, #16]
 3565 006a 0433     		adds	r3, r3, #4
 3566 006c 1946     		mov	r1, r3
 3567 006e 1046     		mov	r0, r2
 3568 0070 FFF7FEFF 		bl	vListInsertEnd
ARM GAS  /tmp/ccDSLKwL.s 			page 119


 3569 0074 05E0     		b	.L231
 3570              	.L230:
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 3571              		.loc 1 2925 0
 3572 0076 3B69     		ldr	r3, [r7, #16]
 3573 0078 1833     		adds	r3, r3, #24
 3574 007a 1946     		mov	r1, r3
 3575 007c 0E48     		ldr	r0, .L235+12
 3576 007e FFF7FEFF 		bl	vListInsertEnd
 3577              	.L231:
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3578              		.loc 1 2928 0
 3579 0082 3B69     		ldr	r3, [r7, #16]
 3580 0084 DA6A     		ldr	r2, [r3, #44]
 3581 0086 0D4B     		ldr	r3, .L235+16
 3582 0088 1B68     		ldr	r3, [r3]
 3583 008a DB6A     		ldr	r3, [r3, #44]
 3584 008c 9A42     		cmp	r2, r3
 3585 008e 05D9     		bls	.L232
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 3586              		.loc 1 2933 0
 3587 0090 0123     		movs	r3, #1
 3588 0092 7B61     		str	r3, [r7, #20]
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3589              		.loc 1 2937 0
 3590 0094 0A4B     		ldr	r3, .L235+20
 3591 0096 0122     		movs	r2, #1
 3592 0098 1A60     		str	r2, [r3]
 3593 009a 01E0     		b	.L233
 3594              	.L232:
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 3595              		.loc 1 2941 0
 3596 009c 0023     		movs	r3, #0
 3597 009e 7B61     		str	r3, [r7, #20]
 3598              	.L233:
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
ARM GAS  /tmp/ccDSLKwL.s 			page 120


2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3599              		.loc 1 2958 0
 3600 00a0 7B69     		ldr	r3, [r7, #20]
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3601              		.loc 1 2959 0
 3602 00a2 1846     		mov	r0, r3
 3603 00a4 1837     		adds	r7, r7, #24
 3604              	.LCFI130:
 3605              		.cfi_def_cfa_offset 8
 3606 00a6 BD46     		mov	sp, r7
 3607              	.LCFI131:
 3608              		.cfi_def_cfa_register 13
 3609              		@ sp needed
 3610 00a8 80BD     		pop	{r7, pc}
 3611              	.L236:
 3612 00aa 00BF     		.align	2
 3613              	.L235:
 3614 00ac 00000000 		.word	uxSchedulerSuspended
 3615 00b0 00000000 		.word	uxTopReadyPriority
 3616 00b4 00000000 		.word	pxReadyTasksLists
 3617 00b8 00000000 		.word	xPendingReadyList
 3618 00bc 00000000 		.word	pxCurrentTCB
 3619 00c0 00000000 		.word	xYieldPending
 3620              		.cfi_endproc
 3621              	.LFE30:
 3623              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3624              		.align	1
 3625              		.global	xTaskRemoveFromUnorderedEventList
 3626              		.syntax unified
 3627              		.thumb
 3628              		.thumb_func
 3629              		.fpu fpv4-sp-d16
 3631              	xTaskRemoveFromUnorderedEventList:
 3632              	.LFB31:
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3633              		.loc 1 2963 0
 3634              		.cfi_startproc
 3635              		@ args = 0, pretend = 0, frame = 24
 3636              		@ frame_needed = 1, uses_anonymous_args = 0
 3637 0000 80B5     		push	{r7, lr}
 3638              	.LCFI132:
 3639              		.cfi_def_cfa_offset 8
 3640              		.cfi_offset 7, -8
ARM GAS  /tmp/ccDSLKwL.s 			page 121


 3641              		.cfi_offset 14, -4
 3642 0002 86B0     		sub	sp, sp, #24
 3643              	.LCFI133:
 3644              		.cfi_def_cfa_offset 32
 3645 0004 00AF     		add	r7, sp, #0
 3646              	.LCFI134:
 3647              		.cfi_def_cfa_register 7
 3648 0006 7860     		str	r0, [r7, #4]
 3649 0008 3960     		str	r1, [r7]
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 3650              		.loc 1 2969 0
 3651 000a 2B4B     		ldr	r3, .L245
 3652 000c 1B68     		ldr	r3, [r3]
 3653 000e 002B     		cmp	r3, #0
 3654 0010 09D1     		bne	.L238
 3655              	.LBB158:
 3656              	.LBB159:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3657              		.loc 2 237 0 discriminator 1
 3658              		.syntax unified
 3659              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3660 0012 4FF05003 			mov r3, #80												
 3661 0016 83F31188 		msr basepri, r3											
 3662 001a BFF36F8F 		isb														
 3663 001e BFF34F8F 		dsb														
 3664              	
 3665              	@ 0 "" 2
 3666              		.thumb
 3667              		.syntax unified
 3668 0022 FB60     		str	r3, [r7, #12]
 3669              	.L239:
 3670              	.LBE159:
 3671              	.LBE158:
 3672              		.loc 1 2969 0 discriminator 1
 3673 0024 FEE7     		b	.L239
 3674              	.L238:
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3675              		.loc 1 2972 0
 3676 0026 3B68     		ldr	r3, [r7]
 3677 0028 43F00042 		orr	r2, r3, #-2147483648
 3678 002c 7B68     		ldr	r3, [r7, #4]
 3679 002e 1A60     		str	r2, [r3]
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 3680              		.loc 1 2976 0
 3681 0030 7B68     		ldr	r3, [r7, #4]
 3682 0032 DB68     		ldr	r3, [r3, #12]
 3683 0034 3B61     		str	r3, [r7, #16]
ARM GAS  /tmp/ccDSLKwL.s 			page 122


2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3684              		.loc 1 2977 0
 3685 0036 3B69     		ldr	r3, [r7, #16]
 3686 0038 002B     		cmp	r3, #0
 3687 003a 09D1     		bne	.L240
 3688              	.LBB160:
 3689              	.LBB161:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3690              		.loc 2 237 0 discriminator 1
 3691              		.syntax unified
 3692              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3693 003c 4FF05003 			mov r3, #80												
 3694 0040 83F31188 		msr basepri, r3											
 3695 0044 BFF36F8F 		isb														
 3696 0048 BFF34F8F 		dsb														
 3697              	
 3698              	@ 0 "" 2
 3699              		.thumb
 3700              		.syntax unified
 3701 004c BB60     		str	r3, [r7, #8]
 3702              	.L241:
 3703              	.LBE161:
 3704              	.LBE160:
 3705              		.loc 1 2977 0 discriminator 2
 3706 004e FEE7     		b	.L241
 3707              	.L240:
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3708              		.loc 1 2978 0
 3709 0050 7868     		ldr	r0, [r7, #4]
 3710 0052 FFF7FEFF 		bl	uxListRemove
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3711              		.loc 1 2983 0
 3712 0056 3B69     		ldr	r3, [r7, #16]
 3713 0058 0433     		adds	r3, r3, #4
 3714 005a 1846     		mov	r0, r3
 3715 005c FFF7FEFF 		bl	uxListRemove
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3716              		.loc 1 2984 0
 3717 0060 3B69     		ldr	r3, [r7, #16]
 3718 0062 DB6A     		ldr	r3, [r3, #44]
 3719 0064 0122     		movs	r2, #1
 3720 0066 9A40     		lsls	r2, r2, r3
 3721 0068 144B     		ldr	r3, .L245+4
 3722 006a 1B68     		ldr	r3, [r3]
 3723 006c 1343     		orrs	r3, r3, r2
 3724 006e 134A     		ldr	r2, .L245+4
 3725 0070 1360     		str	r3, [r2]
 3726 0072 3B69     		ldr	r3, [r7, #16]
 3727 0074 DA6A     		ldr	r2, [r3, #44]
 3728 0076 1346     		mov	r3, r2
 3729 0078 9B00     		lsls	r3, r3, #2
 3730 007a 1344     		add	r3, r3, r2
 3731 007c 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccDSLKwL.s 			page 123


 3732 007e 104A     		ldr	r2, .L245+8
 3733 0080 1A44     		add	r2, r2, r3
 3734 0082 3B69     		ldr	r3, [r7, #16]
 3735 0084 0433     		adds	r3, r3, #4
 3736 0086 1946     		mov	r1, r3
 3737 0088 1046     		mov	r0, r2
 3738 008a FFF7FEFF 		bl	vListInsertEnd
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3739              		.loc 1 2986 0
 3740 008e 3B69     		ldr	r3, [r7, #16]
 3741 0090 DA6A     		ldr	r2, [r3, #44]
 3742 0092 0C4B     		ldr	r3, .L245+12
 3743 0094 1B68     		ldr	r3, [r3]
 3744 0096 DB6A     		ldr	r3, [r3, #44]
 3745 0098 9A42     		cmp	r2, r3
 3746 009a 05D9     		bls	.L242
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch now. */
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 3747              		.loc 1 2992 0
 3748 009c 0123     		movs	r3, #1
 3749 009e 7B61     		str	r3, [r7, #20]
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3750              		.loc 1 2996 0
 3751 00a0 094B     		ldr	r3, .L245+16
 3752 00a2 0122     		movs	r2, #1
 3753 00a4 1A60     		str	r2, [r3]
 3754 00a6 01E0     		b	.L243
 3755              	.L242:
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 3756              		.loc 1 3000 0
 3757 00a8 0023     		movs	r3, #0
 3758 00aa 7B61     		str	r3, [r7, #20]
 3759              	.L243:
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3760              		.loc 1 3003 0
 3761 00ac 7B69     		ldr	r3, [r7, #20]
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3762              		.loc 1 3004 0
 3763 00ae 1846     		mov	r0, r3
 3764 00b0 1837     		adds	r7, r7, #24
 3765              	.LCFI135:
 3766              		.cfi_def_cfa_offset 8
 3767 00b2 BD46     		mov	sp, r7
 3768              	.LCFI136:
ARM GAS  /tmp/ccDSLKwL.s 			page 124


 3769              		.cfi_def_cfa_register 13
 3770              		@ sp needed
 3771 00b4 80BD     		pop	{r7, pc}
 3772              	.L246:
 3773 00b6 00BF     		.align	2
 3774              	.L245:
 3775 00b8 00000000 		.word	uxSchedulerSuspended
 3776 00bc 00000000 		.word	uxTopReadyPriority
 3777 00c0 00000000 		.word	pxReadyTasksLists
 3778 00c4 00000000 		.word	pxCurrentTCB
 3779 00c8 00000000 		.word	xYieldPending
 3780              		.cfi_endproc
 3781              	.LFE31:
 3783              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3784              		.align	1
 3785              		.global	vTaskSetTimeOutState
 3786              		.syntax unified
 3787              		.thumb
 3788              		.thumb_func
 3789              		.fpu fpv4-sp-d16
 3791              	vTaskSetTimeOutState:
 3792              	.LFB32:
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3793              		.loc 1 3008 0
 3794              		.cfi_startproc
 3795              		@ args = 0, pretend = 0, frame = 16
 3796              		@ frame_needed = 1, uses_anonymous_args = 0
 3797              		@ link register save eliminated.
 3798 0000 80B4     		push	{r7}
 3799              	.LCFI137:
 3800              		.cfi_def_cfa_offset 4
 3801              		.cfi_offset 7, -4
 3802 0002 85B0     		sub	sp, sp, #20
 3803              	.LCFI138:
 3804              		.cfi_def_cfa_offset 24
 3805 0004 00AF     		add	r7, sp, #0
 3806              	.LCFI139:
 3807              		.cfi_def_cfa_register 7
 3808 0006 7860     		str	r0, [r7, #4]
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3809              		.loc 1 3009 0
 3810 0008 7B68     		ldr	r3, [r7, #4]
 3811 000a 002B     		cmp	r3, #0
 3812 000c 09D1     		bne	.L248
 3813              	.LBB162:
 3814              	.LBB163:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3815              		.loc 2 237 0 discriminator 1
 3816              		.syntax unified
 3817              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3818 000e 4FF05003 			mov r3, #80												
 3819 0012 83F31188 		msr basepri, r3											
 3820 0016 BFF36F8F 		isb														
 3821 001a BFF34F8F 		dsb														
ARM GAS  /tmp/ccDSLKwL.s 			page 125


 3822              	
 3823              	@ 0 "" 2
 3824              		.thumb
 3825              		.syntax unified
 3826 001e FB60     		str	r3, [r7, #12]
 3827              	.L249:
 3828              	.LBE163:
 3829              	.LBE162:
 3830              		.loc 1 3009 0 discriminator 1
 3831 0020 FEE7     		b	.L249
 3832              	.L248:
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3833              		.loc 1 3010 0
 3834 0022 074B     		ldr	r3, .L250
 3835 0024 1A68     		ldr	r2, [r3]
 3836 0026 7B68     		ldr	r3, [r7, #4]
 3837 0028 1A60     		str	r2, [r3]
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3838              		.loc 1 3011 0
 3839 002a 064B     		ldr	r3, .L250+4
 3840 002c 1A68     		ldr	r2, [r3]
 3841 002e 7B68     		ldr	r3, [r7, #4]
 3842 0030 5A60     		str	r2, [r3, #4]
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3843              		.loc 1 3012 0
 3844 0032 00BF     		nop
 3845 0034 1437     		adds	r7, r7, #20
 3846              	.LCFI140:
 3847              		.cfi_def_cfa_offset 4
 3848 0036 BD46     		mov	sp, r7
 3849              	.LCFI141:
 3850              		.cfi_def_cfa_register 13
 3851              		@ sp needed
 3852 0038 5DF8047B 		ldr	r7, [sp], #4
 3853              	.LCFI142:
 3854              		.cfi_restore 7
 3855              		.cfi_def_cfa_offset 0
 3856 003c 7047     		bx	lr
 3857              	.L251:
 3858 003e 00BF     		.align	2
 3859              	.L250:
 3860 0040 00000000 		.word	xNumOfOverflows
 3861 0044 00000000 		.word	xTickCount
 3862              		.cfi_endproc
 3863              	.LFE32:
 3865              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3866              		.align	1
 3867              		.global	xTaskCheckForTimeOut
 3868              		.syntax unified
 3869              		.thumb
 3870              		.thumb_func
 3871              		.fpu fpv4-sp-d16
 3873              	xTaskCheckForTimeOut:
 3874              	.LFB33:
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
ARM GAS  /tmp/ccDSLKwL.s 			page 126


3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3875              		.loc 1 3016 0
 3876              		.cfi_startproc
 3877              		@ args = 0, pretend = 0, frame = 24
 3878              		@ frame_needed = 1, uses_anonymous_args = 0
 3879 0000 80B5     		push	{r7, lr}
 3880              	.LCFI143:
 3881              		.cfi_def_cfa_offset 8
 3882              		.cfi_offset 7, -8
 3883              		.cfi_offset 14, -4
 3884 0002 86B0     		sub	sp, sp, #24
 3885              	.LCFI144:
 3886              		.cfi_def_cfa_offset 32
 3887 0004 00AF     		add	r7, sp, #0
 3888              	.LCFI145:
 3889              		.cfi_def_cfa_register 7
 3890 0006 7860     		str	r0, [r7, #4]
 3891 0008 3960     		str	r1, [r7]
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3892              		.loc 1 3019 0
 3893 000a 7B68     		ldr	r3, [r7, #4]
 3894 000c 002B     		cmp	r3, #0
 3895 000e 09D1     		bne	.L253
 3896              	.LBB164:
 3897              	.LBB165:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3898              		.loc 2 237 0 discriminator 1
 3899              		.syntax unified
 3900              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3901 0010 4FF05003 			mov r3, #80												
 3902 0014 83F31188 		msr basepri, r3											
 3903 0018 BFF36F8F 		isb														
 3904 001c BFF34F8F 		dsb														
 3905              	
 3906              	@ 0 "" 2
 3907              		.thumb
 3908              		.syntax unified
 3909 0020 FB60     		str	r3, [r7, #12]
 3910              	.L254:
 3911              	.LBE165:
 3912              	.LBE164:
 3913              		.loc 1 3019 0 discriminator 1
 3914 0022 FEE7     		b	.L254
 3915              	.L253:
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3916              		.loc 1 3020 0
 3917 0024 3B68     		ldr	r3, [r7]
 3918 0026 002B     		cmp	r3, #0
 3919 0028 09D1     		bne	.L255
 3920              	.LBB166:
 3921              	.LBB167:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3922              		.loc 2 237 0 discriminator 1
 3923              		.syntax unified
 3924              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/ccDSLKwL.s 			page 127


 3925 002a 4FF05003 			mov r3, #80												
 3926 002e 83F31188 		msr basepri, r3											
 3927 0032 BFF36F8F 		isb														
 3928 0036 BFF34F8F 		dsb														
 3929              	
 3930              	@ 0 "" 2
 3931              		.thumb
 3932              		.syntax unified
 3933 003a BB60     		str	r3, [r7, #8]
 3934              	.L256:
 3935              	.LBE167:
 3936              	.LBE166:
 3937              		.loc 1 3020 0 discriminator 2
 3938 003c FEE7     		b	.L256
 3939              	.L255:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3940              		.loc 1 3022 0
 3941 003e FFF7FEFF 		bl	vPortEnterCritical
 3942              	.LBB168:
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 3943              		.loc 1 3025 0
 3944 0042 1C4B     		ldr	r3, .L262
 3945 0044 1B68     		ldr	r3, [r3]
 3946 0046 3B61     		str	r3, [r7, #16]
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 3947              		.loc 1 3039 0
 3948 0048 3B68     		ldr	r3, [r7]
 3949 004a 1B68     		ldr	r3, [r3]
 3950 004c B3F1FF3F 		cmp	r3, #-1
 3951 0050 02D1     		bne	.L257
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 3952              		.loc 1 3044 0
 3953 0052 0023     		movs	r3, #0
 3954 0054 7B61     		str	r3, [r7, #20]
 3955 0056 26E0     		b	.L258
 3956              	.L257:
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccDSLKwL.s 			page 128


3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 3957              		.loc 1 3049 0
 3958 0058 7B68     		ldr	r3, [r7, #4]
 3959 005a 1A68     		ldr	r2, [r3]
 3960 005c 164B     		ldr	r3, .L262+4
 3961 005e 1B68     		ldr	r3, [r3]
 3962 0060 9A42     		cmp	r2, r3
 3963 0062 07D0     		beq	.L259
 3964              		.loc 1 3049 0 is_stmt 0 discriminator 1
 3965 0064 7B68     		ldr	r3, [r7, #4]
 3966 0066 5A68     		ldr	r2, [r3, #4]
 3967 0068 3B69     		ldr	r3, [r7, #16]
 3968 006a 9A42     		cmp	r2, r3
 3969 006c 02D8     		bhi	.L259
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3970              		.loc 1 3056 0 is_stmt 1
 3971 006e 0123     		movs	r3, #1
 3972 0070 7B61     		str	r3, [r7, #20]
 3973 0072 18E0     		b	.L258
 3974              	.L259:
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
 3975              		.loc 1 3058 0
 3976 0074 7B68     		ldr	r3, [r7, #4]
 3977 0076 5B68     		ldr	r3, [r3, #4]
 3978 0078 3A69     		ldr	r2, [r7, #16]
 3979 007a D21A     		subs	r2, r2, r3
 3980 007c 3B68     		ldr	r3, [r7]
 3981 007e 1B68     		ldr	r3, [r3]
 3982 0080 9A42     		cmp	r2, r3
 3983 0082 0ED2     		bcs	.L260
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 3984              		.loc 1 3061 0
 3985 0084 3B68     		ldr	r3, [r7]
 3986 0086 1A68     		ldr	r2, [r3]
 3987 0088 7B68     		ldr	r3, [r7, #4]
 3988 008a 5968     		ldr	r1, [r3, #4]
 3989 008c 3B69     		ldr	r3, [r7, #16]
 3990 008e CB1A     		subs	r3, r1, r3
 3991 0090 1A44     		add	r2, r2, r3
 3992 0092 3B68     		ldr	r3, [r7]
 3993 0094 1A60     		str	r2, [r3]
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3994              		.loc 1 3062 0
 3995 0096 7868     		ldr	r0, [r7, #4]
 3996 0098 FFF7FEFF 		bl	vTaskSetTimeOutState
ARM GAS  /tmp/ccDSLKwL.s 			page 129


3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3997              		.loc 1 3063 0
 3998 009c 0023     		movs	r3, #0
 3999 009e 7B61     		str	r3, [r7, #20]
 4000 00a0 01E0     		b	.L258
 4001              	.L260:
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4002              		.loc 1 3067 0
 4003 00a2 0123     		movs	r3, #1
 4004 00a4 7B61     		str	r3, [r7, #20]
 4005              	.L258:
 4006              	.LBE168:
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4007              		.loc 1 3070 0
 4008 00a6 FFF7FEFF 		bl	vPortExitCritical
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4009              		.loc 1 3072 0
 4010 00aa 7B69     		ldr	r3, [r7, #20]
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4011              		.loc 1 3073 0
 4012 00ac 1846     		mov	r0, r3
 4013 00ae 1837     		adds	r7, r7, #24
 4014              	.LCFI146:
 4015              		.cfi_def_cfa_offset 8
 4016 00b0 BD46     		mov	sp, r7
 4017              	.LCFI147:
 4018              		.cfi_def_cfa_register 13
 4019              		@ sp needed
 4020 00b2 80BD     		pop	{r7, pc}
 4021              	.L263:
 4022              		.align	2
 4023              	.L262:
 4024 00b4 00000000 		.word	xTickCount
 4025 00b8 00000000 		.word	xNumOfOverflows
 4026              		.cfi_endproc
 4027              	.LFE33:
 4029              		.section	.text.vTaskMissedYield,"ax",%progbits
 4030              		.align	1
 4031              		.global	vTaskMissedYield
 4032              		.syntax unified
 4033              		.thumb
 4034              		.thumb_func
 4035              		.fpu fpv4-sp-d16
 4037              	vTaskMissedYield:
 4038              	.LFB34:
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4039              		.loc 1 3077 0
 4040              		.cfi_startproc
ARM GAS  /tmp/ccDSLKwL.s 			page 130


 4041              		@ args = 0, pretend = 0, frame = 0
 4042              		@ frame_needed = 1, uses_anonymous_args = 0
 4043              		@ link register save eliminated.
 4044 0000 80B4     		push	{r7}
 4045              	.LCFI148:
 4046              		.cfi_def_cfa_offset 4
 4047              		.cfi_offset 7, -4
 4048 0002 00AF     		add	r7, sp, #0
 4049              	.LCFI149:
 4050              		.cfi_def_cfa_register 7
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4051              		.loc 1 3078 0
 4052 0004 034B     		ldr	r3, .L265
 4053 0006 0122     		movs	r2, #1
 4054 0008 1A60     		str	r2, [r3]
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4055              		.loc 1 3079 0
 4056 000a 00BF     		nop
 4057 000c BD46     		mov	sp, r7
 4058              	.LCFI150:
 4059              		.cfi_def_cfa_register 13
 4060              		@ sp needed
 4061 000e 5DF8047B 		ldr	r7, [sp], #4
 4062              	.LCFI151:
 4063              		.cfi_restore 7
 4064              		.cfi_def_cfa_offset 0
 4065 0012 7047     		bx	lr
 4066              	.L266:
 4067              		.align	2
 4068              	.L265:
 4069 0014 00000000 		.word	xYieldPending
 4070              		.cfi_endproc
 4071              	.LFE34:
 4073              		.section	.text.prvIdleTask,"ax",%progbits
 4074              		.align	1
 4075              		.syntax unified
 4076              		.thumb
 4077              		.thumb_func
 4078              		.fpu fpv4-sp-d16
 4080              	prvIdleTask:
 4081              	.LFB35:
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccDSLKwL.s 			page 131


3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4082              		.loc 1 3132 0
 4083              		.cfi_startproc
 4084              		@ args = 0, pretend = 0, frame = 8
 4085              		@ frame_needed = 1, uses_anonymous_args = 0
 4086 0000 80B5     		push	{r7, lr}
 4087              	.LCFI152:
 4088              		.cfi_def_cfa_offset 8
 4089              		.cfi_offset 7, -8
 4090              		.cfi_offset 14, -4
 4091 0002 82B0     		sub	sp, sp, #8
 4092              	.LCFI153:
 4093              		.cfi_def_cfa_offset 16
 4094 0004 00AF     		add	r7, sp, #0
 4095              	.LCFI154:
 4096              		.cfi_def_cfa_register 7
 4097 0006 7860     		str	r0, [r7, #4]
 4098              	.L269:
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccDSLKwL.s 			page 132


3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 4099              		.loc 1 3143 0
 4100 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 4101              		.loc 1 3166 0
 4102 000c 064B     		ldr	r3, .L270
 4103 000e 1B68     		ldr	r3, [r3]
 4104 0010 012B     		cmp	r3, #1
 4105 0012 F9D9     		bls	.L269
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 4106              		.loc 1 3168 0
 4107 0014 054B     		ldr	r3, .L270+4
 4108 0016 4FF08052 		mov	r2, #268435456
 4109 001a 1A60     		str	r2, [r3]
 4110              		.syntax unified
 4111              	@ 3168 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4112 001c BFF34F8F 		dsb
 4113              	@ 0 "" 2
 4114              	@ 3168 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4115 0020 BFF36F8F 		isb
 4116              	@ 0 "" 2
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4117              		.loc 1 3143 0
 4118              		.thumb
 4119              		.syntax unified
 4120 0024 F0E7     		b	.L269
 4121              	.L271:
ARM GAS  /tmp/ccDSLKwL.s 			page 133


 4122 0026 00BF     		.align	2
 4123              	.L270:
 4124 0028 00000000 		.word	pxReadyTasksLists
 4125 002c 04ED00E0 		.word	-536810236
 4126              		.cfi_endproc
 4127              	.LFE35:
 4129              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 4130              		.align	1
 4131              		.syntax unified
 4132              		.thumb
 4133              		.thumb_func
 4134              		.fpu fpv4-sp-d16
 4136              	prvInitialiseTaskLists:
 4137              	.LFB36:
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
ARM GAS  /tmp/ccDSLKwL.s 			page 134


3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccDSLKwL.s 			page 135


3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
ARM GAS  /tmp/ccDSLKwL.s 			page 136


3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4138              		.loc 1 3334 0
 4139              		.cfi_startproc
 4140              		@ args = 0, pretend = 0, frame = 8
 4141              		@ frame_needed = 1, uses_anonymous_args = 0
 4142 0000 80B5     		push	{r7, lr}
 4143              	.LCFI155:
 4144              		.cfi_def_cfa_offset 8
 4145              		.cfi_offset 7, -8
 4146              		.cfi_offset 14, -4
 4147 0002 82B0     		sub	sp, sp, #8
 4148              	.LCFI156:
 4149              		.cfi_def_cfa_offset 16
 4150 0004 00AF     		add	r7, sp, #0
 4151              	.LCFI157:
 4152              		.cfi_def_cfa_register 7
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 4153              		.loc 1 3337 0
 4154 0006 0023     		movs	r3, #0
 4155 0008 7B60     		str	r3, [r7, #4]
 4156 000a 0CE0     		b	.L273
 4157              	.L274:
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 4158              		.loc 1 3339 0 discriminator 3
 4159 000c 7A68     		ldr	r2, [r7, #4]
 4160 000e 1346     		mov	r3, r2
 4161 0010 9B00     		lsls	r3, r3, #2
 4162 0012 1344     		add	r3, r3, r2
 4163 0014 9B00     		lsls	r3, r3, #2
 4164 0016 124A     		ldr	r2, .L275
 4165 0018 1344     		add	r3, r3, r2
 4166 001a 1846     		mov	r0, r3
 4167 001c FFF7FEFF 		bl	vListInitialise
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4168              		.loc 1 3337 0 discriminator 3
 4169 0020 7B68     		ldr	r3, [r7, #4]
 4170 0022 0133     		adds	r3, r3, #1
 4171 0024 7B60     		str	r3, [r7, #4]
 4172              	.L273:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4173              		.loc 1 3337 0 is_stmt 0 discriminator 1
 4174 0026 7B68     		ldr	r3, [r7, #4]
 4175 0028 062B     		cmp	r3, #6
 4176 002a EFD9     		bls	.L274
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccDSLKwL.s 			page 137


3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 4177              		.loc 1 3342 0 is_stmt 1
 4178 002c 0D48     		ldr	r0, .L275+4
 4179 002e FFF7FEFF 		bl	vListInitialise
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 4180              		.loc 1 3343 0
 4181 0032 0D48     		ldr	r0, .L275+8
 4182 0034 FFF7FEFF 		bl	vListInitialise
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 4183              		.loc 1 3344 0
 4184 0038 0C48     		ldr	r0, .L275+12
 4185 003a FFF7FEFF 		bl	vListInitialise
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 4186              		.loc 1 3348 0
 4187 003e 0C48     		ldr	r0, .L275+16
 4188 0040 FFF7FEFF 		bl	vListInitialise
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 4189              		.loc 1 3354 0
 4190 0044 0B48     		ldr	r0, .L275+20
 4191 0046 FFF7FEFF 		bl	vListInitialise
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 4192              		.loc 1 3360 0
 4193 004a 0B4B     		ldr	r3, .L275+24
 4194 004c 054A     		ldr	r2, .L275+4
 4195 004e 1A60     		str	r2, [r3]
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 4196              		.loc 1 3361 0
 4197 0050 0A4B     		ldr	r3, .L275+28
 4198 0052 054A     		ldr	r2, .L275+8
 4199 0054 1A60     		str	r2, [r3]
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4200              		.loc 1 3362 0
 4201 0056 00BF     		nop
 4202 0058 0837     		adds	r7, r7, #8
 4203              	.LCFI158:
 4204              		.cfi_def_cfa_offset 8
 4205 005a BD46     		mov	sp, r7
 4206              	.LCFI159:
 4207              		.cfi_def_cfa_register 13
 4208              		@ sp needed
 4209 005c 80BD     		pop	{r7, pc}
 4210              	.L276:
 4211 005e 00BF     		.align	2
 4212              	.L275:
ARM GAS  /tmp/ccDSLKwL.s 			page 138


 4213 0060 00000000 		.word	pxReadyTasksLists
 4214 0064 00000000 		.word	xDelayedTaskList1
 4215 0068 00000000 		.word	xDelayedTaskList2
 4216 006c 00000000 		.word	xPendingReadyList
 4217 0070 00000000 		.word	xTasksWaitingTermination
 4218 0074 00000000 		.word	xSuspendedTaskList
 4219 0078 00000000 		.word	pxDelayedTaskList
 4220 007c 00000000 		.word	pxOverflowDelayedTaskList
 4221              		.cfi_endproc
 4222              	.LFE36:
 4224              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 4225              		.align	1
 4226              		.syntax unified
 4227              		.thumb
 4228              		.thumb_func
 4229              		.fpu fpv4-sp-d16
 4231              	prvCheckTasksWaitingTermination:
 4232              	.LFB37:
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4233              		.loc 1 3366 0
 4234              		.cfi_startproc
 4235              		@ args = 0, pretend = 0, frame = 8
 4236              		@ frame_needed = 1, uses_anonymous_args = 0
 4237 0000 80B5     		push	{r7, lr}
 4238              	.LCFI160:
 4239              		.cfi_def_cfa_offset 8
 4240              		.cfi_offset 7, -8
 4241              		.cfi_offset 14, -4
 4242 0002 82B0     		sub	sp, sp, #8
 4243              	.LCFI161:
 4244              		.cfi_def_cfa_offset 16
 4245 0004 00AF     		add	r7, sp, #0
 4246              	.LCFI162:
 4247              		.cfi_def_cfa_register 7
 4248              	.LBB169:
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 4249              		.loc 1 3376 0
 4250 0006 28E0     		b	.L278
 4251              	.L279:
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 4252              		.loc 1 3378 0
 4253 0008 FFF7FEFF 		bl	vTaskSuspendAll
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
ARM GAS  /tmp/ccDSLKwL.s 			page 139


 4254              		.loc 1 3380 0
 4255 000c 174B     		ldr	r3, .L280
 4256 000e 1B68     		ldr	r3, [r3]
 4257 0010 002B     		cmp	r3, #0
 4258 0012 0CBF     		ite	eq
 4259 0014 0123     		moveq	r3, #1
 4260 0016 0023     		movne	r3, #0
 4261 0018 DBB2     		uxtb	r3, r3
 4262 001a 7B60     		str	r3, [r7, #4]
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xTaskResumeAll();
 4263              		.loc 1 3382 0
 4264 001c FFF7FEFF 		bl	xTaskResumeAll
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 4265              		.loc 1 3384 0
 4266 0020 7B68     		ldr	r3, [r7, #4]
 4267 0022 002B     		cmp	r3, #0
 4268 0024 19D1     		bne	.L278
 4269              	.LBB170:
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				TCB_t *pxTCB;
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
 4270              		.loc 1 3388 0
 4271 0026 FFF7FEFF 		bl	vPortEnterCritical
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 4272              		.loc 1 3390 0
 4273 002a 104B     		ldr	r3, .L280
 4274 002c DB68     		ldr	r3, [r3, #12]
 4275 002e DB68     		ldr	r3, [r3, #12]
 4276 0030 3B60     		str	r3, [r7]
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4277              		.loc 1 3391 0
 4278 0032 3B68     		ldr	r3, [r7]
 4279 0034 0433     		adds	r3, r3, #4
 4280 0036 1846     		mov	r0, r3
 4281 0038 FFF7FEFF 		bl	uxListRemove
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 4282              		.loc 1 3392 0
 4283 003c 0C4B     		ldr	r3, .L280+4
 4284 003e 1B68     		ldr	r3, [r3]
 4285 0040 013B     		subs	r3, r3, #1
 4286 0042 0B4A     		ldr	r2, .L280+4
 4287 0044 1360     		str	r3, [r2]
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 4288              		.loc 1 3393 0
 4289 0046 0B4B     		ldr	r3, .L280+8
 4290 0048 1B68     		ldr	r3, [r3]
 4291 004a 013B     		subs	r3, r3, #1
 4292 004c 094A     		ldr	r2, .L280+8
 4293 004e 1360     		str	r3, [r2]
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
 4294              		.loc 1 3395 0
 4295 0050 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/ccDSLKwL.s 			page 140


3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 4296              		.loc 1 3397 0
 4297 0054 3868     		ldr	r0, [r7]
 4298 0056 FFF7FEFF 		bl	prvDeleteTCB
 4299              	.L278:
 4300              	.LBE170:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4301              		.loc 1 3376 0
 4302 005a 064B     		ldr	r3, .L280+8
 4303 005c 1B68     		ldr	r3, [r3]
 4304 005e 002B     		cmp	r3, #0
 4305 0060 D2D1     		bne	.L279
 4306              	.LBE169:
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4307              		.loc 1 3406 0
 4308 0062 00BF     		nop
 4309 0064 0837     		adds	r7, r7, #8
 4310              	.LCFI163:
 4311              		.cfi_def_cfa_offset 8
 4312 0066 BD46     		mov	sp, r7
 4313              	.LCFI164:
 4314              		.cfi_def_cfa_register 13
 4315              		@ sp needed
 4316 0068 80BD     		pop	{r7, pc}
 4317              	.L281:
 4318 006a 00BF     		.align	2
 4319              	.L280:
 4320 006c 00000000 		.word	xTasksWaitingTermination
 4321 0070 00000000 		.word	uxCurrentNumberOfTasks
 4322 0074 00000000 		.word	uxDeletedTasksWaitingCleanUp
 4323              		.cfi_endproc
 4324              	.LFE37:
 4326              		.section	.text.prvDeleteTCB,"ax",%progbits
 4327              		.align	1
 4328              		.syntax unified
 4329              		.thumb
 4330              		.thumb_func
 4331              		.fpu fpv4-sp-d16
 4333              	prvDeleteTCB:
 4334              	.LFB38:
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccDSLKwL.s 			page 141


3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being in the Blocked state. */
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xTaskResumeAll();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		just set to whatever is passed in. */
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccDSLKwL.s 			page 142


3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
ARM GAS  /tmp/ccDSLKwL.s 			page 143


3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4335              		.loc 1 3582 0
 4336              		.cfi_startproc
 4337              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccDSLKwL.s 			page 144


 4338              		@ frame_needed = 1, uses_anonymous_args = 0
 4339 0000 80B5     		push	{r7, lr}
 4340              	.LCFI165:
 4341              		.cfi_def_cfa_offset 8
 4342              		.cfi_offset 7, -8
 4343              		.cfi_offset 14, -4
 4344 0002 82B0     		sub	sp, sp, #8
 4345              	.LCFI166:
 4346              		.cfi_def_cfa_offset 16
 4347 0004 00AF     		add	r7, sp, #0
 4348              	.LCFI167:
 4349              		.cfi_def_cfa_register 7
 4350 0006 7860     		str	r0, [r7, #4]
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
 4351              		.loc 1 3600 0
 4352 0008 7B68     		ldr	r3, [r7, #4]
 4353 000a 1B6B     		ldr	r3, [r3, #48]
 4354 000c 1846     		mov	r0, r3
 4355 000e FFF7FEFF 		bl	vPortFree
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 4356              		.loc 1 3601 0
 4357 0012 7868     		ldr	r0, [r7, #4]
 4358 0014 FFF7FEFF 		bl	vPortFree
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
ARM GAS  /tmp/ccDSLKwL.s 			page 145


3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4359              		.loc 1 3630 0
 4360 0018 00BF     		nop
 4361 001a 0837     		adds	r7, r7, #8
 4362              	.LCFI168:
 4363              		.cfi_def_cfa_offset 8
 4364 001c BD46     		mov	sp, r7
 4365              	.LCFI169:
 4366              		.cfi_def_cfa_register 13
 4367              		@ sp needed
 4368 001e 80BD     		pop	{r7, pc}
 4369              		.cfi_endproc
 4370              	.LFE38:
 4372              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 4373              		.align	1
 4374              		.syntax unified
 4375              		.thumb
 4376              		.thumb_func
 4377              		.fpu fpv4-sp-d16
 4379              	prvResetNextTaskUnblockTime:
 4380              	.LFB39:
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4381              		.loc 1 3636 0
 4382              		.cfi_startproc
 4383              		@ args = 0, pretend = 0, frame = 8
 4384              		@ frame_needed = 1, uses_anonymous_args = 0
 4385              		@ link register save eliminated.
 4386 0000 80B4     		push	{r7}
 4387              	.LCFI170:
 4388              		.cfi_def_cfa_offset 4
 4389              		.cfi_offset 7, -4
 4390 0002 83B0     		sub	sp, sp, #12
 4391              	.LCFI171:
 4392              		.cfi_def_cfa_offset 16
 4393 0004 00AF     		add	r7, sp, #0
 4394              	.LCFI172:
 4395              		.cfi_def_cfa_register 7
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4396              		.loc 1 3639 0
ARM GAS  /tmp/ccDSLKwL.s 			page 146


 4397 0006 0F4B     		ldr	r3, .L289
 4398 0008 1B68     		ldr	r3, [r3]
 4399 000a 1B68     		ldr	r3, [r3]
 4400 000c 002B     		cmp	r3, #0
 4401 000e 01D1     		bne	.L284
 4402              		.loc 1 3639 0 is_stmt 0 discriminator 1
 4403 0010 0123     		movs	r3, #1
 4404 0012 00E0     		b	.L285
 4405              	.L284:
 4406              		.loc 1 3639 0 discriminator 2
 4407 0014 0023     		movs	r3, #0
 4408              	.L285:
 4409              		.loc 1 3639 0 discriminator 4
 4410 0016 002B     		cmp	r3, #0
 4411 0018 04D0     		beq	.L286
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 4412              		.loc 1 3645 0 is_stmt 1
 4413 001a 0B4B     		ldr	r3, .L289+4
 4414 001c 4FF0FF32 		mov	r2, #-1
 4415 0020 1A60     		str	r2, [r3]
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4416              		.loc 1 3656 0
 4417 0022 08E0     		b	.L288
 4418              	.L286:
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 4419              		.loc 1 3653 0
 4420 0024 074B     		ldr	r3, .L289
 4421 0026 1B68     		ldr	r3, [r3]
 4422 0028 DB68     		ldr	r3, [r3, #12]
 4423 002a DB68     		ldr	r3, [r3, #12]
 4424 002c 7B60     		str	r3, [r7, #4]
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4425              		.loc 1 3654 0
 4426 002e 7B68     		ldr	r3, [r7, #4]
 4427 0030 5B68     		ldr	r3, [r3, #4]
 4428 0032 054A     		ldr	r2, .L289+4
 4429 0034 1360     		str	r3, [r2]
 4430              	.L288:
 4431              		.loc 1 3656 0
 4432 0036 00BF     		nop
 4433 0038 0C37     		adds	r7, r7, #12
 4434              	.LCFI173:
ARM GAS  /tmp/ccDSLKwL.s 			page 147


 4435              		.cfi_def_cfa_offset 4
 4436 003a BD46     		mov	sp, r7
 4437              	.LCFI174:
 4438              		.cfi_def_cfa_register 13
 4439              		@ sp needed
 4440 003c 5DF8047B 		ldr	r7, [sp], #4
 4441              	.LCFI175:
 4442              		.cfi_restore 7
 4443              		.cfi_def_cfa_offset 0
 4444 0040 7047     		bx	lr
 4445              	.L290:
 4446 0042 00BF     		.align	2
 4447              	.L289:
 4448 0044 00000000 		.word	pxDelayedTaskList
 4449 0048 00000000 		.word	xNextTaskUnblockTime
 4450              		.cfi_endproc
 4451              	.LFE39:
 4453              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4454              		.align	1
 4455              		.global	xTaskGetCurrentTaskHandle
 4456              		.syntax unified
 4457              		.thumb
 4458              		.thumb_func
 4459              		.fpu fpv4-sp-d16
 4461              	xTaskGetCurrentTaskHandle:
 4462              	.LFB40:
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4463              		.loc 1 3662 0
 4464              		.cfi_startproc
 4465              		@ args = 0, pretend = 0, frame = 8
 4466              		@ frame_needed = 1, uses_anonymous_args = 0
 4467              		@ link register save eliminated.
 4468 0000 80B4     		push	{r7}
 4469              	.LCFI176:
 4470              		.cfi_def_cfa_offset 4
 4471              		.cfi_offset 7, -4
 4472 0002 83B0     		sub	sp, sp, #12
 4473              	.LCFI177:
 4474              		.cfi_def_cfa_offset 16
 4475 0004 00AF     		add	r7, sp, #0
 4476              	.LCFI178:
 4477              		.cfi_def_cfa_register 7
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 4478              		.loc 1 3668 0
 4479 0006 054B     		ldr	r3, .L293
 4480 0008 1B68     		ldr	r3, [r3]
 4481 000a 7B60     		str	r3, [r7, #4]
ARM GAS  /tmp/ccDSLKwL.s 			page 148


3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4482              		.loc 1 3670 0
 4483 000c 7B68     		ldr	r3, [r7, #4]
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4484              		.loc 1 3671 0
 4485 000e 1846     		mov	r0, r3
 4486 0010 0C37     		adds	r7, r7, #12
 4487              	.LCFI179:
 4488              		.cfi_def_cfa_offset 4
 4489 0012 BD46     		mov	sp, r7
 4490              	.LCFI180:
 4491              		.cfi_def_cfa_register 13
 4492              		@ sp needed
 4493 0014 5DF8047B 		ldr	r7, [sp], #4
 4494              	.LCFI181:
 4495              		.cfi_restore 7
 4496              		.cfi_def_cfa_offset 0
 4497 0018 7047     		bx	lr
 4498              	.L294:
 4499 001a 00BF     		.align	2
 4500              	.L293:
 4501 001c 00000000 		.word	pxCurrentTCB
 4502              		.cfi_endproc
 4503              	.LFE40:
 4505              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4506              		.align	1
 4507              		.global	xTaskGetSchedulerState
 4508              		.syntax unified
 4509              		.thumb
 4510              		.thumb_func
 4511              		.fpu fpv4-sp-d16
 4513              	xTaskGetSchedulerState:
 4514              	.LFB41:
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4515              		.loc 1 3679 0
 4516              		.cfi_startproc
 4517              		@ args = 0, pretend = 0, frame = 8
 4518              		@ frame_needed = 1, uses_anonymous_args = 0
 4519              		@ link register save eliminated.
 4520 0000 80B4     		push	{r7}
 4521              	.LCFI182:
 4522              		.cfi_def_cfa_offset 4
 4523              		.cfi_offset 7, -4
 4524 0002 83B0     		sub	sp, sp, #12
 4525              	.LCFI183:
 4526              		.cfi_def_cfa_offset 16
 4527 0004 00AF     		add	r7, sp, #0
 4528              	.LCFI184:
 4529              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccDSLKwL.s 			page 149


3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 4530              		.loc 1 3682 0
 4531 0006 0B4B     		ldr	r3, .L300
 4532 0008 1B68     		ldr	r3, [r3]
 4533 000a 002B     		cmp	r3, #0
 4534 000c 02D1     		bne	.L296
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 4535              		.loc 1 3684 0
 4536 000e 0123     		movs	r3, #1
 4537 0010 7B60     		str	r3, [r7, #4]
 4538 0012 08E0     		b	.L297
 4539              	.L296:
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4540              		.loc 1 3688 0
 4541 0014 084B     		ldr	r3, .L300+4
 4542 0016 1B68     		ldr	r3, [r3]
 4543 0018 002B     		cmp	r3, #0
 4544 001a 02D1     		bne	.L298
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 4545              		.loc 1 3690 0
 4546 001c 0223     		movs	r3, #2
 4547 001e 7B60     		str	r3, [r7, #4]
 4548 0020 01E0     		b	.L297
 4549              	.L298:
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 4550              		.loc 1 3694 0
 4551 0022 0023     		movs	r3, #0
 4552 0024 7B60     		str	r3, [r7, #4]
 4553              	.L297:
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4554              		.loc 1 3698 0
 4555 0026 7B68     		ldr	r3, [r7, #4]
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4556              		.loc 1 3699 0
 4557 0028 1846     		mov	r0, r3
 4558 002a 0C37     		adds	r7, r7, #12
 4559              	.LCFI185:
 4560              		.cfi_def_cfa_offset 4
 4561 002c BD46     		mov	sp, r7
 4562              	.LCFI186:
 4563              		.cfi_def_cfa_register 13
 4564              		@ sp needed
 4565 002e 5DF8047B 		ldr	r7, [sp], #4
 4566              	.LCFI187:
ARM GAS  /tmp/ccDSLKwL.s 			page 150


 4567              		.cfi_restore 7
 4568              		.cfi_def_cfa_offset 0
 4569 0032 7047     		bx	lr
 4570              	.L301:
 4571              		.align	2
 4572              	.L300:
 4573 0034 00000000 		.word	xSchedulerRunning
 4574 0038 00000000 		.word	uxSchedulerSuspended
 4575              		.cfi_endproc
 4576              	.LFE41:
 4578              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 4579              		.align	1
 4580              		.global	vTaskPriorityInherit
 4581              		.syntax unified
 4582              		.thumb
 4583              		.thumb_func
 4584              		.fpu fpv4-sp-d16
 4586              	vTaskPriorityInherit:
 4587              	.LFB42:
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4588              		.loc 1 3707 0
 4589              		.cfi_startproc
 4590              		@ args = 0, pretend = 0, frame = 16
 4591              		@ frame_needed = 1, uses_anonymous_args = 0
 4592 0000 80B5     		push	{r7, lr}
 4593              	.LCFI188:
 4594              		.cfi_def_cfa_offset 8
 4595              		.cfi_offset 7, -8
 4596              		.cfi_offset 14, -4
 4597 0002 84B0     		sub	sp, sp, #16
 4598              	.LCFI189:
 4599              		.cfi_def_cfa_offset 24
 4600 0004 00AF     		add	r7, sp, #0
 4601              	.LCFI190:
 4602              		.cfi_def_cfa_register 7
 4603 0006 7860     		str	r0, [r7, #4]
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4604              		.loc 1 3708 0
 4605 0008 7B68     		ldr	r3, [r7, #4]
 4606 000a FB60     		str	r3, [r7, #12]
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4607              		.loc 1 3712 0
 4608 000c 7B68     		ldr	r3, [r7, #4]
 4609 000e 002B     		cmp	r3, #0
 4610 0010 62D0     		beq	.L311
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
ARM GAS  /tmp/ccDSLKwL.s 			page 151


3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 4611              		.loc 1 3717 0
 4612 0012 FB68     		ldr	r3, [r7, #12]
 4613 0014 DA6A     		ldr	r2, [r3, #44]
 4614 0016 324B     		ldr	r3, .L312
 4615 0018 1B68     		ldr	r3, [r3]
 4616 001a DB6A     		ldr	r3, [r3, #44]
 4617 001c 9A42     		cmp	r2, r3
 4618 001e 5BD2     		bcs	.L311
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	being used for anything else. */
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 4619              		.loc 1 3722 0
 4620 0020 FB68     		ldr	r3, [r7, #12]
 4621 0022 9B69     		ldr	r3, [r3, #24]
 4622 0024 002B     		cmp	r3, #0
 4623 0026 06DB     		blt	.L304
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 4624              		.loc 1 3724 0
 4625 0028 2D4B     		ldr	r3, .L312
 4626 002a 1B68     		ldr	r3, [r3]
 4627 002c DB6A     		ldr	r3, [r3, #44]
 4628 002e C3F10702 		rsb	r2, r3, #7
 4629 0032 FB68     		ldr	r3, [r7, #12]
 4630 0034 9A61     		str	r2, [r3, #24]
 4631              	.L304:
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
 4632              		.loc 1 3733 0
 4633 0036 FB68     		ldr	r3, [r7, #12]
 4634 0038 5969     		ldr	r1, [r3, #20]
 4635 003a FB68     		ldr	r3, [r7, #12]
 4636 003c DA6A     		ldr	r2, [r3, #44]
 4637 003e 1346     		mov	r3, r2
 4638 0040 9B00     		lsls	r3, r3, #2
 4639 0042 1344     		add	r3, r3, r2
 4640 0044 9B00     		lsls	r3, r3, #2
 4641 0046 274A     		ldr	r2, .L312+4
 4642 0048 1344     		add	r3, r3, r2
 4643 004a 9942     		cmp	r1, r3
 4644 004c 01D1     		bne	.L305
 4645              		.loc 1 3733 0 is_stmt 0 discriminator 1
 4646 004e 0123     		movs	r3, #1
 4647 0050 00E0     		b	.L306
 4648              	.L305:
ARM GAS  /tmp/ccDSLKwL.s 			page 152


 4649              		.loc 1 3733 0 discriminator 2
 4650 0052 0023     		movs	r3, #0
 4651              	.L306:
 4652              		.loc 1 3733 0 discriminator 4
 4653 0054 002B     		cmp	r3, #0
 4654 0056 3AD0     		beq	.L307
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 4655              		.loc 1 3735 0 is_stmt 1
 4656 0058 FB68     		ldr	r3, [r7, #12]
 4657 005a 0433     		adds	r3, r3, #4
 4658 005c 1846     		mov	r0, r3
 4659 005e FFF7FEFF 		bl	uxListRemove
 4660 0062 0346     		mov	r3, r0
 4661 0064 002B     		cmp	r3, #0
 4662 0066 15D1     		bne	.L308
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4663              		.loc 1 3737 0
 4664 0068 FB68     		ldr	r3, [r7, #12]
 4665 006a DA6A     		ldr	r2, [r3, #44]
 4666 006c 1D49     		ldr	r1, .L312+4
 4667 006e 1346     		mov	r3, r2
 4668 0070 9B00     		lsls	r3, r3, #2
 4669 0072 1344     		add	r3, r3, r2
 4670 0074 9B00     		lsls	r3, r3, #2
 4671 0076 0B44     		add	r3, r3, r1
 4672 0078 1B68     		ldr	r3, [r3]
 4673 007a 002B     		cmp	r3, #0
 4674 007c 0AD1     		bne	.L308
 4675              		.loc 1 3737 0 is_stmt 0 discriminator 1
 4676 007e FB68     		ldr	r3, [r7, #12]
 4677 0080 DB6A     		ldr	r3, [r3, #44]
 4678 0082 0122     		movs	r2, #1
 4679 0084 02FA03F3 		lsl	r3, r2, r3
 4680 0088 DA43     		mvns	r2, r3
 4681 008a 174B     		ldr	r3, .L312+8
 4682 008c 1B68     		ldr	r3, [r3]
 4683 008e 1340     		ands	r3, r3, r2
 4684 0090 154A     		ldr	r2, .L312+8
 4685 0092 1360     		str	r3, [r2]
 4686              	.L308:
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 4687              		.loc 1 3745 0 is_stmt 1
 4688 0094 124B     		ldr	r3, .L312
 4689 0096 1B68     		ldr	r3, [r3]
 4690 0098 DA6A     		ldr	r2, [r3, #44]
 4691 009a FB68     		ldr	r3, [r7, #12]
 4692 009c DA62     		str	r2, [r3, #44]
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  /tmp/ccDSLKwL.s 			page 153


 4693              		.loc 1 3746 0
 4694 009e FB68     		ldr	r3, [r7, #12]
 4695 00a0 DB6A     		ldr	r3, [r3, #44]
 4696 00a2 0122     		movs	r2, #1
 4697 00a4 9A40     		lsls	r2, r2, r3
 4698 00a6 104B     		ldr	r3, .L312+8
 4699 00a8 1B68     		ldr	r3, [r3]
 4700 00aa 1343     		orrs	r3, r3, r2
 4701 00ac 0E4A     		ldr	r2, .L312+8
 4702 00ae 1360     		str	r3, [r2]
 4703 00b0 FB68     		ldr	r3, [r7, #12]
 4704 00b2 DA6A     		ldr	r2, [r3, #44]
 4705 00b4 1346     		mov	r3, r2
 4706 00b6 9B00     		lsls	r3, r3, #2
 4707 00b8 1344     		add	r3, r3, r2
 4708 00ba 9B00     		lsls	r3, r3, #2
 4709 00bc 094A     		ldr	r2, .L312+4
 4710 00be 1A44     		add	r2, r2, r3
 4711 00c0 FB68     		ldr	r3, [r7, #12]
 4712 00c2 0433     		adds	r3, r3, #4
 4713 00c4 1946     		mov	r1, r3
 4714 00c6 1046     		mov	r0, r2
 4715 00c8 FFF7FEFF 		bl	vListInsertEnd
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4716              		.loc 1 3765 0
 4717 00cc 04E0     		b	.L311
 4718              	.L307:
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4719              		.loc 1 3751 0
 4720 00ce 044B     		ldr	r3, .L312
 4721 00d0 1B68     		ldr	r3, [r3]
 4722 00d2 DA6A     		ldr	r2, [r3, #44]
 4723 00d4 FB68     		ldr	r3, [r7, #12]
 4724 00d6 DA62     		str	r2, [r3, #44]
 4725              	.L311:
 4726              		.loc 1 3765 0
 4727 00d8 00BF     		nop
 4728 00da 1037     		adds	r7, r7, #16
 4729              	.LCFI191:
ARM GAS  /tmp/ccDSLKwL.s 			page 154


 4730              		.cfi_def_cfa_offset 8
 4731 00dc BD46     		mov	sp, r7
 4732              	.LCFI192:
 4733              		.cfi_def_cfa_register 13
 4734              		@ sp needed
 4735 00de 80BD     		pop	{r7, pc}
 4736              	.L313:
 4737              		.align	2
 4738              	.L312:
 4739 00e0 00000000 		.word	pxCurrentTCB
 4740 00e4 00000000 		.word	pxReadyTasksLists
 4741 00e8 00000000 		.word	uxTopReadyPriority
 4742              		.cfi_endproc
 4743              	.LFE42:
 4745              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4746              		.align	1
 4747              		.global	xTaskPriorityDisinherit
 4748              		.syntax unified
 4749              		.thumb
 4750              		.thumb_func
 4751              		.fpu fpv4-sp-d16
 4753              	xTaskPriorityDisinherit:
 4754              	.LFB43:
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4755              		.loc 1 3773 0
 4756              		.cfi_startproc
 4757              		@ args = 0, pretend = 0, frame = 24
 4758              		@ frame_needed = 1, uses_anonymous_args = 0
 4759 0000 80B5     		push	{r7, lr}
 4760              	.LCFI193:
 4761              		.cfi_def_cfa_offset 8
 4762              		.cfi_offset 7, -8
 4763              		.cfi_offset 14, -4
 4764 0002 86B0     		sub	sp, sp, #24
 4765              	.LCFI194:
 4766              		.cfi_def_cfa_offset 32
 4767 0004 00AF     		add	r7, sp, #0
 4768              	.LCFI195:
 4769              		.cfi_def_cfa_register 7
 4770 0006 7860     		str	r0, [r7, #4]
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4771              		.loc 1 3774 0
 4772 0008 7B68     		ldr	r3, [r7, #4]
 4773 000a 3B61     		str	r3, [r7, #16]
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 4774              		.loc 1 3775 0
 4775 000c 0023     		movs	r3, #0
 4776 000e 7B61     		str	r3, [r7, #20]
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
ARM GAS  /tmp/ccDSLKwL.s 			page 155


 4777              		.loc 1 3777 0
 4778 0010 7B68     		ldr	r3, [r7, #4]
 4779 0012 002B     		cmp	r3, #0
 4780 0014 6CD0     		beq	.L315
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 4781              		.loc 1 3783 0
 4782 0016 394B     		ldr	r3, .L323
 4783 0018 1B68     		ldr	r3, [r3]
 4784 001a 3A69     		ldr	r2, [r7, #16]
 4785 001c 9A42     		cmp	r2, r3
 4786 001e 09D0     		beq	.L316
 4787              	.LBB171:
 4788              	.LBB172:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4789              		.loc 2 237 0 discriminator 1
 4790              		.syntax unified
 4791              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4792 0020 4FF05003 			mov r3, #80												
 4793 0024 83F31188 		msr basepri, r3											
 4794 0028 BFF36F8F 		isb														
 4795 002c BFF34F8F 		dsb														
 4796              	
 4797              	@ 0 "" 2
 4798              		.thumb
 4799              		.syntax unified
 4800 0030 FB60     		str	r3, [r7, #12]
 4801              	.L317:
 4802              	.LBE172:
 4803              	.LBE171:
 4804              		.loc 1 3783 0 discriminator 1
 4805 0032 FEE7     		b	.L317
 4806              	.L316:
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4807              		.loc 1 3785 0
 4808 0034 3B69     		ldr	r3, [r7, #16]
 4809 0036 9B6C     		ldr	r3, [r3, #72]
 4810 0038 002B     		cmp	r3, #0
 4811 003a 09D1     		bne	.L318
 4812              	.LBB173:
 4813              	.LBB174:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4814              		.loc 2 237 0 discriminator 1
 4815              		.syntax unified
 4816              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4817 003c 4FF05003 			mov r3, #80												
 4818 0040 83F31188 		msr basepri, r3											
 4819 0044 BFF36F8F 		isb														
 4820 0048 BFF34F8F 		dsb														
 4821              	
 4822              	@ 0 "" 2
 4823              		.thumb
ARM GAS  /tmp/ccDSLKwL.s 			page 156


 4824              		.syntax unified
 4825 004c BB60     		str	r3, [r7, #8]
 4826              	.L319:
 4827              	.LBE174:
 4828              	.LBE173:
 4829              		.loc 1 3785 0 discriminator 2
 4830 004e FEE7     		b	.L319
 4831              	.L318:
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4832              		.loc 1 3786 0
 4833 0050 3B69     		ldr	r3, [r7, #16]
 4834 0052 9B6C     		ldr	r3, [r3, #72]
 4835 0054 5A1E     		subs	r2, r3, #1
 4836 0056 3B69     		ldr	r3, [r7, #16]
 4837 0058 9A64     		str	r2, [r3, #72]
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 4838              		.loc 1 3790 0
 4839 005a 3B69     		ldr	r3, [r7, #16]
 4840 005c DA6A     		ldr	r2, [r3, #44]
 4841 005e 3B69     		ldr	r3, [r7, #16]
 4842 0060 5B6C     		ldr	r3, [r3, #68]
 4843 0062 9A42     		cmp	r2, r3
 4844 0064 44D0     		beq	.L315
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 4845              		.loc 1 3793 0
 4846 0066 3B69     		ldr	r3, [r7, #16]
 4847 0068 9B6C     		ldr	r3, [r3, #72]
 4848 006a 002B     		cmp	r3, #0
 4849 006c 40D1     		bne	.L315
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the	holding task from the ready	list. */
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 4850              		.loc 1 3800 0
 4851 006e 3B69     		ldr	r3, [r7, #16]
 4852 0070 0433     		adds	r3, r3, #4
 4853 0072 1846     		mov	r0, r3
 4854 0074 FFF7FEFF 		bl	uxListRemove
 4855 0078 0346     		mov	r3, r0
 4856 007a 002B     		cmp	r3, #0
 4857 007c 15D1     		bne	.L320
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4858              		.loc 1 3802 0
 4859 007e 3B69     		ldr	r3, [r7, #16]
 4860 0080 DA6A     		ldr	r2, [r3, #44]
 4861 0082 1F49     		ldr	r1, .L323+4
 4862 0084 1346     		mov	r3, r2
 4863 0086 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccDSLKwL.s 			page 157


 4864 0088 1344     		add	r3, r3, r2
 4865 008a 9B00     		lsls	r3, r3, #2
 4866 008c 0B44     		add	r3, r3, r1
 4867 008e 1B68     		ldr	r3, [r3]
 4868 0090 002B     		cmp	r3, #0
 4869 0092 0AD1     		bne	.L320
 4870              		.loc 1 3802 0 is_stmt 0 discriminator 1
 4871 0094 3B69     		ldr	r3, [r7, #16]
 4872 0096 DB6A     		ldr	r3, [r3, #44]
 4873 0098 0122     		movs	r2, #1
 4874 009a 02FA03F3 		lsl	r3, r2, r3
 4875 009e DA43     		mvns	r2, r3
 4876 00a0 184B     		ldr	r3, .L323+8
 4877 00a2 1B68     		ldr	r3, [r3]
 4878 00a4 1340     		ands	r3, r3, r2
 4879 00a6 174A     		ldr	r2, .L323+8
 4880 00a8 1360     		str	r3, [r2]
 4881              	.L320:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 4882              		.loc 1 3812 0 is_stmt 1
 4883 00aa 3B69     		ldr	r3, [r7, #16]
 4884 00ac 5A6C     		ldr	r2, [r3, #68]
 4885 00ae 3B69     		ldr	r3, [r7, #16]
 4886 00b0 DA62     		str	r2, [r3, #44]
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 4887              		.loc 1 3817 0
 4888 00b2 3B69     		ldr	r3, [r7, #16]
 4889 00b4 DB6A     		ldr	r3, [r3, #44]
 4890 00b6 C3F10702 		rsb	r2, r3, #7
 4891 00ba 3B69     		ldr	r3, [r7, #16]
 4892 00bc 9A61     		str	r2, [r3, #24]
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4893              		.loc 1 3818 0
 4894 00be 3B69     		ldr	r3, [r7, #16]
 4895 00c0 DB6A     		ldr	r3, [r3, #44]
 4896 00c2 0122     		movs	r2, #1
 4897 00c4 9A40     		lsls	r2, r2, r3
 4898 00c6 0F4B     		ldr	r3, .L323+8
 4899 00c8 1B68     		ldr	r3, [r3]
 4900 00ca 1343     		orrs	r3, r3, r2
 4901 00cc 0D4A     		ldr	r2, .L323+8
 4902 00ce 1360     		str	r3, [r2]
 4903 00d0 3B69     		ldr	r3, [r7, #16]
 4904 00d2 DA6A     		ldr	r2, [r3, #44]
ARM GAS  /tmp/ccDSLKwL.s 			page 158


 4905 00d4 1346     		mov	r3, r2
 4906 00d6 9B00     		lsls	r3, r3, #2
 4907 00d8 1344     		add	r3, r3, r2
 4908 00da 9B00     		lsls	r3, r3, #2
 4909 00dc 084A     		ldr	r2, .L323+4
 4910 00de 1A44     		add	r2, r2, r3
 4911 00e0 3B69     		ldr	r3, [r7, #16]
 4912 00e2 0433     		adds	r3, r3, #4
 4913 00e4 1946     		mov	r1, r3
 4914 00e6 1046     		mov	r0, r2
 4915 00e8 FFF7FEFF 		bl	vListInsertEnd
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 4916              		.loc 1 3828 0
 4917 00ec 0123     		movs	r3, #1
 4918 00ee 7B61     		str	r3, [r7, #20]
 4919              	.L315:
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4920              		.loc 1 3845 0
 4921 00f0 7B69     		ldr	r3, [r7, #20]
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4922              		.loc 1 3846 0
 4923 00f2 1846     		mov	r0, r3
 4924 00f4 1837     		adds	r7, r7, #24
 4925              	.LCFI196:
 4926              		.cfi_def_cfa_offset 8
 4927 00f6 BD46     		mov	sp, r7
 4928              	.LCFI197:
 4929              		.cfi_def_cfa_register 13
 4930              		@ sp needed
 4931 00f8 80BD     		pop	{r7, pc}
 4932              	.L324:
 4933 00fa 00BF     		.align	2
ARM GAS  /tmp/ccDSLKwL.s 			page 159


 4934              	.L323:
 4935 00fc 00000000 		.word	pxCurrentTCB
 4936 0100 00000000 		.word	pxReadyTasksLists
 4937 0104 00000000 		.word	uxTopReadyPriority
 4938              		.cfi_endproc
 4939              	.LFE43:
 4941              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4942              		.align	1
 4943              		.global	uxTaskResetEventItemValue
 4944              		.syntax unified
 4945              		.thumb
 4946              		.thumb_func
 4947              		.fpu fpv4-sp-d16
 4949              	uxTaskResetEventItemValue:
 4950              	.LFB44:
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccDSLKwL.s 			page 160


3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
ARM GAS  /tmp/ccDSLKwL.s 			page 161


3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
ARM GAS  /tmp/ccDSLKwL.s 			page 162


4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
ARM GAS  /tmp/ccDSLKwL.s 			page 163


4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
ARM GAS  /tmp/ccDSLKwL.s 			page 164


4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4951              		.loc 1 4163 0
 4952              		.cfi_startproc
 4953              		@ args = 0, pretend = 0, frame = 8
 4954              		@ frame_needed = 1, uses_anonymous_args = 0
 4955              		@ link register save eliminated.
 4956 0000 80B4     		push	{r7}
 4957              	.LCFI198:
 4958              		.cfi_def_cfa_offset 4
 4959              		.cfi_offset 7, -4
 4960 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccDSLKwL.s 			page 165


 4961              	.LCFI199:
 4962              		.cfi_def_cfa_offset 16
 4963 0004 00AF     		add	r7, sp, #0
 4964              	.LCFI200:
 4965              		.cfi_def_cfa_register 7
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 4966              		.loc 1 4166 0
 4967 0006 094B     		ldr	r3, .L327
 4968 0008 1B68     		ldr	r3, [r3]
 4969 000a 9B69     		ldr	r3, [r3, #24]
 4970 000c 7B60     		str	r3, [r7, #4]
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 4971              		.loc 1 4170 0
 4972 000e 074B     		ldr	r3, .L327
 4973 0010 1B68     		ldr	r3, [r3]
 4974 0012 064A     		ldr	r2, .L327
 4975 0014 1268     		ldr	r2, [r2]
 4976 0016 D26A     		ldr	r2, [r2, #44]
 4977 0018 C2F10702 		rsb	r2, r2, #7
 4978 001c 9A61     		str	r2, [r3, #24]
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 4979              		.loc 1 4172 0
 4980 001e 7B68     		ldr	r3, [r7, #4]
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4981              		.loc 1 4173 0
 4982 0020 1846     		mov	r0, r3
 4983 0022 0C37     		adds	r7, r7, #12
 4984              	.LCFI201:
 4985              		.cfi_def_cfa_offset 4
 4986 0024 BD46     		mov	sp, r7
 4987              	.LCFI202:
 4988              		.cfi_def_cfa_register 13
 4989              		@ sp needed
 4990 0026 5DF8047B 		ldr	r7, [sp], #4
 4991              	.LCFI203:
 4992              		.cfi_restore 7
 4993              		.cfi_def_cfa_offset 0
 4994 002a 7047     		bx	lr
 4995              	.L328:
 4996              		.align	2
 4997              	.L327:
 4998 002c 00000000 		.word	pxCurrentTCB
 4999              		.cfi_endproc
 5000              	.LFE44:
 5002              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5003              		.align	1
 5004              		.global	pvTaskIncrementMutexHeldCount
 5005              		.syntax unified
 5006              		.thumb
 5007              		.thumb_func
 5008              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccDSLKwL.s 			page 166


 5010              	pvTaskIncrementMutexHeldCount:
 5011              	.LFB45:
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5012              		.loc 1 4179 0
 5013              		.cfi_startproc
 5014              		@ args = 0, pretend = 0, frame = 0
 5015              		@ frame_needed = 1, uses_anonymous_args = 0
 5016              		@ link register save eliminated.
 5017 0000 80B4     		push	{r7}
 5018              	.LCFI204:
 5019              		.cfi_def_cfa_offset 4
 5020              		.cfi_offset 7, -4
 5021 0002 00AF     		add	r7, sp, #0
 5022              	.LCFI205:
 5023              		.cfi_def_cfa_register 7
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 5024              		.loc 1 4182 0
 5025 0004 074B     		ldr	r3, .L332
 5026 0006 1B68     		ldr	r3, [r3]
 5027 0008 002B     		cmp	r3, #0
 5028 000a 04D0     		beq	.L330
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 5029              		.loc 1 4184 0
 5030 000c 054B     		ldr	r3, .L332
 5031 000e 1B68     		ldr	r3, [r3]
 5032 0010 9A6C     		ldr	r2, [r3, #72]
 5033 0012 0132     		adds	r2, r2, #1
 5034 0014 9A64     		str	r2, [r3, #72]
 5035              	.L330:
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 5036              		.loc 1 4187 0
 5037 0016 034B     		ldr	r3, .L332
 5038 0018 1B68     		ldr	r3, [r3]
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5039              		.loc 1 4188 0
 5040 001a 1846     		mov	r0, r3
 5041 001c BD46     		mov	sp, r7
 5042              	.LCFI206:
 5043              		.cfi_def_cfa_register 13
 5044              		@ sp needed
 5045 001e 5DF8047B 		ldr	r7, [sp], #4
 5046              	.LCFI207:
 5047              		.cfi_restore 7
 5048              		.cfi_def_cfa_offset 0
 5049 0022 7047     		bx	lr
 5050              	.L333:
 5051              		.align	2
ARM GAS  /tmp/ccDSLKwL.s 			page 167


 5052              	.L332:
 5053 0024 00000000 		.word	pxCurrentTCB
 5054              		.cfi_endproc
 5055              	.LFE45:
 5057              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5058              		.align	1
 5059              		.global	ulTaskNotifyTake
 5060              		.syntax unified
 5061              		.thumb
 5062              		.thumb_func
 5063              		.fpu fpv4-sp-d16
 5065              	ulTaskNotifyTake:
 5066              	.LFB46:
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5067              		.loc 1 4196 0
 5068              		.cfi_startproc
 5069              		@ args = 0, pretend = 0, frame = 16
 5070              		@ frame_needed = 1, uses_anonymous_args = 0
 5071 0000 80B5     		push	{r7, lr}
 5072              	.LCFI208:
 5073              		.cfi_def_cfa_offset 8
 5074              		.cfi_offset 7, -8
 5075              		.cfi_offset 14, -4
 5076 0002 84B0     		sub	sp, sp, #16
 5077              	.LCFI209:
 5078              		.cfi_def_cfa_offset 24
 5079 0004 00AF     		add	r7, sp, #0
 5080              	.LCFI210:
 5081              		.cfi_def_cfa_register 7
 5082 0006 7860     		str	r0, [r7, #4]
 5083 0008 3960     		str	r1, [r7]
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5084              		.loc 1 4199 0
 5085 000a FFF7FEFF 		bl	vPortEnterCritical
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 5086              		.loc 1 4202 0
 5087 000e 1E4B     		ldr	r3, .L340
 5088 0010 1B68     		ldr	r3, [r3]
 5089 0012 DB6C     		ldr	r3, [r3, #76]
 5090 0014 002B     		cmp	r3, #0
 5091 0016 13D1     		bne	.L335
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 5092              		.loc 1 4205 0
 5093 0018 1B4B     		ldr	r3, .L340
ARM GAS  /tmp/ccDSLKwL.s 			page 168


 5094 001a 1B68     		ldr	r3, [r3]
 5095 001c 0122     		movs	r2, #1
 5096 001e 83F85020 		strb	r2, [r3, #80]
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5097              		.loc 1 4207 0
 5098 0022 3B68     		ldr	r3, [r7]
 5099 0024 002B     		cmp	r3, #0
 5100 0026 0BD0     		beq	.L335
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 5101              		.loc 1 4209 0
 5102 0028 0121     		movs	r1, #1
 5103 002a 3868     		ldr	r0, [r7]
 5104 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 5105              		.loc 1 4216 0
 5106 0030 164B     		ldr	r3, .L340+4
 5107 0032 4FF08052 		mov	r2, #268435456
 5108 0036 1A60     		str	r2, [r3]
 5109              		.syntax unified
 5110              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5111 0038 BFF34F8F 		dsb
 5112              	@ 0 "" 2
 5113              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5114 003c BFF36F8F 		isb
 5115              	@ 0 "" 2
 5116              		.thumb
 5117              		.syntax unified
 5118              	.L335:
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5119              		.loc 1 4228 0
 5120 0040 FFF7FEFF 		bl	vPortExitCritical
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5121              		.loc 1 4230 0
 5122 0044 FFF7FEFF 		bl	vPortEnterCritical
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
ARM GAS  /tmp/ccDSLKwL.s 			page 169


 5123              		.loc 1 4233 0
 5124 0048 0F4B     		ldr	r3, .L340
 5125 004a 1B68     		ldr	r3, [r3]
 5126 004c DB6C     		ldr	r3, [r3, #76]
 5127 004e FB60     		str	r3, [r7, #12]
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 5128              		.loc 1 4235 0
 5129 0050 FB68     		ldr	r3, [r7, #12]
 5130 0052 002B     		cmp	r3, #0
 5131 0054 0CD0     		beq	.L336
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 5132              		.loc 1 4237 0
 5133 0056 7B68     		ldr	r3, [r7, #4]
 5134 0058 002B     		cmp	r3, #0
 5135 005a 04D0     		beq	.L337
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 5136              		.loc 1 4239 0
 5137 005c 0A4B     		ldr	r3, .L340
 5138 005e 1B68     		ldr	r3, [r3]
 5139 0060 0022     		movs	r2, #0
 5140 0062 DA64     		str	r2, [r3, #76]
 5141 0064 04E0     		b	.L336
 5142              	.L337:
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
 5143              		.loc 1 4243 0
 5144 0066 084B     		ldr	r3, .L340
 5145 0068 1B68     		ldr	r3, [r3]
 5146 006a FA68     		ldr	r2, [r7, #12]
 5147 006c 013A     		subs	r2, r2, #1
 5148 006e DA64     		str	r2, [r3, #76]
 5149              	.L336:
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5150              		.loc 1 4251 0
 5151 0070 054B     		ldr	r3, .L340
 5152 0072 1B68     		ldr	r3, [r3]
 5153 0074 0022     		movs	r2, #0
 5154 0076 83F85020 		strb	r2, [r3, #80]
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5155              		.loc 1 4253 0
 5156 007a FFF7FEFF 		bl	vPortExitCritical
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 5157              		.loc 1 4255 0
ARM GAS  /tmp/ccDSLKwL.s 			page 170


 5158 007e FB68     		ldr	r3, [r7, #12]
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5159              		.loc 1 4256 0
 5160 0080 1846     		mov	r0, r3
 5161 0082 1037     		adds	r7, r7, #16
 5162              	.LCFI211:
 5163              		.cfi_def_cfa_offset 8
 5164 0084 BD46     		mov	sp, r7
 5165              	.LCFI212:
 5166              		.cfi_def_cfa_register 13
 5167              		@ sp needed
 5168 0086 80BD     		pop	{r7, pc}
 5169              	.L341:
 5170              		.align	2
 5171              	.L340:
 5172 0088 00000000 		.word	pxCurrentTCB
 5173 008c 04ED00E0 		.word	-536810236
 5174              		.cfi_endproc
 5175              	.LFE46:
 5177              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5178              		.align	1
 5179              		.global	xTaskNotifyWait
 5180              		.syntax unified
 5181              		.thumb
 5182              		.thumb_func
 5183              		.fpu fpv4-sp-d16
 5185              	xTaskNotifyWait:
 5186              	.LFB47:
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5187              		.loc 1 4264 0
 5188              		.cfi_startproc
 5189              		@ args = 0, pretend = 0, frame = 24
 5190              		@ frame_needed = 1, uses_anonymous_args = 0
 5191 0000 80B5     		push	{r7, lr}
 5192              	.LCFI213:
 5193              		.cfi_def_cfa_offset 8
 5194              		.cfi_offset 7, -8
 5195              		.cfi_offset 14, -4
 5196 0002 86B0     		sub	sp, sp, #24
 5197              	.LCFI214:
 5198              		.cfi_def_cfa_offset 32
 5199 0004 00AF     		add	r7, sp, #0
 5200              	.LCFI215:
 5201              		.cfi_def_cfa_register 7
 5202 0006 F860     		str	r0, [r7, #12]
 5203 0008 B960     		str	r1, [r7, #8]
 5204 000a 7A60     		str	r2, [r7, #4]
 5205 000c 3B60     		str	r3, [r7]
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccDSLKwL.s 			page 171


4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5206              		.loc 1 4267 0
 5207 000e FFF7FEFF 		bl	vPortEnterCritical
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 5208              		.loc 1 4270 0
 5209 0012 264B     		ldr	r3, .L348
 5210 0014 1B68     		ldr	r3, [r3]
 5211 0016 93F85030 		ldrb	r3, [r3, #80]
 5212 001a DBB2     		uxtb	r3, r3
 5213 001c 022B     		cmp	r3, #2
 5214 001e 1AD0     		beq	.L343
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 5215              		.loc 1 4275 0
 5216 0020 224B     		ldr	r3, .L348
 5217 0022 1B68     		ldr	r3, [r3]
 5218 0024 D96C     		ldr	r1, [r3, #76]
 5219 0026 FA68     		ldr	r2, [r7, #12]
 5220 0028 D243     		mvns	r2, r2
 5221 002a 0A40     		ands	r2, r2, r1
 5222 002c DA64     		str	r2, [r3, #76]
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 5223              		.loc 1 4278 0
 5224 002e 1F4B     		ldr	r3, .L348
 5225 0030 1B68     		ldr	r3, [r3]
 5226 0032 0122     		movs	r2, #1
 5227 0034 83F85020 		strb	r2, [r3, #80]
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5228              		.loc 1 4280 0
 5229 0038 3B68     		ldr	r3, [r7]
 5230 003a 002B     		cmp	r3, #0
 5231 003c 0BD0     		beq	.L343
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 5232              		.loc 1 4282 0
 5233 003e 0121     		movs	r1, #1
 5234 0040 3868     		ldr	r0, [r7]
 5235 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 5236              		.loc 1 4289 0
 5237 0046 1A4B     		ldr	r3, .L348+4
 5238 0048 4FF08052 		mov	r2, #268435456
 5239 004c 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccDSLKwL.s 			page 172


 5240              		.syntax unified
 5241              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5242 004e BFF34F8F 		dsb
 5243              	@ 0 "" 2
 5244              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5245 0052 BFF36F8F 		isb
 5246              	@ 0 "" 2
 5247              		.thumb
 5248              		.syntax unified
 5249              	.L343:
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5250              		.loc 1 4301 0
 5251 0056 FFF7FEFF 		bl	vPortExitCritical
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5252              		.loc 1 4303 0
 5253 005a FFF7FEFF 		bl	vPortEnterCritical
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 5254              		.loc 1 4307 0
 5255 005e 7B68     		ldr	r3, [r7, #4]
 5256 0060 002B     		cmp	r3, #0
 5257 0062 04D0     		beq	.L344
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 5258              		.loc 1 4311 0
 5259 0064 114B     		ldr	r3, .L348
 5260 0066 1B68     		ldr	r3, [r3]
 5261 0068 DA6C     		ldr	r2, [r3, #76]
 5262 006a 7B68     		ldr	r3, [r7, #4]
 5263 006c 1A60     		str	r2, [r3]
 5264              	.L344:
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 5265              		.loc 1 4318 0
 5266 006e 0F4B     		ldr	r3, .L348
 5267 0070 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccDSLKwL.s 			page 173


 5268 0072 93F85030 		ldrb	r3, [r3, #80]
 5269 0076 DBB2     		uxtb	r3, r3
 5270 0078 012B     		cmp	r3, #1
 5271 007a 02D1     		bne	.L345
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 5272              		.loc 1 4321 0
 5273 007c 0023     		movs	r3, #0
 5274 007e 7B61     		str	r3, [r7, #20]
 5275 0080 08E0     		b	.L346
 5276              	.L345:
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 5277              		.loc 1 4327 0
 5278 0082 0A4B     		ldr	r3, .L348
 5279 0084 1B68     		ldr	r3, [r3]
 5280 0086 D96C     		ldr	r1, [r3, #76]
 5281 0088 BA68     		ldr	r2, [r7, #8]
 5282 008a D243     		mvns	r2, r2
 5283 008c 0A40     		ands	r2, r2, r1
 5284 008e DA64     		str	r2, [r3, #76]
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5285              		.loc 1 4328 0
 5286 0090 0123     		movs	r3, #1
 5287 0092 7B61     		str	r3, [r7, #20]
 5288              	.L346:
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5289              		.loc 1 4331 0
 5290 0094 054B     		ldr	r3, .L348
 5291 0096 1B68     		ldr	r3, [r3]
 5292 0098 0022     		movs	r2, #0
 5293 009a 83F85020 		strb	r2, [r3, #80]
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5294              		.loc 1 4333 0
 5295 009e FFF7FEFF 		bl	vPortExitCritical
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5296              		.loc 1 4335 0
 5297 00a2 7B69     		ldr	r3, [r7, #20]
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5298              		.loc 1 4336 0
 5299 00a4 1846     		mov	r0, r3
 5300 00a6 1837     		adds	r7, r7, #24
 5301              	.LCFI216:
 5302              		.cfi_def_cfa_offset 8
 5303 00a8 BD46     		mov	sp, r7
 5304              	.LCFI217:
 5305              		.cfi_def_cfa_register 13
 5306              		@ sp needed
ARM GAS  /tmp/ccDSLKwL.s 			page 174


 5307 00aa 80BD     		pop	{r7, pc}
 5308              	.L349:
 5309              		.align	2
 5310              	.L348:
 5311 00ac 00000000 		.word	pxCurrentTCB
 5312 00b0 04ED00E0 		.word	-536810236
 5313              		.cfi_endproc
 5314              	.LFE47:
 5316              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5317              		.align	1
 5318              		.global	xTaskGenericNotify
 5319              		.syntax unified
 5320              		.thumb
 5321              		.thumb_func
 5322              		.fpu fpv4-sp-d16
 5324              	xTaskGenericNotify:
 5325              	.LFB48:
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5326              		.loc 1 4344 0
 5327              		.cfi_startproc
 5328              		@ args = 0, pretend = 0, frame = 40
 5329              		@ frame_needed = 1, uses_anonymous_args = 0
 5330 0000 80B5     		push	{r7, lr}
 5331              	.LCFI218:
 5332              		.cfi_def_cfa_offset 8
 5333              		.cfi_offset 7, -8
 5334              		.cfi_offset 14, -4
 5335 0002 8AB0     		sub	sp, sp, #40
 5336              	.LCFI219:
 5337              		.cfi_def_cfa_offset 48
 5338 0004 00AF     		add	r7, sp, #0
 5339              	.LCFI220:
 5340              		.cfi_def_cfa_register 7
 5341 0006 F860     		str	r0, [r7, #12]
 5342 0008 B960     		str	r1, [r7, #8]
 5343 000a 3B60     		str	r3, [r7]
 5344 000c 1346     		mov	r3, r2
 5345 000e FB71     		strb	r3, [r7, #7]
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5346              		.loc 1 4346 0
 5347 0010 0123     		movs	r3, #1
 5348 0012 7B62     		str	r3, [r7, #36]
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5349              		.loc 1 4349 0
 5350 0014 FB68     		ldr	r3, [r7, #12]
 5351 0016 002B     		cmp	r3, #0
 5352 0018 09D1     		bne	.L351
ARM GAS  /tmp/ccDSLKwL.s 			page 175


 5353              	.LBB175:
 5354              	.LBB176:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5355              		.loc 2 237 0 discriminator 1
 5356              		.syntax unified
 5357              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5358 001a 4FF05003 			mov r3, #80												
 5359 001e 83F31188 		msr basepri, r3											
 5360 0022 BFF36F8F 		isb														
 5361 0026 BFF34F8F 		dsb														
 5362              	
 5363              	@ 0 "" 2
 5364              		.thumb
 5365              		.syntax unified
 5366 002a BB61     		str	r3, [r7, #24]
 5367              	.L352:
 5368              	.LBE176:
 5369              	.LBE175:
 5370              		.loc 1 4349 0 discriminator 1
 5371 002c FEE7     		b	.L352
 5372              	.L351:
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5373              		.loc 1 4350 0
 5374 002e FB68     		ldr	r3, [r7, #12]
 5375 0030 3B62     		str	r3, [r7, #32]
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5376              		.loc 1 4352 0
 5377 0032 FFF7FEFF 		bl	vPortEnterCritical
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 5378              		.loc 1 4354 0
 5379 0036 3B68     		ldr	r3, [r7]
 5380 0038 002B     		cmp	r3, #0
 5381 003a 03D0     		beq	.L353
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 5382              		.loc 1 4356 0
 5383 003c 3B6A     		ldr	r3, [r7, #32]
 5384 003e DA6C     		ldr	r2, [r3, #76]
 5385 0040 3B68     		ldr	r3, [r7]
 5386 0042 1A60     		str	r2, [r3]
 5387              	.L353:
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5388              		.loc 1 4359 0
 5389 0044 3B6A     		ldr	r3, [r7, #32]
 5390 0046 93F85030 		ldrb	r3, [r3, #80]
 5391 004a FB77     		strb	r3, [r7, #31]
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5392              		.loc 1 4361 0
 5393 004c 3B6A     		ldr	r3, [r7, #32]
 5394 004e 0222     		movs	r2, #2
 5395 0050 83F85020 		strb	r2, [r3, #80]
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccDSLKwL.s 			page 176


4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 5396              		.loc 1 4363 0
 5397 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5398 0056 042B     		cmp	r3, #4
 5399 0058 27D8     		bhi	.L354
 5400 005a 01A2     		adr	r2, .L356
 5401 005c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5402              		.p2align 2
 5403              	.L356:
 5404 0060 AB000000 		.word	.L354+1
 5405 0064 75000000 		.word	.L357+1
 5406 0068 83000000 		.word	.L358+1
 5407 006c 8F000000 		.word	.L359+1
 5408 0070 97000000 		.word	.L360+1
 5409              		.p2align 1
 5410              	.L357:
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 5411              		.loc 1 4366 0
 5412 0074 3B6A     		ldr	r3, [r7, #32]
 5413 0076 DA6C     		ldr	r2, [r3, #76]
 5414 0078 BB68     		ldr	r3, [r7, #8]
 5415 007a 1A43     		orrs	r2, r2, r3
 5416 007c 3B6A     		ldr	r3, [r7, #32]
 5417 007e DA64     		str	r2, [r3, #76]
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5418              		.loc 1 4367 0
 5419 0080 13E0     		b	.L354
 5420              	.L358:
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 5421              		.loc 1 4370 0
 5422 0082 3B6A     		ldr	r3, [r7, #32]
 5423 0084 DB6C     		ldr	r3, [r3, #76]
 5424 0086 5A1C     		adds	r2, r3, #1
 5425 0088 3B6A     		ldr	r3, [r7, #32]
 5426 008a DA64     		str	r2, [r3, #76]
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5427              		.loc 1 4371 0
 5428 008c 0DE0     		b	.L354
 5429              	.L359:
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 5430              		.loc 1 4374 0
 5431 008e 3B6A     		ldr	r3, [r7, #32]
 5432 0090 BA68     		ldr	r2, [r7, #8]
 5433 0092 DA64     		str	r2, [r3, #76]
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5434              		.loc 1 4375 0
 5435 0094 09E0     		b	.L354
 5436              	.L360:
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
ARM GAS  /tmp/ccDSLKwL.s 			page 177


 5437              		.loc 1 4378 0
 5438 0096 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5439 0098 022B     		cmp	r3, #2
 5440 009a 03D0     		beq	.L361
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 5441              		.loc 1 4380 0
 5442 009c 3B6A     		ldr	r3, [r7, #32]
 5443 009e BA68     		ldr	r2, [r7, #8]
 5444 00a0 DA64     		str	r2, [r3, #76]
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5445              		.loc 1 4387 0
 5446 00a2 01E0     		b	.L367
 5447              	.L361:
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5448              		.loc 1 4385 0
 5449 00a4 0023     		movs	r3, #0
 5450 00a6 7B62     		str	r3, [r7, #36]
 5451              	.L367:
 5452              		.loc 1 4387 0
 5453 00a8 00BF     		nop
 5454              	.L354:
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5455              		.loc 1 4399 0
 5456 00aa FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5457 00ac 012B     		cmp	r3, #1
 5458 00ae 38D1     		bne	.L363
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5459              		.loc 1 4401 0
 5460 00b0 3B6A     		ldr	r3, [r7, #32]
 5461 00b2 0433     		adds	r3, r3, #4
 5462 00b4 1846     		mov	r0, r3
 5463 00b6 FFF7FEFF 		bl	uxListRemove
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5464              		.loc 1 4402 0
 5465 00ba 3B6A     		ldr	r3, [r7, #32]
 5466 00bc DB6A     		ldr	r3, [r3, #44]
 5467 00be 0122     		movs	r2, #1
 5468 00c0 9A40     		lsls	r2, r2, r3
ARM GAS  /tmp/ccDSLKwL.s 			page 178


 5469 00c2 1B4B     		ldr	r3, .L368
 5470 00c4 1B68     		ldr	r3, [r3]
 5471 00c6 1343     		orrs	r3, r3, r2
 5472 00c8 194A     		ldr	r2, .L368
 5473 00ca 1360     		str	r3, [r2]
 5474 00cc 3B6A     		ldr	r3, [r7, #32]
 5475 00ce DA6A     		ldr	r2, [r3, #44]
 5476 00d0 1346     		mov	r3, r2
 5477 00d2 9B00     		lsls	r3, r3, #2
 5478 00d4 1344     		add	r3, r3, r2
 5479 00d6 9B00     		lsls	r3, r3, #2
 5480 00d8 164A     		ldr	r2, .L368+4
 5481 00da 1A44     		add	r2, r2, r3
 5482 00dc 3B6A     		ldr	r3, [r7, #32]
 5483 00de 0433     		adds	r3, r3, #4
 5484 00e0 1946     		mov	r1, r3
 5485 00e2 1046     		mov	r0, r2
 5486 00e4 FFF7FEFF 		bl	vListInsertEnd
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5487              		.loc 1 4405 0
 5488 00e8 3B6A     		ldr	r3, [r7, #32]
 5489 00ea 9B6A     		ldr	r3, [r3, #40]
 5490 00ec 002B     		cmp	r3, #0
 5491 00ee 09D0     		beq	.L364
 5492              	.LBB177:
 5493              	.LBB178:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5494              		.loc 2 237 0 discriminator 1
 5495              		.syntax unified
 5496              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5497 00f0 4FF05003 			mov r3, #80												
 5498 00f4 83F31188 		msr basepri, r3											
 5499 00f8 BFF36F8F 		isb														
 5500 00fc BFF34F8F 		dsb														
 5501              	
 5502              	@ 0 "" 2
 5503              		.thumb
 5504              		.syntax unified
 5505 0100 7B61     		str	r3, [r7, #20]
 5506              	.L365:
 5507              	.LBE178:
 5508              	.LBE177:
 5509              		.loc 1 4405 0 discriminator 2
 5510 0102 FEE7     		b	.L365
 5511              	.L364:
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
ARM GAS  /tmp/ccDSLKwL.s 			page 179


4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5512              		.loc 1 4423 0
 5513 0104 3B6A     		ldr	r3, [r7, #32]
 5514 0106 DA6A     		ldr	r2, [r3, #44]
 5515 0108 0B4B     		ldr	r3, .L368+8
 5516 010a 1B68     		ldr	r3, [r3]
 5517 010c DB6A     		ldr	r3, [r3, #44]
 5518 010e 9A42     		cmp	r2, r3
 5519 0110 07D9     		bls	.L363
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 5520              		.loc 1 4427 0
 5521 0112 0A4B     		ldr	r3, .L368+12
 5522 0114 4FF08052 		mov	r2, #268435456
 5523 0118 1A60     		str	r2, [r3]
 5524              		.syntax unified
 5525              	@ 4427 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5526 011a BFF34F8F 		dsb
 5527              	@ 0 "" 2
 5528              	@ 4427 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5529 011e BFF36F8F 		isb
 5530              	@ 0 "" 2
 5531              		.thumb
 5532              		.syntax unified
 5533              	.L363:
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5534              		.loc 1 4439 0
 5535 0122 FFF7FEFF 		bl	vPortExitCritical
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5536              		.loc 1 4441 0
 5537 0126 7B6A     		ldr	r3, [r7, #36]
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5538              		.loc 1 4442 0
 5539 0128 1846     		mov	r0, r3
 5540 012a 2837     		adds	r7, r7, #40
 5541              	.LCFI221:
ARM GAS  /tmp/ccDSLKwL.s 			page 180


 5542              		.cfi_def_cfa_offset 8
 5543 012c BD46     		mov	sp, r7
 5544              	.LCFI222:
 5545              		.cfi_def_cfa_register 13
 5546              		@ sp needed
 5547 012e 80BD     		pop	{r7, pc}
 5548              	.L369:
 5549              		.align	2
 5550              	.L368:
 5551 0130 00000000 		.word	uxTopReadyPriority
 5552 0134 00000000 		.word	pxReadyTasksLists
 5553 0138 00000000 		.word	pxCurrentTCB
 5554 013c 04ED00E0 		.word	-536810236
 5555              		.cfi_endproc
 5556              	.LFE48:
 5558              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5559              		.align	1
 5560              		.global	xTaskGenericNotifyFromISR
 5561              		.syntax unified
 5562              		.thumb
 5563              		.thumb_func
 5564              		.fpu fpv4-sp-d16
 5566              	xTaskGenericNotifyFromISR:
 5567              	.LFB49:
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5568              		.loc 1 4450 0
 5569              		.cfi_startproc
 5570              		@ args = 4, pretend = 0, frame = 56
 5571              		@ frame_needed = 1, uses_anonymous_args = 0
 5572 0000 80B5     		push	{r7, lr}
 5573              	.LCFI223:
 5574              		.cfi_def_cfa_offset 8
 5575              		.cfi_offset 7, -8
 5576              		.cfi_offset 14, -4
 5577 0002 8EB0     		sub	sp, sp, #56
 5578              	.LCFI224:
 5579              		.cfi_def_cfa_offset 64
 5580 0004 00AF     		add	r7, sp, #0
 5581              	.LCFI225:
 5582              		.cfi_def_cfa_register 7
 5583 0006 F860     		str	r0, [r7, #12]
 5584 0008 B960     		str	r1, [r7, #8]
 5585 000a 3B60     		str	r3, [r7]
 5586 000c 1346     		mov	r3, r2
 5587 000e FB71     		strb	r3, [r7, #7]
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5588              		.loc 1 4453 0
 5589 0010 0123     		movs	r3, #1
ARM GAS  /tmp/ccDSLKwL.s 			page 181


 5590 0012 7B63     		str	r3, [r7, #52]
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5591              		.loc 1 4456 0
 5592 0014 FB68     		ldr	r3, [r7, #12]
 5593 0016 002B     		cmp	r3, #0
 5594 0018 09D1     		bne	.L371
 5595              	.LBB179:
 5596              	.LBB180:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5597              		.loc 2 237 0 discriminator 1
 5598              		.syntax unified
 5599              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5600 001a 4FF05003 			mov r3, #80												
 5601 001e 83F31188 		msr basepri, r3											
 5602 0022 BFF36F8F 		isb														
 5603 0026 BFF34F8F 		dsb														
 5604              	
 5605              	@ 0 "" 2
 5606              		.thumb
 5607              		.syntax unified
 5608 002a 7B62     		str	r3, [r7, #36]
 5609              	.L372:
 5610              	.LBE180:
 5611              	.LBE179:
 5612              		.loc 1 4456 0 discriminator 1
 5613 002c FEE7     		b	.L372
 5614              	.L371:
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 5615              		.loc 1 4474 0
 5616 002e FFF7FEFF 		bl	vPortValidateInterruptPriority
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5617              		.loc 1 4476 0
 5618 0032 FB68     		ldr	r3, [r7, #12]
 5619 0034 3B63     		str	r3, [r7, #48]
 5620              	.LBB181:
 5621              	.LBB182:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /tmp/ccDSLKwL.s 			page 182


 5622              		.loc 2 253 0
 5623              		.syntax unified
 5624              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5625 0036 EFF31182 			mrs r2, basepri											
 5626 003a 4FF05003 		mov r3, #80												
 5627 003e 83F31188 		msr basepri, r3											
 5628 0042 BFF36F8F 		isb														
 5629 0046 BFF34F8F 		dsb														
 5630              	
 5631              	@ 0 "" 2
 5632              		.thumb
 5633              		.syntax unified
 5634 004a 3A62     		str	r2, [r7, #32]
 5635 004c FB61     		str	r3, [r7, #28]
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 5636              		.loc 2 265 0
 5637 004e 3B6A     		ldr	r3, [r7, #32]
 5638              	.LBE182:
 5639              	.LBE181:
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 5640              		.loc 1 4478 0
 5641 0050 FB62     		str	r3, [r7, #44]
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 5642              		.loc 1 4480 0
 5643 0052 3B68     		ldr	r3, [r7]
 5644 0054 002B     		cmp	r3, #0
 5645 0056 03D0     		beq	.L374
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 5646              		.loc 1 4482 0
 5647 0058 3B6B     		ldr	r3, [r7, #48]
 5648 005a DA6C     		ldr	r2, [r3, #76]
 5649 005c 3B68     		ldr	r3, [r7]
 5650 005e 1A60     		str	r2, [r3]
 5651              	.L374:
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5652              		.loc 1 4485 0
 5653 0060 3B6B     		ldr	r3, [r7, #48]
 5654 0062 93F85030 		ldrb	r3, [r3, #80]
 5655 0066 87F82B30 		strb	r3, [r7, #43]
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5656              		.loc 1 4486 0
 5657 006a 3B6B     		ldr	r3, [r7, #48]
 5658 006c 0222     		movs	r2, #2
 5659 006e 83F85020 		strb	r2, [r3, #80]
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 5660              		.loc 1 4488 0
 5661 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5662 0074 042B     		cmp	r3, #4
 5663 0076 29D8     		bhi	.L375
 5664 0078 01A2     		adr	r2, .L377
 5665 007a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
ARM GAS  /tmp/ccDSLKwL.s 			page 183


 5666 007e 00BF     		.p2align 2
 5667              	.L377:
 5668 0080 CD000000 		.word	.L375+1
 5669 0084 95000000 		.word	.L378+1
 5670 0088 A3000000 		.word	.L379+1
 5671 008c AF000000 		.word	.L380+1
 5672 0090 B7000000 		.word	.L381+1
 5673              		.p2align 1
 5674              	.L378:
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 5675              		.loc 1 4491 0
 5676 0094 3B6B     		ldr	r3, [r7, #48]
 5677 0096 DA6C     		ldr	r2, [r3, #76]
 5678 0098 BB68     		ldr	r3, [r7, #8]
 5679 009a 1A43     		orrs	r2, r2, r3
 5680 009c 3B6B     		ldr	r3, [r7, #48]
 5681 009e DA64     		str	r2, [r3, #76]
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5682              		.loc 1 4492 0
 5683 00a0 14E0     		b	.L375
 5684              	.L379:
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 5685              		.loc 1 4495 0
 5686 00a2 3B6B     		ldr	r3, [r7, #48]
 5687 00a4 DB6C     		ldr	r3, [r3, #76]
 5688 00a6 5A1C     		adds	r2, r3, #1
 5689 00a8 3B6B     		ldr	r3, [r7, #48]
 5690 00aa DA64     		str	r2, [r3, #76]
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5691              		.loc 1 4496 0
 5692 00ac 0EE0     		b	.L375
 5693              	.L380:
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 5694              		.loc 1 4499 0
 5695 00ae 3B6B     		ldr	r3, [r7, #48]
 5696 00b0 BA68     		ldr	r2, [r7, #8]
 5697 00b2 DA64     		str	r2, [r3, #76]
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5698              		.loc 1 4500 0
 5699 00b4 0AE0     		b	.L375
 5700              	.L381:
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 5701              		.loc 1 4503 0
 5702 00b6 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 5703 00ba 022B     		cmp	r3, #2
 5704 00bc 03D0     		beq	.L382
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 5705              		.loc 1 4505 0
ARM GAS  /tmp/ccDSLKwL.s 			page 184


 5706 00be 3B6B     		ldr	r3, [r7, #48]
 5707 00c0 BA68     		ldr	r2, [r7, #8]
 5708 00c2 DA64     		str	r2, [r3, #76]
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5709              		.loc 1 4512 0
 5710 00c4 01E0     		b	.L392
 5711              	.L382:
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5712              		.loc 1 4510 0
 5713 00c6 0023     		movs	r3, #0
 5714 00c8 7B63     		str	r3, [r7, #52]
 5715              	.L392:
 5716              		.loc 1 4512 0
 5717 00ca 00BF     		nop
 5718              	.L375:
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5719              		.loc 1 4524 0
 5720 00cc 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 5721 00d0 012B     		cmp	r3, #1
 5722 00d2 45D1     		bne	.L384
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5723              		.loc 1 4527 0
 5724 00d4 3B6B     		ldr	r3, [r7, #48]
 5725 00d6 9B6A     		ldr	r3, [r3, #40]
 5726 00d8 002B     		cmp	r3, #0
 5727 00da 09D0     		beq	.L385
 5728              	.LBB183:
 5729              	.LBB184:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5730              		.loc 2 237 0 discriminator 1
 5731              		.syntax unified
 5732              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5733 00dc 4FF05003 			mov r3, #80												
 5734 00e0 83F31188 		msr basepri, r3											
 5735 00e4 BFF36F8F 		isb														
 5736 00e8 BFF34F8F 		dsb														
 5737              	
 5738              	@ 0 "" 2
ARM GAS  /tmp/ccDSLKwL.s 			page 185


 5739              		.thumb
 5740              		.syntax unified
 5741 00ec BB61     		str	r3, [r7, #24]
 5742              	.L386:
 5743              	.LBE184:
 5744              	.LBE183:
 5745              		.loc 1 4527 0 discriminator 2
 5746 00ee FEE7     		b	.L386
 5747              	.L385:
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5748              		.loc 1 4529 0
 5749 00f0 204B     		ldr	r3, .L393
 5750 00f2 1B68     		ldr	r3, [r3]
 5751 00f4 002B     		cmp	r3, #0
 5752 00f6 1CD1     		bne	.L387
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5753              		.loc 1 4531 0
 5754 00f8 3B6B     		ldr	r3, [r7, #48]
 5755 00fa 0433     		adds	r3, r3, #4
 5756 00fc 1846     		mov	r0, r3
 5757 00fe FFF7FEFF 		bl	uxListRemove
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5758              		.loc 1 4532 0
 5759 0102 3B6B     		ldr	r3, [r7, #48]
 5760 0104 DB6A     		ldr	r3, [r3, #44]
 5761 0106 0122     		movs	r2, #1
 5762 0108 9A40     		lsls	r2, r2, r3
 5763 010a 1B4B     		ldr	r3, .L393+4
 5764 010c 1B68     		ldr	r3, [r3]
 5765 010e 1343     		orrs	r3, r3, r2
 5766 0110 194A     		ldr	r2, .L393+4
 5767 0112 1360     		str	r3, [r2]
 5768 0114 3B6B     		ldr	r3, [r7, #48]
 5769 0116 DA6A     		ldr	r2, [r3, #44]
 5770 0118 1346     		mov	r3, r2
 5771 011a 9B00     		lsls	r3, r3, #2
 5772 011c 1344     		add	r3, r3, r2
 5773 011e 9B00     		lsls	r3, r3, #2
 5774 0120 164A     		ldr	r2, .L393+8
 5775 0122 1A44     		add	r2, r2, r3
 5776 0124 3B6B     		ldr	r3, [r7, #48]
 5777 0126 0433     		adds	r3, r3, #4
 5778 0128 1946     		mov	r1, r3
 5779 012a 1046     		mov	r0, r2
 5780 012c FFF7FEFF 		bl	vListInsertEnd
 5781 0130 05E0     		b	.L388
 5782              	.L387:
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5783              		.loc 1 4538 0
 5784 0132 3B6B     		ldr	r3, [r7, #48]
ARM GAS  /tmp/ccDSLKwL.s 			page 186


 5785 0134 1833     		adds	r3, r3, #24
 5786 0136 1946     		mov	r1, r3
 5787 0138 1148     		ldr	r0, .L393+12
 5788 013a FFF7FEFF 		bl	vListInsertEnd
 5789              	.L388:
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5790              		.loc 1 4541 0
 5791 013e 3B6B     		ldr	r3, [r7, #48]
 5792 0140 DA6A     		ldr	r2, [r3, #44]
 5793 0142 104B     		ldr	r3, .L393+16
 5794 0144 1B68     		ldr	r3, [r3]
 5795 0146 DB6A     		ldr	r3, [r3, #44]
 5796 0148 9A42     		cmp	r2, r3
 5797 014a 09D9     		bls	.L384
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 5798              		.loc 1 4545 0
 5799 014c 3B6C     		ldr	r3, [r7, #64]
 5800 014e 002B     		cmp	r3, #0
 5801 0150 03D0     		beq	.L389
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 5802              		.loc 1 4547 0
 5803 0152 3B6C     		ldr	r3, [r7, #64]
 5804 0154 0122     		movs	r2, #1
 5805 0156 1A60     		str	r2, [r3]
 5806 0158 02E0     		b	.L384
 5807              	.L389:
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 5808              		.loc 1 4554 0
 5809 015a 0B4B     		ldr	r3, .L393+20
 5810 015c 0122     		movs	r2, #1
 5811 015e 1A60     		str	r2, [r3]
 5812              	.L384:
 5813 0160 FB6A     		ldr	r3, [r7, #44]
 5814 0162 7B61     		str	r3, [r7, #20]
 5815              	.LBB185:
 5816              	.LBB186:
 5817              		.loc 2 271 0
 5818 0164 7B69     		ldr	r3, [r7, #20]
 5819              		.syntax unified
 5820              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5821 0166 83F31188 			msr basepri, r3	
 5822              	@ 0 "" 2
 5823              		.thumb
 5824              		.syntax unified
 5825              	.LBE186:
ARM GAS  /tmp/ccDSLKwL.s 			page 187


 5826              	.LBE185:
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5827              		.loc 1 4565 0
 5828 016a 7B6B     		ldr	r3, [r7, #52]
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5829              		.loc 1 4566 0
 5830 016c 1846     		mov	r0, r3
 5831 016e 3837     		adds	r7, r7, #56
 5832              	.LCFI226:
 5833              		.cfi_def_cfa_offset 8
 5834 0170 BD46     		mov	sp, r7
 5835              	.LCFI227:
 5836              		.cfi_def_cfa_register 13
 5837              		@ sp needed
 5838 0172 80BD     		pop	{r7, pc}
 5839              	.L394:
 5840              		.align	2
 5841              	.L393:
 5842 0174 00000000 		.word	uxSchedulerSuspended
 5843 0178 00000000 		.word	uxTopReadyPriority
 5844 017c 00000000 		.word	pxReadyTasksLists
 5845 0180 00000000 		.word	xPendingReadyList
 5846 0184 00000000 		.word	pxCurrentTCB
 5847 0188 00000000 		.word	xYieldPending
 5848              		.cfi_endproc
 5849              	.LFE49:
 5851              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5852              		.align	1
 5853              		.global	vTaskNotifyGiveFromISR
 5854              		.syntax unified
 5855              		.thumb
 5856              		.thumb_func
 5857              		.fpu fpv4-sp-d16
 5859              	vTaskNotifyGiveFromISR:
 5860              	.LFB50:
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5861              		.loc 1 4574 0
 5862              		.cfi_startproc
 5863              		@ args = 0, pretend = 0, frame = 40
 5864              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccDSLKwL.s 			page 188


 5865 0000 80B5     		push	{r7, lr}
 5866              	.LCFI228:
 5867              		.cfi_def_cfa_offset 8
 5868              		.cfi_offset 7, -8
 5869              		.cfi_offset 14, -4
 5870 0002 8AB0     		sub	sp, sp, #40
 5871              	.LCFI229:
 5872              		.cfi_def_cfa_offset 48
 5873 0004 00AF     		add	r7, sp, #0
 5874              	.LCFI230:
 5875              		.cfi_def_cfa_register 7
 5876 0006 7860     		str	r0, [r7, #4]
 5877 0008 3960     		str	r1, [r7]
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5878              		.loc 1 4579 0
 5879 000a 7B68     		ldr	r3, [r7, #4]
 5880 000c 002B     		cmp	r3, #0
 5881 000e 09D1     		bne	.L396
 5882              	.LBB187:
 5883              	.LBB188:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5884              		.loc 2 237 0 discriminator 1
 5885              		.syntax unified
 5886              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5887 0010 4FF05003 			mov r3, #80												
 5888 0014 83F31188 		msr basepri, r3											
 5889 0018 BFF36F8F 		isb														
 5890 001c BFF34F8F 		dsb														
 5891              	
 5892              	@ 0 "" 2
 5893              		.thumb
 5894              		.syntax unified
 5895 0020 BB61     		str	r3, [r7, #24]
 5896              	.L397:
 5897              	.LBE188:
 5898              	.LBE187:
 5899              		.loc 1 4579 0 discriminator 1
 5900 0022 FEE7     		b	.L397
 5901              	.L396:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
ARM GAS  /tmp/ccDSLKwL.s 			page 189


4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 5902              		.loc 1 4597 0
 5903 0024 FFF7FEFF 		bl	vPortValidateInterruptPriority
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5904              		.loc 1 4599 0
 5905 0028 7B68     		ldr	r3, [r7, #4]
 5906 002a 7B62     		str	r3, [r7, #36]
 5907              	.LBB189:
 5908              	.LBB190:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5909              		.loc 2 253 0
 5910              		.syntax unified
 5911              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5912 002c EFF31182 			mrs r2, basepri											
 5913 0030 4FF05003 		mov r3, #80												
 5914 0034 83F31188 		msr basepri, r3											
 5915 0038 BFF36F8F 		isb														
 5916 003c BFF34F8F 		dsb														
 5917              	
 5918              	@ 0 "" 2
 5919              		.thumb
 5920              		.syntax unified
 5921 0040 7A61     		str	r2, [r7, #20]
 5922 0042 3B61     		str	r3, [r7, #16]
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 5923              		.loc 2 265 0
 5924 0044 7B69     		ldr	r3, [r7, #20]
 5925              	.LBE190:
 5926              	.LBE189:
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 5927              		.loc 1 4601 0
 5928 0046 3B62     		str	r3, [r7, #32]
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5929              		.loc 1 4603 0
 5930 0048 7B6A     		ldr	r3, [r7, #36]
 5931 004a 93F85030 		ldrb	r3, [r3, #80]
 5932 004e FB77     		strb	r3, [r7, #31]
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5933              		.loc 1 4604 0
 5934 0050 7B6A     		ldr	r3, [r7, #36]
 5935 0052 0222     		movs	r2, #2
 5936 0054 83F85020 		strb	r2, [r3, #80]
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 5937              		.loc 1 4608 0
 5938 0058 7B6A     		ldr	r3, [r7, #36]
 5939 005a DB6C     		ldr	r3, [r3, #76]
 5940 005c 5A1C     		adds	r2, r3, #1
 5941 005e 7B6A     		ldr	r3, [r7, #36]
ARM GAS  /tmp/ccDSLKwL.s 			page 190


 5942 0060 DA64     		str	r2, [r3, #76]
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5943              		.loc 1 4614 0
 5944 0062 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5945 0064 012B     		cmp	r3, #1
 5946 0066 45D1     		bne	.L399
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5947              		.loc 1 4617 0
 5948 0068 7B6A     		ldr	r3, [r7, #36]
 5949 006a 9B6A     		ldr	r3, [r3, #40]
 5950 006c 002B     		cmp	r3, #0
 5951 006e 09D0     		beq	.L400
 5952              	.LBB191:
 5953              	.LBB192:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5954              		.loc 2 237 0 discriminator 1
 5955              		.syntax unified
 5956              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5957 0070 4FF05003 			mov r3, #80												
 5958 0074 83F31188 		msr basepri, r3											
 5959 0078 BFF36F8F 		isb														
 5960 007c BFF34F8F 		dsb														
 5961              	
 5962              	@ 0 "" 2
 5963              		.thumb
 5964              		.syntax unified
 5965 0080 FB60     		str	r3, [r7, #12]
 5966              	.L401:
 5967              	.LBE192:
 5968              	.LBE191:
 5969              		.loc 1 4617 0 discriminator 2
 5970 0082 FEE7     		b	.L401
 5971              	.L400:
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5972              		.loc 1 4619 0
 5973 0084 204B     		ldr	r3, .L406
 5974 0086 1B68     		ldr	r3, [r3]
 5975 0088 002B     		cmp	r3, #0
 5976 008a 1CD1     		bne	.L402
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5977              		.loc 1 4621 0
 5978 008c 7B6A     		ldr	r3, [r7, #36]
 5979 008e 0433     		adds	r3, r3, #4
 5980 0090 1846     		mov	r0, r3
 5981 0092 FFF7FEFF 		bl	uxListRemove
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5982              		.loc 1 4622 0
 5983 0096 7B6A     		ldr	r3, [r7, #36]
ARM GAS  /tmp/ccDSLKwL.s 			page 191


 5984 0098 DB6A     		ldr	r3, [r3, #44]
 5985 009a 0122     		movs	r2, #1
 5986 009c 9A40     		lsls	r2, r2, r3
 5987 009e 1B4B     		ldr	r3, .L406+4
 5988 00a0 1B68     		ldr	r3, [r3]
 5989 00a2 1343     		orrs	r3, r3, r2
 5990 00a4 194A     		ldr	r2, .L406+4
 5991 00a6 1360     		str	r3, [r2]
 5992 00a8 7B6A     		ldr	r3, [r7, #36]
 5993 00aa DA6A     		ldr	r2, [r3, #44]
 5994 00ac 1346     		mov	r3, r2
 5995 00ae 9B00     		lsls	r3, r3, #2
 5996 00b0 1344     		add	r3, r3, r2
 5997 00b2 9B00     		lsls	r3, r3, #2
 5998 00b4 164A     		ldr	r2, .L406+8
 5999 00b6 1A44     		add	r2, r2, r3
 6000 00b8 7B6A     		ldr	r3, [r7, #36]
 6001 00ba 0433     		adds	r3, r3, #4
 6002 00bc 1946     		mov	r1, r3
 6003 00be 1046     		mov	r0, r2
 6004 00c0 FFF7FEFF 		bl	vListInsertEnd
 6005 00c4 05E0     		b	.L403
 6006              	.L402:
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 6007              		.loc 1 4628 0
 6008 00c6 7B6A     		ldr	r3, [r7, #36]
 6009 00c8 1833     		adds	r3, r3, #24
 6010 00ca 1946     		mov	r1, r3
 6011 00cc 1148     		ldr	r0, .L406+12
 6012 00ce FFF7FEFF 		bl	vListInsertEnd
 6013              	.L403:
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6014              		.loc 1 4631 0
 6015 00d2 7B6A     		ldr	r3, [r7, #36]
 6016 00d4 DA6A     		ldr	r2, [r3, #44]
 6017 00d6 104B     		ldr	r3, .L406+16
 6018 00d8 1B68     		ldr	r3, [r3]
 6019 00da DB6A     		ldr	r3, [r3, #44]
 6020 00dc 9A42     		cmp	r2, r3
 6021 00de 09D9     		bls	.L399
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 6022              		.loc 1 4635 0
 6023 00e0 3B68     		ldr	r3, [r7]
 6024 00e2 002B     		cmp	r3, #0
 6025 00e4 03D0     		beq	.L404
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
ARM GAS  /tmp/ccDSLKwL.s 			page 192


 6026              		.loc 1 4637 0
 6027 00e6 3B68     		ldr	r3, [r7]
 6028 00e8 0122     		movs	r2, #1
 6029 00ea 1A60     		str	r2, [r3]
 6030 00ec 02E0     		b	.L399
 6031              	.L404:
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 6032              		.loc 1 4644 0
 6033 00ee 0B4B     		ldr	r3, .L406+20
 6034 00f0 0122     		movs	r2, #1
 6035 00f2 1A60     		str	r2, [r3]
 6036              	.L399:
 6037 00f4 3B6A     		ldr	r3, [r7, #32]
 6038 00f6 BB60     		str	r3, [r7, #8]
 6039              	.LBB193:
 6040              	.LBB194:
 6041              		.loc 2 271 0
 6042 00f8 BB68     		ldr	r3, [r7, #8]
 6043              		.syntax unified
 6044              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6045 00fa 83F31188 			msr basepri, r3	
 6046              	@ 0 "" 2
 6047              		.thumb
 6048              		.syntax unified
 6049              	.LBE194:
 6050              	.LBE193:
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6051              		.loc 1 4654 0
 6052 00fe 00BF     		nop
 6053 0100 2837     		adds	r7, r7, #40
 6054              	.LCFI231:
 6055              		.cfi_def_cfa_offset 8
 6056 0102 BD46     		mov	sp, r7
 6057              	.LCFI232:
 6058              		.cfi_def_cfa_register 13
 6059              		@ sp needed
 6060 0104 80BD     		pop	{r7, pc}
 6061              	.L407:
 6062 0106 00BF     		.align	2
 6063              	.L406:
 6064 0108 00000000 		.word	uxSchedulerSuspended
 6065 010c 00000000 		.word	uxTopReadyPriority
ARM GAS  /tmp/ccDSLKwL.s 			page 193


 6066 0110 00000000 		.word	pxReadyTasksLists
 6067 0114 00000000 		.word	xPendingReadyList
 6068 0118 00000000 		.word	pxCurrentTCB
 6069 011c 00000000 		.word	xYieldPending
 6070              		.cfi_endproc
 6071              	.LFE50:
 6073              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6074              		.align	1
 6075              		.global	xTaskNotifyStateClear
 6076              		.syntax unified
 6077              		.thumb
 6078              		.thumb_func
 6079              		.fpu fpv4-sp-d16
 6081              	xTaskNotifyStateClear:
 6082              	.LFB51:
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6083              		.loc 1 4663 0
 6084              		.cfi_startproc
 6085              		@ args = 0, pretend = 0, frame = 16
 6086              		@ frame_needed = 1, uses_anonymous_args = 0
 6087 0000 80B5     		push	{r7, lr}
 6088              	.LCFI233:
 6089              		.cfi_def_cfa_offset 8
 6090              		.cfi_offset 7, -8
 6091              		.cfi_offset 14, -4
 6092 0002 84B0     		sub	sp, sp, #16
 6093              	.LCFI234:
 6094              		.cfi_def_cfa_offset 24
 6095 0004 00AF     		add	r7, sp, #0
 6096              	.LCFI235:
 6097              		.cfi_def_cfa_register 7
 6098 0006 7860     		str	r0, [r7, #4]
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 6099              		.loc 1 4669 0
 6100 0008 7B68     		ldr	r3, [r7, #4]
 6101 000a 002B     		cmp	r3, #0
 6102 000c 02D1     		bne	.L409
 6103              		.loc 1 4669 0 is_stmt 0 discriminator 1
 6104 000e 0E4B     		ldr	r3, .L414
 6105 0010 1B68     		ldr	r3, [r3]
 6106 0012 00E0     		b	.L410
 6107              	.L409:
 6108              		.loc 1 4669 0 discriminator 2
 6109 0014 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccDSLKwL.s 			page 194


 6110              	.L410:
 6111              		.loc 1 4669 0 discriminator 4
 6112 0016 BB60     		str	r3, [r7, #8]
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6113              		.loc 1 4671 0 is_stmt 1 discriminator 4
 6114 0018 FFF7FEFF 		bl	vPortEnterCritical
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 6115              		.loc 1 4673 0 discriminator 4
 6116 001c BB68     		ldr	r3, [r7, #8]
 6117 001e 93F85030 		ldrb	r3, [r3, #80]
 6118 0022 DBB2     		uxtb	r3, r3
 6119 0024 022B     		cmp	r3, #2
 6120 0026 06D1     		bne	.L411
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6121              		.loc 1 4675 0
 6122 0028 BB68     		ldr	r3, [r7, #8]
 6123 002a 0022     		movs	r2, #0
 6124 002c 83F85020 		strb	r2, [r3, #80]
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 6125              		.loc 1 4676 0
 6126 0030 0123     		movs	r3, #1
 6127 0032 FB60     		str	r3, [r7, #12]
 6128 0034 01E0     		b	.L412
 6129              	.L411:
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 6130              		.loc 1 4680 0
 6131 0036 0023     		movs	r3, #0
 6132 0038 FB60     		str	r3, [r7, #12]
 6133              	.L412:
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6134              		.loc 1 4683 0
 6135 003a FFF7FEFF 		bl	vPortExitCritical
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6136              		.loc 1 4685 0
 6137 003e FB68     		ldr	r3, [r7, #12]
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6138              		.loc 1 4686 0
 6139 0040 1846     		mov	r0, r3
 6140 0042 1037     		adds	r7, r7, #16
 6141              	.LCFI236:
 6142              		.cfi_def_cfa_offset 8
 6143 0044 BD46     		mov	sp, r7
 6144              	.LCFI237:
 6145              		.cfi_def_cfa_register 13
 6146              		@ sp needed
 6147 0046 80BD     		pop	{r7, pc}
 6148              	.L415:
 6149              		.align	2
ARM GAS  /tmp/ccDSLKwL.s 			page 195


 6150              	.L414:
 6151 0048 00000000 		.word	pxCurrentTCB
 6152              		.cfi_endproc
 6153              	.LFE51:
 6155              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 6156              		.align	1
 6157              		.syntax unified
 6158              		.thumb
 6159              		.thumb_func
 6160              		.fpu fpv4-sp-d16
 6162              	prvAddCurrentTaskToDelayedList:
 6163              	.LFB52:
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 6164              		.loc 1 4693 0
 6165              		.cfi_startproc
 6166              		@ args = 0, pretend = 0, frame = 16
 6167              		@ frame_needed = 1, uses_anonymous_args = 0
 6168 0000 80B5     		push	{r7, lr}
 6169              	.LCFI238:
 6170              		.cfi_def_cfa_offset 8
 6171              		.cfi_offset 7, -8
 6172              		.cfi_offset 14, -4
 6173 0002 84B0     		sub	sp, sp, #16
 6174              	.LCFI239:
 6175              		.cfi_def_cfa_offset 24
 6176 0004 00AF     		add	r7, sp, #0
 6177              	.LCFI240:
 6178              		.cfi_def_cfa_register 7
 6179 0006 7860     		str	r0, [r7, #4]
 6180 0008 3960     		str	r1, [r7]
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 6181              		.loc 1 4695 0
 6182 000a 294B     		ldr	r3, .L422
 6183 000c 1B68     		ldr	r3, [r3]
 6184 000e FB60     		str	r3, [r7, #12]
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6185              		.loc 1 4708 0
 6186 0010 284B     		ldr	r3, .L422+4
ARM GAS  /tmp/ccDSLKwL.s 			page 196


 6187 0012 1B68     		ldr	r3, [r3]
 6188 0014 0433     		adds	r3, r3, #4
 6189 0016 1846     		mov	r0, r3
 6190 0018 FFF7FEFF 		bl	uxListRemove
 6191 001c 0346     		mov	r3, r0
 6192 001e 002B     		cmp	r3, #0
 6193 0020 0BD1     		bne	.L417
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 6194              		.loc 1 4712 0
 6195 0022 244B     		ldr	r3, .L422+4
 6196 0024 1B68     		ldr	r3, [r3]
 6197 0026 DB6A     		ldr	r3, [r3, #44]
 6198 0028 0122     		movs	r2, #1
 6199 002a 02FA03F3 		lsl	r3, r2, r3
 6200 002e DA43     		mvns	r2, r3
 6201 0030 214B     		ldr	r3, .L422+8
 6202 0032 1B68     		ldr	r3, [r3]
 6203 0034 1340     		ands	r3, r3, r2
 6204 0036 204A     		ldr	r2, .L422+8
 6205 0038 1360     		str	r3, [r2]
 6206              	.L417:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 6207              		.loc 1 4721 0
 6208 003a 7B68     		ldr	r3, [r7, #4]
 6209 003c B3F1FF3F 		cmp	r3, #-1
 6210 0040 0AD1     		bne	.L418
 6211              		.loc 1 4721 0 is_stmt 0 discriminator 1
 6212 0042 3B68     		ldr	r3, [r7]
 6213 0044 002B     		cmp	r3, #0
 6214 0046 07D0     		beq	.L418
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 6215              		.loc 1 4726 0 is_stmt 1
 6216 0048 1A4B     		ldr	r3, .L422+4
 6217 004a 1B68     		ldr	r3, [r3]
 6218 004c 0433     		adds	r3, r3, #4
 6219 004e 1946     		mov	r1, r3
 6220 0050 1A48     		ldr	r0, .L422+12
 6221 0052 FFF7FEFF 		bl	vListInsertEnd
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
ARM GAS  /tmp/ccDSLKwL.s 			page 197


4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
ARM GAS  /tmp/ccDSLKwL.s 			page 198


4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 6222              		.loc 1 4801 0
 6223 0056 26E0     		b	.L421
 6224              	.L418:
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6225              		.loc 1 4733 0
 6226 0058 FA68     		ldr	r2, [r7, #12]
 6227 005a 7B68     		ldr	r3, [r7, #4]
 6228 005c 1344     		add	r3, r3, r2
 6229 005e BB60     		str	r3, [r7, #8]
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6230              		.loc 1 4736 0
 6231 0060 144B     		ldr	r3, .L422+4
 6232 0062 1B68     		ldr	r3, [r3]
 6233 0064 BA68     		ldr	r2, [r7, #8]
 6234 0066 5A60     		str	r2, [r3, #4]
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6235              		.loc 1 4738 0
 6236 0068 BA68     		ldr	r2, [r7, #8]
 6237 006a FB68     		ldr	r3, [r7, #12]
 6238 006c 9A42     		cmp	r2, r3
 6239 006e 09D2     		bcs	.L420
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6240              		.loc 1 4742 0
 6241 0070 134B     		ldr	r3, .L422+16
 6242 0072 1A68     		ldr	r2, [r3]
 6243 0074 0F4B     		ldr	r3, .L422+4
 6244 0076 1B68     		ldr	r3, [r3]
 6245 0078 0433     		adds	r3, r3, #4
 6246 007a 1946     		mov	r1, r3
 6247 007c 1046     		mov	r0, r2
 6248 007e FFF7FEFF 		bl	vListInsert
 6249              		.loc 1 4801 0
 6250 0082 10E0     		b	.L421
 6251              	.L420:
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6252              		.loc 1 4748 0
 6253 0084 0F4B     		ldr	r3, .L422+20
 6254 0086 1A68     		ldr	r2, [r3]
 6255 0088 0A4B     		ldr	r3, .L422+4
 6256 008a 1B68     		ldr	r3, [r3]
 6257 008c 0433     		adds	r3, r3, #4
 6258 008e 1946     		mov	r1, r3
 6259 0090 1046     		mov	r0, r2
ARM GAS  /tmp/ccDSLKwL.s 			page 199


 6260 0092 FFF7FEFF 		bl	vListInsert
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6261              		.loc 1 4753 0
 6262 0096 0C4B     		ldr	r3, .L422+24
 6263 0098 1B68     		ldr	r3, [r3]
 6264 009a BA68     		ldr	r2, [r7, #8]
 6265 009c 9A42     		cmp	r2, r3
 6266 009e 02D2     		bcs	.L421
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6267              		.loc 1 4755 0
 6268 00a0 094A     		ldr	r2, .L422+24
 6269 00a2 BB68     		ldr	r3, [r7, #8]
 6270 00a4 1360     		str	r3, [r2]
 6271              	.L421:
 6272              		.loc 1 4801 0
 6273 00a6 00BF     		nop
 6274 00a8 1037     		adds	r7, r7, #16
 6275              	.LCFI241:
 6276              		.cfi_def_cfa_offset 8
 6277 00aa BD46     		mov	sp, r7
 6278              	.LCFI242:
 6279              		.cfi_def_cfa_register 13
 6280              		@ sp needed
 6281 00ac 80BD     		pop	{r7, pc}
 6282              	.L423:
 6283 00ae 00BF     		.align	2
 6284              	.L422:
 6285 00b0 00000000 		.word	xTickCount
 6286 00b4 00000000 		.word	pxCurrentTCB
 6287 00b8 00000000 		.word	uxTopReadyPriority
 6288 00bc 00000000 		.word	xSuspendedTaskList
 6289 00c0 00000000 		.word	pxOverflowDelayedTaskList
 6290 00c4 00000000 		.word	pxDelayedTaskList
 6291 00c8 00000000 		.word	xNextTaskUnblockTime
 6292              		.cfi_endproc
 6293              	.LFE52:
 6295              		.text
 6296              	.Letext0:
 6297              		.file 3 "/opt/gcc4mbed/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 6298              		.file 4 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 6299              		.file 5 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/sys/lock.h"
 6300              		.file 6 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/sys/_types.h"
 6301              		.file 7 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/sys/reent.h"
 6302              		.file 8 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 6303              		.file 9 "Inc/FreeRTOSConfig.h"
 6304              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 6305              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 6306              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/ccDSLKwL.s 			page 200


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccDSLKwL.s:22     .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccDSLKwL.s:19     .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccDSLKwL.s:25     .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccDSLKwL.s:28     .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccDSLKwL.s:31     .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccDSLKwL.s:34     .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccDSLKwL.s:37     .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccDSLKwL.s:40     .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccDSLKwL.s:43     .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccDSLKwL.s:46     .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccDSLKwL.s:49     .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccDSLKwL.s:52     .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccDSLKwL.s:55     .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccDSLKwL.s:58     .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccDSLKwL.s:61     .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccDSLKwL.s:64     .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccDSLKwL.s:67     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccDSLKwL.s:70     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccDSLKwL.s:73     .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccDSLKwL.s:76     .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccDSLKwL.s:79     .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccDSLKwL.s:82     .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccDSLKwL.s:85     .bss.xTickCount:0000000000000000 $d
     /tmp/ccDSLKwL.s:88     .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccDSLKwL.s:91     .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccDSLKwL.s:94     .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccDSLKwL.s:97     .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccDSLKwL.s:100    .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccDSLKwL.s:103    .bss.uxPendedTicks:0000000000000000 $d
     /tmp/ccDSLKwL.s:106    .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/ccDSLKwL.s:109    .bss.xYieldPending:0000000000000000 $d
     /tmp/ccDSLKwL.s:112    .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccDSLKwL.s:115    .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccDSLKwL.s:118    .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccDSLKwL.s:121    .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccDSLKwL.s:124    .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccDSLKwL.s:127    .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccDSLKwL.s:130    .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccDSLKwL.s:133    .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/ccDSLKwL.s:136    .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/ccDSLKwL.s:139    .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccDSLKwL.s:142    .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccDSLKwL.s:145    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccDSLKwL.s:152    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccDSLKwL.s:262    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccDSLKwL.s:451    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccDSLKwL.s:256    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccDSLKwL.s:445    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccDSLKwL.s:4136   .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccDSLKwL.s:584    .text.prvAddNewTaskToReadyList:00000000000000b8 $d
     /tmp/ccDSLKwL.s:595    .text.vTaskDelete:0000000000000000 $t
     /tmp/ccDSLKwL.s:602    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccDSLKwL.s:4333   .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccDSLKwL.s:4379   .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccDSLKwL.s:782    .text.vTaskDelete:00000000000000f4 $d
ARM GAS  /tmp/ccDSLKwL.s 			page 201


     /tmp/ccDSLKwL.s:796    .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/ccDSLKwL.s:803    .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/ccDSLKwL.s:2368   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccDSLKwL.s:6162   .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccDSLKwL.s:2414   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccDSLKwL.s:1000   .text.vTaskDelayUntil:00000000000000e8 $d
     /tmp/ccDSLKwL.s:1007   .text.vTaskDelay:0000000000000000 $t
     /tmp/ccDSLKwL.s:1014   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccDSLKwL.s:1105   .text.vTaskDelay:0000000000000060 $d
     /tmp/ccDSLKwL.s:1111   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccDSLKwL.s:1118   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccDSLKwL.s:1173   .text.uxTaskPriorityGet:0000000000000030 $d
     /tmp/ccDSLKwL.s:1178   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccDSLKwL.s:1185   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccDSLKwL.s:1274   .text.uxTaskPriorityGetFromISR:0000000000000054 $d
     /tmp/ccDSLKwL.s:1279   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccDSLKwL.s:1286   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccDSLKwL.s:1527   .text.vTaskPrioritySet:000000000000014c $d
     /tmp/ccDSLKwL.s:1535   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccDSLKwL.s:1542   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccDSLKwL.s:3137   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccDSLKwL.s:1721   .text.vTaskSuspend:00000000000000f0 $d
     /tmp/ccDSLKwL.s:1733   .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccDSLKwL.s:1739   .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccDSLKwL.s:1847   .text.prvTaskIsTaskSuspended:000000000000006c $d
     /tmp/ccDSLKwL.s:1853   .text.vTaskResume:0000000000000000 $t
     /tmp/ccDSLKwL.s:1860   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccDSLKwL.s:1989   .text.vTaskResume:00000000000000a8 $d
     /tmp/ccDSLKwL.s:1997   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccDSLKwL.s:2004   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccDSLKwL.s:2165   .text.xTaskResumeFromISR:00000000000000cc $d
     /tmp/ccDSLKwL.s:2174   .rodata:0000000000000000 $d
     /tmp/ccDSLKwL.s:2178   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccDSLKwL.s:2185   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccDSLKwL.s:2287   .text.vTaskStartScheduler:0000000000000074 $d
     /tmp/ccDSLKwL.s:4080   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccDSLKwL.s:2297   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccDSLKwL.s:2304   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccDSLKwL.s:2356   .text.vTaskEndScheduler:000000000000002c $d
     /tmp/ccDSLKwL.s:2361   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccDSLKwL.s:2402   .text.vTaskSuspendAll:0000000000000018 $d
     /tmp/ccDSLKwL.s:2407   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccDSLKwL.s:2875   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccDSLKwL.s:2619   .text.xTaskResumeAll:0000000000000114 $d
     /tmp/ccDSLKwL.s:2632   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccDSLKwL.s:2639   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccDSLKwL.s:2679   .text.xTaskGetTickCount:000000000000001c $d
     /tmp/ccDSLKwL.s:2684   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccDSLKwL.s:2691   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccDSLKwL.s:2732   .text.xTaskGetTickCountFromISR:0000000000000020 $d
     /tmp/ccDSLKwL.s:2737   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccDSLKwL.s:2744   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccDSLKwL.s:2775   .text.uxTaskGetNumberOfTasks:0000000000000014 $d
     /tmp/ccDSLKwL.s:2780   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccDSLKwL.s:2787   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccDSLKwL.s:2863   .text.pcTaskGetName:0000000000000044 $d
     /tmp/ccDSLKwL.s:2868   .text.xTaskIncrementTick:0000000000000000 $t
ARM GAS  /tmp/ccDSLKwL.s 			page 202


     /tmp/ccDSLKwL.s:3115   .text.xTaskIncrementTick:000000000000014c $d
     /tmp/ccDSLKwL.s:3130   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccDSLKwL.s:3277   .text.vTaskSwitchContext:00000000000000a0 $d
     /tmp/ccDSLKwL.s:3286   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccDSLKwL.s:3293   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccDSLKwL.s:3360   .text.vTaskPlaceOnEventList:0000000000000044 $d
     /tmp/ccDSLKwL.s:3365   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccDSLKwL.s:3372   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccDSLKwL.s:3471   .text.vTaskPlaceOnUnorderedEventList:000000000000006c $d
     /tmp/ccDSLKwL.s:3477   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccDSLKwL.s:3484   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccDSLKwL.s:3614   .text.xTaskRemoveFromEventList:00000000000000ac $d
     /tmp/ccDSLKwL.s:3624   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccDSLKwL.s:3631   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 xTaskRemoveFromUnorderedEventList
     /tmp/ccDSLKwL.s:3775   .text.xTaskRemoveFromUnorderedEventList:00000000000000b8 $d
     /tmp/ccDSLKwL.s:3784   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccDSLKwL.s:3791   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccDSLKwL.s:3860   .text.vTaskSetTimeOutState:0000000000000040 $d
     /tmp/ccDSLKwL.s:3866   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccDSLKwL.s:3873   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccDSLKwL.s:4024   .text.xTaskCheckForTimeOut:00000000000000b4 $d
     /tmp/ccDSLKwL.s:4030   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccDSLKwL.s:4037   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccDSLKwL.s:4069   .text.vTaskMissedYield:0000000000000014 $d
     /tmp/ccDSLKwL.s:4074   .text.prvIdleTask:0000000000000000 $t
     /tmp/ccDSLKwL.s:4231   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccDSLKwL.s:4124   .text.prvIdleTask:0000000000000028 $d
     /tmp/ccDSLKwL.s:4130   .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccDSLKwL.s:4213   .text.prvInitialiseTaskLists:0000000000000060 $d
     /tmp/ccDSLKwL.s:4225   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccDSLKwL.s:4320   .text.prvCheckTasksWaitingTermination:000000000000006c $d
     /tmp/ccDSLKwL.s:4327   .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccDSLKwL.s:4373   .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccDSLKwL.s:4448   .text.prvResetNextTaskUnblockTime:0000000000000044 $d
     /tmp/ccDSLKwL.s:4454   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccDSLKwL.s:4461   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccDSLKwL.s:4501   .text.xTaskGetCurrentTaskHandle:000000000000001c $d
     /tmp/ccDSLKwL.s:4506   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccDSLKwL.s:4513   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccDSLKwL.s:4573   .text.xTaskGetSchedulerState:0000000000000034 $d
     /tmp/ccDSLKwL.s:4579   .text.vTaskPriorityInherit:0000000000000000 $t
     /tmp/ccDSLKwL.s:4586   .text.vTaskPriorityInherit:0000000000000000 vTaskPriorityInherit
     /tmp/ccDSLKwL.s:4739   .text.vTaskPriorityInherit:00000000000000e0 $d
     /tmp/ccDSLKwL.s:4746   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccDSLKwL.s:4753   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccDSLKwL.s:4935   .text.xTaskPriorityDisinherit:00000000000000fc $d
     /tmp/ccDSLKwL.s:4942   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccDSLKwL.s:4949   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccDSLKwL.s:4998   .text.uxTaskResetEventItemValue:000000000000002c $d
     /tmp/ccDSLKwL.s:5003   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccDSLKwL.s:5010   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccDSLKwL.s:5053   .text.pvTaskIncrementMutexHeldCount:0000000000000024 $d
     /tmp/ccDSLKwL.s:5058   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccDSLKwL.s:5065   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccDSLKwL.s:5172   .text.ulTaskNotifyTake:0000000000000088 $d
     /tmp/ccDSLKwL.s:5178   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccDSLKwL.s:5185   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
ARM GAS  /tmp/ccDSLKwL.s 			page 203


     /tmp/ccDSLKwL.s:5311   .text.xTaskNotifyWait:00000000000000ac $d
     /tmp/ccDSLKwL.s:5317   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccDSLKwL.s:5324   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccDSLKwL.s:5404   .text.xTaskGenericNotify:0000000000000060 $d
     /tmp/ccDSLKwL.s:5409   .text.xTaskGenericNotify:0000000000000074 $t
     /tmp/ccDSLKwL.s:5551   .text.xTaskGenericNotify:0000000000000130 $d
     /tmp/ccDSLKwL.s:5559   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccDSLKwL.s:5566   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccDSLKwL.s:5668   .text.xTaskGenericNotifyFromISR:0000000000000080 $d
     /tmp/ccDSLKwL.s:5673   .text.xTaskGenericNotifyFromISR:0000000000000094 $t
     /tmp/ccDSLKwL.s:5842   .text.xTaskGenericNotifyFromISR:0000000000000174 $d
     /tmp/ccDSLKwL.s:5852   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccDSLKwL.s:5859   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccDSLKwL.s:6064   .text.vTaskNotifyGiveFromISR:0000000000000108 $d
     /tmp/ccDSLKwL.s:6074   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccDSLKwL.s:6081   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccDSLKwL.s:6151   .text.xTaskNotifyStateClear:0000000000000048 $d
     /tmp/ccDSLKwL.s:6156   .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccDSLKwL.s:6285   .text.prvAddCurrentTaskToDelayedList:00000000000000b0 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
xPortStartScheduler
vPortEndScheduler
vListInsert
vListInitialise
