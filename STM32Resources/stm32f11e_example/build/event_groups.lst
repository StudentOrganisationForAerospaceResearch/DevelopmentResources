ARM GAS  /tmp/ccLpvFJA.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"event_groups.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.xEventGroupCreate,"ax",%progbits
  18              		.align	1
  19              		.global	xEventGroupCreate
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	xEventGroupCreate:
  26              	.LFB5:
  27              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *                                                                       *
ARM GAS  /tmp/ccLpvFJA.s 			page 2


  32:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  73:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** task.h is included from an application file. */
  76:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* FreeRTOS includes. */
  79:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "FreeRTOS.h"
  80:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "task.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "timers.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "event_groups.h"
  83:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  84:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  85:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  86:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** header files above, but not in this file, in order to generate the correct
  87:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** privileged Vs unprivileged linkage and placement. */
  88:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
ARM GAS  /tmp/ccLpvFJA.s 			page 3


  89:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* The following bit fields convey control information in a task's event list
  91:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** item value.  It is important they don't clash with the
  92:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  93:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  94:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
  95:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
  96:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
  97:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
  98:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #else
  99:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
 100:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
 101:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
 102:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
 103:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 104:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 105:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** typedef struct xEventGroupDefinition
 106:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 107:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventBits_t uxEventBits;
 108:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
 109:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 110:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
 111:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
 112:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 113:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 115:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated to en
 116:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 117:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** } EventGroup_t;
 118:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 119:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 120:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
 122:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
 123:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
 124:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
 125:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
 126:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
 127:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * in uxCurrentEventBits.
 128:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
 129:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** PRIVILEGED_FUNCTION static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, c
 130:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 134:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 135:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
 136:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 137:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 138:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 139:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* A StaticEventGroup_t object must be provided. */
 140:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( pxEventGroupBuffer );
 141:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 142:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The user has provided a statically allocated event group - use it. */
 143:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGro
 144:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 145:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
ARM GAS  /tmp/ccLpvFJA.s 			page 4


 146:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 147:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 148:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 149:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 151:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 152:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note that
 153:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				this event group was created statically in case the event group
 154:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				is later deleted. */
 155:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdTRUE;
 156:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 157:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 158:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 159:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 160:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 161:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 162:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 163:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 164:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 165:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 166:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 167:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 168:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 170:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 171:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 172:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 173:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreate( void )
 175:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
  28              		.loc 1 175 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
 176:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 177:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 178:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Allocate the event group. */
 179:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
  43              		.loc 1 179 0
  44 0006 1820     		movs	r0, #24
  45 0008 FFF7FEFF 		bl	pvPortMalloc
  46 000c 7860     		str	r0, [r7, #4]
 180:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
  47              		.loc 1 181 0
  48 000e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccLpvFJA.s 			page 5


  49 0010 002B     		cmp	r3, #0
  50 0012 07D0     		beq	.L2
 182:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 183:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
  51              		.loc 1 183 0
  52 0014 7B68     		ldr	r3, [r7, #4]
  53 0016 0022     		movs	r2, #0
  54 0018 1A60     		str	r2, [r3]
 184:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
  55              		.loc 1 184 0
  56 001a 7B68     		ldr	r3, [r7, #4]
  57 001c 0433     		adds	r3, r3, #4
  58 001e 1846     		mov	r0, r3
  59 0020 FFF7FEFF 		bl	vListInitialise
  60              	.L2:
 185:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 188:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note this
 189:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				event group was allocated statically in case the event group is
 190:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				later deleted. */
 191:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdFALSE;
 192:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 193:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 194:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 196:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 197:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 198:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 199:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 200:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 201:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
  61              		.loc 1 202 0
  62 0024 7B68     		ldr	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
  63              		.loc 1 203 0
  64 0026 1846     		mov	r0, r3
  65 0028 0837     		adds	r7, r7, #8
  66              	.LCFI3:
  67              		.cfi_def_cfa_offset 8
  68 002a BD46     		mov	sp, r7
  69              	.LCFI4:
  70              		.cfi_def_cfa_register 13
  71              		@ sp needed
  72 002c 80BD     		pop	{r7, pc}
  73              		.cfi_endproc
  74              	.LFE5:
  76              		.section	.text.xEventGroupSync,"ax",%progbits
  77              		.align	1
  78              		.global	xEventGroupSync
  79              		.syntax unified
  80              		.thumb
  81              		.thumb_func
  82              		.fpu fpv4-sp-d16
  84              	xEventGroupSync:
  85              	.LFB6:
ARM GAS  /tmp/ccLpvFJA.s 			page 6


 204:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 206:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 207:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 208:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 209:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
  86              		.loc 1 209 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 48
  89              		@ frame_needed = 1, uses_anonymous_args = 0
  90 0000 80B5     		push	{r7, lr}
  91              	.LCFI5:
  92              		.cfi_def_cfa_offset 8
  93              		.cfi_offset 7, -8
  94              		.cfi_offset 14, -4
  95 0002 8CB0     		sub	sp, sp, #48
  96              	.LCFI6:
  97              		.cfi_def_cfa_offset 56
  98 0004 00AF     		add	r7, sp, #0
  99              	.LCFI7:
 100              		.cfi_def_cfa_register 7
 101 0006 F860     		str	r0, [r7, #12]
 102 0008 B960     		str	r1, [r7, #8]
 103 000a 7A60     		str	r2, [r7, #4]
 104 000c 3B60     		str	r3, [r7]
 210:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 211:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 105              		.loc 1 211 0
 106 000e FB68     		ldr	r3, [r7, #12]
 107 0010 BB62     		str	r3, [r7, #40]
 212:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xAlreadyYielded;
 213:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 108              		.loc 1 213 0
 109 0012 0023     		movs	r3, #0
 110 0014 7B62     		str	r3, [r7, #36]
 214:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 215:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 111              		.loc 1 215 0
 112 0016 7B68     		ldr	r3, [r7, #4]
 113 0018 03F07F43 		and	r3, r3, #-16777216
 114 001c 002B     		cmp	r3, #0
 115 001e 09D0     		beq	.L5
 116              	.LBB31:
 117              	.LBB32:
 118              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccLpvFJA.s 			page 7


  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccLpvFJA.s 			page 8


  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
ARM GAS  /tmp/ccLpvFJA.s 			page 9


 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
ARM GAS  /tmp/ccLpvFJA.s 			page 10


 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 119              		.loc 2 237 0 discriminator 1
 120              		.syntax unified
 121              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/ccLpvFJA.s 			page 11


 122 0020 4FF05003 			mov r3, #80												
 123 0024 83F31188 		msr basepri, r3											
 124 0028 BFF36F8F 		isb														
 125 002c BFF34F8F 		dsb														
 126              	
 127              	@ 0 "" 2
 128              		.thumb
 129              		.syntax unified
 130 0030 BB61     		str	r3, [r7, #24]
 131              	.L6:
 132              	.LBE32:
 133              	.LBE31:
 134              		.loc 1 215 0 discriminator 1
 135 0032 FEE7     		b	.L6
 136              	.L5:
 216:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 137              		.loc 1 216 0
 138 0034 7B68     		ldr	r3, [r7, #4]
 139 0036 002B     		cmp	r3, #0
 140 0038 09D1     		bne	.L7
 141              	.LBB33:
 142              	.LBB34:
 143              		.loc 2 237 0 discriminator 1
 144              		.syntax unified
 145              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 146 003a 4FF05003 			mov r3, #80												
 147 003e 83F31188 		msr basepri, r3											
 148 0042 BFF36F8F 		isb														
 149 0046 BFF34F8F 		dsb														
 150              	
 151              	@ 0 "" 2
 152              		.thumb
 153              		.syntax unified
 154 004a 7B61     		str	r3, [r7, #20]
 155              	.L8:
 156              	.LBE34:
 157              	.LBE33:
 158              		.loc 1 216 0 discriminator 2
 159 004c FEE7     		b	.L8
 160              	.L7:
 217:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 218:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 161              		.loc 1 219 0
 162 004e FFF7FEFF 		bl	xTaskGetSchedulerState
 163 0052 0346     		mov	r3, r0
 164 0054 002B     		cmp	r3, #0
 165 0056 02D1     		bne	.L9
 166              		.loc 1 219 0 is_stmt 0 discriminator 2
 167 0058 3B68     		ldr	r3, [r7]
 168 005a 002B     		cmp	r3, #0
 169 005c 01D1     		bne	.L10
 170              	.L9:
 171              		.loc 1 219 0 discriminator 3
 172 005e 0123     		movs	r3, #1
 173 0060 00E0     		b	.L11
 174              	.L10:
ARM GAS  /tmp/ccLpvFJA.s 			page 12


 175              		.loc 1 219 0 discriminator 4
 176 0062 0023     		movs	r3, #0
 177              	.L11:
 178              		.loc 1 219 0 discriminator 6
 179 0064 002B     		cmp	r3, #0
 180 0066 09D1     		bne	.L12
 181              	.LBB35:
 182              	.LBB36:
 183              		.loc 2 237 0 is_stmt 1 discriminator 7
 184              		.syntax unified
 185              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 186 0068 4FF05003 			mov r3, #80												
 187 006c 83F31188 		msr basepri, r3											
 188 0070 BFF36F8F 		isb														
 189 0074 BFF34F8F 		dsb														
 190              	
 191              	@ 0 "" 2
 192              		.thumb
 193              		.syntax unified
 194 0078 3B61     		str	r3, [r7, #16]
 195              	.L13:
 196              	.LBE36:
 197              	.LBE35:
 198              		.loc 1 219 0 discriminator 3
 199 007a FEE7     		b	.L13
 200              	.L12:
 220:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 221:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 222:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 223:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 201              		.loc 1 223 0
 202 007c FFF7FEFF 		bl	vTaskSuspendAll
 224:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
 203              		.loc 1 225 0
 204 0080 BB6A     		ldr	r3, [r7, #40]
 205 0082 1B68     		ldr	r3, [r3]
 206 0084 3B62     		str	r3, [r7, #32]
 226:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 207              		.loc 1 227 0
 208 0086 B968     		ldr	r1, [r7, #8]
 209 0088 F868     		ldr	r0, [r7, #12]
 210 008a FFF7FEFF 		bl	xEventGroupSetBits
 228:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 229:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 211              		.loc 1 229 0
 212 008e 3A6A     		ldr	r2, [r7, #32]
 213 0090 BB68     		ldr	r3, [r7, #8]
 214 0092 1A43     		orrs	r2, r2, r3
 215 0094 7B68     		ldr	r3, [r7, #4]
 216 0096 1A40     		ands	r2, r2, r3
 217 0098 7B68     		ldr	r3, [r7, #4]
 218 009a 9A42     		cmp	r2, r3
 219 009c 0DD1     		bne	.L14
 230:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 231:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
ARM GAS  /tmp/ccLpvFJA.s 			page 13


 232:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 220              		.loc 1 232 0
 221 009e 3A6A     		ldr	r2, [r7, #32]
 222 00a0 BB68     		ldr	r3, [r7, #8]
 223 00a2 1343     		orrs	r3, r3, r2
 224 00a4 FB62     		str	r3, [r7, #44]
 233:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 234:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 235:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			already unless this is the only task in the rendezvous. */
 236:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 225              		.loc 1 236 0
 226 00a6 BB6A     		ldr	r3, [r7, #40]
 227 00a8 1A68     		ldr	r2, [r3]
 228 00aa 7B68     		ldr	r3, [r7, #4]
 229 00ac DB43     		mvns	r3, r3
 230 00ae 1A40     		ands	r2, r2, r3
 231 00b0 BB6A     		ldr	r3, [r7, #40]
 232 00b2 1A60     		str	r2, [r3]
 237:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 238:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = 0;
 233              		.loc 1 238 0
 234 00b4 0023     		movs	r3, #0
 235 00b6 3B60     		str	r3, [r7]
 236 00b8 11E0     		b	.L15
 237              	.L14:
 239:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 240:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 241:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 242:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 238              		.loc 1 242 0
 239 00ba 3B68     		ldr	r3, [r7]
 240 00bc 002B     		cmp	r3, #0
 241 00be 0BD0     		beq	.L16
 243:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 244:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 245:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 246:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 247:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task's event list item so the kernel knows when a match is
 248:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				found.  Then enter the blocked state. */
 249:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 242              		.loc 1 249 0
 243 00c0 BB6A     		ldr	r3, [r7, #40]
 244 00c2 181D     		adds	r0, r3, #4
 245 00c4 7B68     		ldr	r3, [r7, #4]
 246 00c6 43F0A063 		orr	r3, r3, #83886080
 247 00ca 3A68     		ldr	r2, [r7]
 248 00cc 1946     		mov	r1, r3
 249 00ce FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 250:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 251:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 252:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 253:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				warning about uxReturn being returned without being set if the
 254:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				assignment is omitted. */
 255:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = 0;
 250              		.loc 1 255 0
 251 00d2 0023     		movs	r3, #0
 252 00d4 FB62     		str	r3, [r7, #44]
ARM GAS  /tmp/ccLpvFJA.s 			page 14


 253 00d6 02E0     		b	.L15
 254              	.L16:
 256:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 257:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 258:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 259:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
 260:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				specified - just return the current event bit value. */
 261:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 255              		.loc 1 261 0
 256 00d8 BB6A     		ldr	r3, [r7, #40]
 257 00da 1B68     		ldr	r3, [r3]
 258 00dc FB62     		str	r3, [r7, #44]
 259              	.L15:
 262:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 263:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 264:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 265:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 260              		.loc 1 265 0
 261 00de FFF7FEFF 		bl	xTaskResumeAll
 262 00e2 F861     		str	r0, [r7, #28]
 266:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 267:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 263              		.loc 1 267 0
 264 00e4 3B68     		ldr	r3, [r7]
 265 00e6 002B     		cmp	r3, #0
 266 00e8 2CD0     		beq	.L17
 268:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 269:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 267              		.loc 1 269 0
 268 00ea FB69     		ldr	r3, [r7, #28]
 269 00ec 002B     		cmp	r3, #0
 270 00ee 07D1     		bne	.L18
 270:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 271:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 271              		.loc 1 271 0
 272 00f0 174B     		ldr	r3, .L22
 273 00f2 4FF08052 		mov	r2, #268435456
 274 00f6 1A60     		str	r2, [r3]
 275              		.syntax unified
 276              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 277 00f8 BFF34F8F 		dsb
 278              	@ 0 "" 2
 279              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 280 00fc BFF36F8F 		isb
 281              	@ 0 "" 2
 282              		.thumb
 283              		.syntax unified
 284              	.L18:
 272:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 273:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 274:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 275:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 276:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 277:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 278:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 279:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 280:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
ARM GAS  /tmp/ccLpvFJA.s 			page 15


 281:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 282:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 285              		.loc 1 282 0
 286 0100 FFF7FEFF 		bl	uxTaskResetEventItemValue
 287 0104 F862     		str	r0, [r7, #44]
 283:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 288              		.loc 1 284 0
 289 0106 FB6A     		ldr	r3, [r7, #44]
 290 0108 03F00073 		and	r3, r3, #33554432
 291 010c 002B     		cmp	r3, #0
 292 010e 15D1     		bne	.L19
 285:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 286:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 287:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 293              		.loc 1 287 0
 294 0110 FFF7FEFF 		bl	vPortEnterCritical
 288:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 289:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 295              		.loc 1 289 0
 296 0114 BB6A     		ldr	r3, [r7, #40]
 297 0116 1B68     		ldr	r3, [r3]
 298 0118 FB62     		str	r3, [r7, #44]
 290:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 291:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Although the task got here because it timed out before the
 292:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 293:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
 294:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				then it needs to clear the bits before exiting. */
 295:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 299              		.loc 1 295 0
 300 011a FA6A     		ldr	r2, [r7, #44]
 301 011c 7B68     		ldr	r3, [r7, #4]
 302 011e 1A40     		ands	r2, r2, r3
 303 0120 7B68     		ldr	r3, [r7, #4]
 304 0122 9A42     		cmp	r2, r3
 305 0124 06D1     		bne	.L20
 296:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 297:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 306              		.loc 1 297 0
 307 0126 BB6A     		ldr	r3, [r7, #40]
 308 0128 1A68     		ldr	r2, [r3]
 309 012a 7B68     		ldr	r3, [r7, #4]
 310 012c DB43     		mvns	r3, r3
 311 012e 1A40     		ands	r2, r2, r3
 312 0130 BB6A     		ldr	r3, [r7, #40]
 313 0132 1A60     		str	r2, [r3]
 314              	.L20:
 298:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 299:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 300:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 301:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 302:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 303:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 304:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 315              		.loc 1 304 0
 316 0134 FFF7FEFF 		bl	vPortExitCritical
 305:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccLpvFJA.s 			page 16


 306:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 317              		.loc 1 306 0
 318 0138 0123     		movs	r3, #1
 319 013a 7B62     		str	r3, [r7, #36]
 320              	.L19:
 307:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 308:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 309:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 311:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 312:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 313:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 314:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		returned. */
 315:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 321              		.loc 1 315 0
 322 013c FB6A     		ldr	r3, [r7, #44]
 323 013e 23F07F43 		bic	r3, r3, #-16777216
 324 0142 FB62     		str	r3, [r7, #44]
 325              	.L17:
 316:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 317:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 318:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 319:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 320:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 326              		.loc 1 320 0
 327 0144 FB6A     		ldr	r3, [r7, #44]
 321:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 328              		.loc 1 321 0
 329 0146 1846     		mov	r0, r3
 330 0148 3037     		adds	r7, r7, #48
 331              	.LCFI8:
 332              		.cfi_def_cfa_offset 8
 333 014a BD46     		mov	sp, r7
 334              	.LCFI9:
 335              		.cfi_def_cfa_register 13
 336              		@ sp needed
 337 014c 80BD     		pop	{r7, pc}
 338              	.L23:
 339 014e 00BF     		.align	2
 340              	.L22:
 341 0150 04ED00E0 		.word	-536810236
 342              		.cfi_endproc
 343              	.LFE6:
 345              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 346              		.align	1
 347              		.global	xEventGroupWaitBits
 348              		.syntax unified
 349              		.thumb
 350              		.thumb_func
 351              		.fpu fpv4-sp-d16
 353              	xEventGroupWaitBits:
 354              	.LFB7:
 322:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 323:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 324:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 325:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 355              		.loc 1 325 0
ARM GAS  /tmp/ccLpvFJA.s 			page 17


 356              		.cfi_startproc
 357              		@ args = 4, pretend = 0, frame = 64
 358              		@ frame_needed = 1, uses_anonymous_args = 0
 359 0000 80B5     		push	{r7, lr}
 360              	.LCFI10:
 361              		.cfi_def_cfa_offset 8
 362              		.cfi_offset 7, -8
 363              		.cfi_offset 14, -4
 364 0002 90B0     		sub	sp, sp, #64
 365              	.LCFI11:
 366              		.cfi_def_cfa_offset 72
 367 0004 00AF     		add	r7, sp, #0
 368              	.LCFI12:
 369              		.cfi_def_cfa_register 7
 370 0006 F860     		str	r0, [r7, #12]
 371 0008 B960     		str	r1, [r7, #8]
 372 000a 7A60     		str	r2, [r7, #4]
 373 000c 3B60     		str	r3, [r7]
 326:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 374              		.loc 1 326 0
 375 000e FB68     		ldr	r3, [r7, #12]
 376 0010 7B63     		str	r3, [r7, #52]
 327:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 377              		.loc 1 327 0
 378 0012 0023     		movs	r3, #0
 379 0014 BB63     		str	r3, [r7, #56]
 328:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 329:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 380              		.loc 1 329 0
 381 0016 0023     		movs	r3, #0
 382 0018 3B63     		str	r3, [r7, #48]
 330:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 331:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 332:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself, and that at least one bit is being requested. */
 333:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 383              		.loc 1 333 0
 384 001a FB68     		ldr	r3, [r7, #12]
 385 001c 002B     		cmp	r3, #0
 386 001e 09D1     		bne	.L25
 387              	.LBB37:
 388              	.LBB38:
 389              		.loc 2 237 0 discriminator 1
 390              		.syntax unified
 391              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 392 0020 4FF05003 			mov r3, #80												
 393 0024 83F31188 		msr basepri, r3											
 394 0028 BFF36F8F 		isb														
 395 002c BFF34F8F 		dsb														
 396              	
 397              	@ 0 "" 2
 398              		.thumb
 399              		.syntax unified
 400 0030 3B62     		str	r3, [r7, #32]
 401              	.L26:
 402              	.LBE38:
 403              	.LBE37:
 404              		.loc 1 333 0 discriminator 1
ARM GAS  /tmp/ccLpvFJA.s 			page 18


 405 0032 FEE7     		b	.L26
 406              	.L25:
 334:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 407              		.loc 1 334 0
 408 0034 BB68     		ldr	r3, [r7, #8]
 409 0036 03F07F43 		and	r3, r3, #-16777216
 410 003a 002B     		cmp	r3, #0
 411 003c 09D0     		beq	.L27
 412              	.LBB39:
 413              	.LBB40:
 414              		.loc 2 237 0 discriminator 1
 415              		.syntax unified
 416              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 417 003e 4FF05003 			mov r3, #80												
 418 0042 83F31188 		msr basepri, r3											
 419 0046 BFF36F8F 		isb														
 420 004a BFF34F8F 		dsb														
 421              	
 422              	@ 0 "" 2
 423              		.thumb
 424              		.syntax unified
 425 004e FB61     		str	r3, [r7, #28]
 426              	.L28:
 427              	.LBE40:
 428              	.LBE39:
 429              		.loc 1 334 0 discriminator 2
 430 0050 FEE7     		b	.L28
 431              	.L27:
 335:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 432              		.loc 1 335 0
 433 0052 BB68     		ldr	r3, [r7, #8]
 434 0054 002B     		cmp	r3, #0
 435 0056 09D1     		bne	.L29
 436              	.LBB41:
 437              	.LBB42:
 438              		.loc 2 237 0 discriminator 1
 439              		.syntax unified
 440              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 441 0058 4FF05003 			mov r3, #80												
 442 005c 83F31188 		msr basepri, r3											
 443 0060 BFF36F8F 		isb														
 444 0064 BFF34F8F 		dsb														
 445              	
 446              	@ 0 "" 2
 447              		.thumb
 448              		.syntax unified
 449 0068 BB61     		str	r3, [r7, #24]
 450              	.L30:
 451              	.LBE42:
 452              	.LBE41:
 453              		.loc 1 335 0 discriminator 3
 454 006a FEE7     		b	.L30
 455              	.L29:
 336:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 337:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 456              		.loc 1 338 0
ARM GAS  /tmp/ccLpvFJA.s 			page 19


 457 006c FFF7FEFF 		bl	xTaskGetSchedulerState
 458 0070 0346     		mov	r3, r0
 459 0072 002B     		cmp	r3, #0
 460 0074 02D1     		bne	.L31
 461              		.loc 1 338 0 is_stmt 0 discriminator 2
 462 0076 BB6C     		ldr	r3, [r7, #72]
 463 0078 002B     		cmp	r3, #0
 464 007a 01D1     		bne	.L32
 465              	.L31:
 466              		.loc 1 338 0 discriminator 3
 467 007c 0123     		movs	r3, #1
 468 007e 00E0     		b	.L33
 469              	.L32:
 470              		.loc 1 338 0 discriminator 4
 471 0080 0023     		movs	r3, #0
 472              	.L33:
 473              		.loc 1 338 0 discriminator 6
 474 0082 002B     		cmp	r3, #0
 475 0084 09D1     		bne	.L34
 476              	.LBB43:
 477              	.LBB44:
 478              		.loc 2 237 0 is_stmt 1 discriminator 7
 479              		.syntax unified
 480              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 481 0086 4FF05003 			mov r3, #80												
 482 008a 83F31188 		msr basepri, r3											
 483 008e BFF36F8F 		isb														
 484 0092 BFF34F8F 		dsb														
 485              	
 486              	@ 0 "" 2
 487              		.thumb
 488              		.syntax unified
 489 0096 7B61     		str	r3, [r7, #20]
 490              	.L35:
 491              	.LBE44:
 492              	.LBE43:
 493              		.loc 1 338 0 discriminator 4
 494 0098 FEE7     		b	.L35
 495              	.L34:
 339:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 340:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 341:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 342:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 496              		.loc 1 342 0
 497 009a FFF7FEFF 		bl	vTaskSuspendAll
 498              	.LBB45:
 343:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 344:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 499              		.loc 1 344 0
 500 009e 7B6B     		ldr	r3, [r7, #52]
 501 00a0 1B68     		ldr	r3, [r3]
 502 00a2 FB62     		str	r3, [r7, #44]
 345:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 346:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 347:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 503              		.loc 1 347 0
 504 00a4 3A68     		ldr	r2, [r7]
ARM GAS  /tmp/ccLpvFJA.s 			page 20


 505 00a6 B968     		ldr	r1, [r7, #8]
 506 00a8 F86A     		ldr	r0, [r7, #44]
 507 00aa FFF7FEFF 		bl	prvTestWaitCondition
 508 00ae B862     		str	r0, [r7, #40]
 348:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 349:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 509              		.loc 1 349 0
 510 00b0 BB6A     		ldr	r3, [r7, #40]
 511 00b2 002B     		cmp	r3, #0
 512 00b4 0ED0     		beq	.L36
 350:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 351:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 352:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			block. */
 353:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 513              		.loc 1 353 0
 514 00b6 FB6A     		ldr	r3, [r7, #44]
 515 00b8 FB63     		str	r3, [r7, #60]
 354:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 516              		.loc 1 354 0
 517 00ba 0023     		movs	r3, #0
 518 00bc BB64     		str	r3, [r7, #72]
 355:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 356:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 357:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 519              		.loc 1 357 0
 520 00be 7B68     		ldr	r3, [r7, #4]
 521 00c0 002B     		cmp	r3, #0
 522 00c2 26D0     		beq	.L37
 358:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 359:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 523              		.loc 1 359 0
 524 00c4 7B6B     		ldr	r3, [r7, #52]
 525 00c6 1A68     		ldr	r2, [r3]
 526 00c8 BB68     		ldr	r3, [r7, #8]
 527 00ca DB43     		mvns	r3, r3
 528 00cc 1A40     		ands	r2, r2, r3
 529 00ce 7B6B     		ldr	r3, [r7, #52]
 530 00d0 1A60     		str	r2, [r3]
 531 00d2 1EE0     		b	.L37
 532              	.L36:
 360:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 361:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 362:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 363:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 364:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 365:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 366:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 533              		.loc 1 366 0
 534 00d4 BB6C     		ldr	r3, [r7, #72]
 535 00d6 002B     		cmp	r3, #0
 536 00d8 02D1     		bne	.L38
 367:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 368:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has not been met, but no block time was
 369:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			specified, so just return the current value. */
 370:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 537              		.loc 1 370 0
 538 00da FB6A     		ldr	r3, [r7, #44]
ARM GAS  /tmp/ccLpvFJA.s 			page 21


 539 00dc FB63     		str	r3, [r7, #60]
 540 00de 18E0     		b	.L37
 541              	.L38:
 371:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 372:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 373:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 374:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
 375:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
 376:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
 377:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			unblock the task. */
 378:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 542              		.loc 1 378 0
 543 00e0 7B68     		ldr	r3, [r7, #4]
 544 00e2 002B     		cmp	r3, #0
 545 00e4 03D0     		beq	.L39
 379:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 380:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 546              		.loc 1 380 0
 547 00e6 BB6B     		ldr	r3, [r7, #56]
 548 00e8 43F08073 		orr	r3, r3, #16777216
 549 00ec BB63     		str	r3, [r7, #56]
 550              	.L39:
 381:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 382:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 383:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 384:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 385:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 386:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 387:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 551              		.loc 1 387 0
 552 00ee 3B68     		ldr	r3, [r7]
 553 00f0 002B     		cmp	r3, #0
 554 00f2 03D0     		beq	.L40
 388:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 389:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 555              		.loc 1 389 0
 556 00f4 BB6B     		ldr	r3, [r7, #56]
 557 00f6 43F08063 		orr	r3, r3, #67108864
 558 00fa BB63     		str	r3, [r7, #56]
 559              	.L40:
 390:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 391:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 392:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 393:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 394:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 395:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 396:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 397:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			task's event list item so the kernel knows when a match is
 398:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			found.  Then enter the blocked state. */
 399:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 560              		.loc 1 399 0
 561 00fc 7B6B     		ldr	r3, [r7, #52]
 562 00fe 181D     		adds	r0, r3, #4
 563 0100 BA68     		ldr	r2, [r7, #8]
 564 0102 BB6B     		ldr	r3, [r7, #56]
 565 0104 1343     		orrs	r3, r3, r2
 566 0106 BA6C     		ldr	r2, [r7, #72]
ARM GAS  /tmp/ccLpvFJA.s 			page 22


 567 0108 1946     		mov	r1, r3
 568 010a FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 400:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 401:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
 402:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 403:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			being returned without being set if it is not done. */
 404:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = 0;
 569              		.loc 1 404 0
 570 010e 0023     		movs	r3, #0
 571 0110 FB63     		str	r3, [r7, #60]
 572              	.L37:
 573              	.LBE45:
 405:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 406:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 407:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 408:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 409:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 574              		.loc 1 409 0
 575 0112 FFF7FEFF 		bl	xTaskResumeAll
 576 0116 7862     		str	r0, [r7, #36]
 410:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 411:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 577              		.loc 1 411 0
 578 0118 BB6C     		ldr	r3, [r7, #72]
 579 011a 002B     		cmp	r3, #0
 580 011c 31D0     		beq	.L41
 412:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 413:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 581              		.loc 1 413 0
 582 011e 7B6A     		ldr	r3, [r7, #36]
 583 0120 002B     		cmp	r3, #0
 584 0122 07D1     		bne	.L42
 414:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 415:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 585              		.loc 1 415 0
 586 0124 194B     		ldr	r3, .L46
 587 0126 4FF08052 		mov	r2, #268435456
 588 012a 1A60     		str	r2, [r3]
 589              		.syntax unified
 590              	@ 415 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 591 012c BFF34F8F 		dsb
 592              	@ 0 "" 2
 593              	@ 415 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 594 0130 BFF36F8F 		isb
 595              	@ 0 "" 2
 596              		.thumb
 597              		.syntax unified
 598              	.L42:
 416:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 417:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 418:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 419:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 420:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 421:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 423:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 424:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
ARM GAS  /tmp/ccLpvFJA.s 			page 23


 425:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 426:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 599              		.loc 1 426 0
 600 0134 FFF7FEFF 		bl	uxTaskResetEventItemValue
 601 0138 F863     		str	r0, [r7, #60]
 427:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 602              		.loc 1 428 0
 603 013a FB6B     		ldr	r3, [r7, #60]
 604 013c 03F00073 		and	r3, r3, #33554432
 605 0140 002B     		cmp	r3, #0
 606 0142 1AD1     		bne	.L43
 429:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 430:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 607              		.loc 1 430 0
 608 0144 FFF7FEFF 		bl	vPortEnterCritical
 431:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 432:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
 433:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 609              		.loc 1 433 0
 610 0148 7B6B     		ldr	r3, [r7, #52]
 611 014a 1B68     		ldr	r3, [r3]
 612 014c FB63     		str	r3, [r7, #60]
 434:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 435:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* It is possible that the event bits were updated between this
 436:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task leaving the Blocked state and running again. */
 437:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 613              		.loc 1 437 0
 614 014e 3A68     		ldr	r2, [r7]
 615 0150 B968     		ldr	r1, [r7, #8]
 616 0152 F86B     		ldr	r0, [r7, #60]
 617 0154 FFF7FEFF 		bl	prvTestWaitCondition
 618 0158 0346     		mov	r3, r0
 619 015a 002B     		cmp	r3, #0
 620 015c 09D0     		beq	.L44
 438:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 439:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 621              		.loc 1 439 0
 622 015e 7B68     		ldr	r3, [r7, #4]
 623 0160 002B     		cmp	r3, #0
 624 0162 06D0     		beq	.L44
 440:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 441:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 625              		.loc 1 441 0
 626 0164 7B6B     		ldr	r3, [r7, #52]
 627 0166 1A68     		ldr	r2, [r3]
 628 0168 BB68     		ldr	r3, [r7, #8]
 629 016a DB43     		mvns	r3, r3
 630 016c 1A40     		ands	r2, r2, r3
 631 016e 7B6B     		ldr	r3, [r7, #52]
 632 0170 1A60     		str	r2, [r3]
 633              	.L44:
 442:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 443:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					else
 444:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 445:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 446:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
ARM GAS  /tmp/ccLpvFJA.s 			page 24


 447:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 448:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 449:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 450:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 451:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 452:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 453:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 634              		.loc 1 453 0
 635 0172 FFF7FEFF 		bl	vPortExitCritical
 454:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Prevent compiler warnings when trace macros are not used. */
 456:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdFALSE;
 636              		.loc 1 456 0
 637 0176 0023     		movs	r3, #0
 638 0178 3B63     		str	r3, [r7, #48]
 639              	.L43:
 457:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 458:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 459:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 460:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 461:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 462:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 463:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 464:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 640              		.loc 1 464 0
 641 017a FB6B     		ldr	r3, [r7, #60]
 642 017c 23F07F43 		bic	r3, r3, #-16777216
 643 0180 FB63     		str	r3, [r7, #60]
 644              	.L41:
 465:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 466:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 467:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 645              		.loc 1 468 0
 646 0182 FB6B     		ldr	r3, [r7, #60]
 469:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 647              		.loc 1 469 0
 648 0184 1846     		mov	r0, r3
 649 0186 4037     		adds	r7, r7, #64
 650              	.LCFI13:
 651              		.cfi_def_cfa_offset 8
 652 0188 BD46     		mov	sp, r7
 653              	.LCFI14:
 654              		.cfi_def_cfa_register 13
 655              		@ sp needed
 656 018a 80BD     		pop	{r7, pc}
 657              	.L47:
 658              		.align	2
 659              	.L46:
 660 018c 04ED00E0 		.word	-536810236
 661              		.cfi_endproc
 662              	.LFE7:
 664              		.section	.text.xEventGroupClearBits,"ax",%progbits
 665              		.align	1
 666              		.global	xEventGroupClearBits
 667              		.syntax unified
 668              		.thumb
ARM GAS  /tmp/ccLpvFJA.s 			page 25


 669              		.thumb_func
 670              		.fpu fpv4-sp-d16
 672              	xEventGroupClearBits:
 673              	.LFB8:
 470:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 471:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 472:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 473:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 674              		.loc 1 473 0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 24
 677              		@ frame_needed = 1, uses_anonymous_args = 0
 678 0000 80B5     		push	{r7, lr}
 679              	.LCFI15:
 680              		.cfi_def_cfa_offset 8
 681              		.cfi_offset 7, -8
 682              		.cfi_offset 14, -4
 683 0002 86B0     		sub	sp, sp, #24
 684              	.LCFI16:
 685              		.cfi_def_cfa_offset 32
 686 0004 00AF     		add	r7, sp, #0
 687              	.LCFI17:
 688              		.cfi_def_cfa_register 7
 689 0006 7860     		str	r0, [r7, #4]
 690 0008 3960     		str	r1, [r7]
 474:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 691              		.loc 1 474 0
 692 000a 7B68     		ldr	r3, [r7, #4]
 693 000c 7B61     		str	r3, [r7, #20]
 475:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 476:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 477:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 478:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 479:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 694              		.loc 1 479 0
 695 000e 7B68     		ldr	r3, [r7, #4]
 696 0010 002B     		cmp	r3, #0
 697 0012 09D1     		bne	.L49
 698              	.LBB46:
 699              	.LBB47:
 700              		.loc 2 237 0 discriminator 1
 701              		.syntax unified
 702              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 703 0014 4FF05003 			mov r3, #80												
 704 0018 83F31188 		msr basepri, r3											
 705 001c BFF36F8F 		isb														
 706 0020 BFF34F8F 		dsb														
 707              	
 708              	@ 0 "" 2
 709              		.thumb
 710              		.syntax unified
 711 0024 FB60     		str	r3, [r7, #12]
 712              	.L50:
 713              	.LBE47:
 714              	.LBE46:
 715              		.loc 1 479 0 discriminator 1
 716 0026 FEE7     		b	.L50
ARM GAS  /tmp/ccLpvFJA.s 			page 26


 717              	.L49:
 480:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 718              		.loc 1 480 0
 719 0028 3B68     		ldr	r3, [r7]
 720 002a 03F07F43 		and	r3, r3, #-16777216
 721 002e 002B     		cmp	r3, #0
 722 0030 09D0     		beq	.L51
 723              	.LBB48:
 724              	.LBB49:
 725              		.loc 2 237 0 discriminator 1
 726              		.syntax unified
 727              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 728 0032 4FF05003 			mov r3, #80												
 729 0036 83F31188 		msr basepri, r3											
 730 003a BFF36F8F 		isb														
 731 003e BFF34F8F 		dsb														
 732              	
 733              	@ 0 "" 2
 734              		.thumb
 735              		.syntax unified
 736 0042 BB60     		str	r3, [r7, #8]
 737              	.L52:
 738              	.LBE49:
 739              	.LBE48:
 740              		.loc 1 480 0 discriminator 2
 741 0044 FEE7     		b	.L52
 742              	.L51:
 481:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskENTER_CRITICAL();
 743              		.loc 1 482 0
 744 0046 FFF7FEFF 		bl	vPortEnterCritical
 483:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 484:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 485:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 486:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
 487:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		cleared. */
 488:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 745              		.loc 1 488 0
 746 004a 7B69     		ldr	r3, [r7, #20]
 747 004c 1B68     		ldr	r3, [r3]
 748 004e 3B61     		str	r3, [r7, #16]
 489:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear the bits. */
 491:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 749              		.loc 1 491 0
 750 0050 7B69     		ldr	r3, [r7, #20]
 751 0052 1A68     		ldr	r2, [r3]
 752 0054 3B68     		ldr	r3, [r7]
 753 0056 DB43     		mvns	r3, r3
 754 0058 1A40     		ands	r2, r2, r3
 755 005a 7B69     		ldr	r3, [r7, #20]
 756 005c 1A60     		str	r2, [r3]
 492:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 493:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskEXIT_CRITICAL();
 757              		.loc 1 493 0
 758 005e FFF7FEFF 		bl	vPortExitCritical
 494:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccLpvFJA.s 			page 27


 495:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 759              		.loc 1 495 0
 760 0062 3B69     		ldr	r3, [r7, #16]
 496:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 761              		.loc 1 496 0
 762 0064 1846     		mov	r0, r3
 763 0066 1837     		adds	r7, r7, #24
 764              	.LCFI18:
 765              		.cfi_def_cfa_offset 8
 766 0068 BD46     		mov	sp, r7
 767              	.LCFI19:
 768              		.cfi_def_cfa_register 13
 769              		@ sp needed
 770 006a 80BD     		pop	{r7, pc}
 771              		.cfi_endproc
 772              	.LFE8:
 774              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 775              		.align	1
 776              		.global	xEventGroupGetBitsFromISR
 777              		.syntax unified
 778              		.thumb
 779              		.thumb_func
 780              		.fpu fpv4-sp-d16
 782              	xEventGroupGetBitsFromISR:
 783              	.LFB9:
 497:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 498:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 499:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 500:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 502:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 503:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 504:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 506:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 507:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 508:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 509:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 510:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 512:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 513:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 515:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 784              		.loc 1 515 0
 785              		.cfi_startproc
 786              		@ args = 0, pretend = 0, frame = 32
 787              		@ frame_needed = 1, uses_anonymous_args = 0
 788              		@ link register save eliminated.
 789 0000 80B4     		push	{r7}
 790              	.LCFI20:
 791              		.cfi_def_cfa_offset 4
 792              		.cfi_offset 7, -4
 793 0002 89B0     		sub	sp, sp, #36
 794              	.LCFI21:
 795              		.cfi_def_cfa_offset 40
 796 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccLpvFJA.s 			page 28


 797              	.LCFI22:
 798              		.cfi_def_cfa_register 7
 799 0006 7860     		str	r0, [r7, #4]
 516:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 517:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800              		.loc 1 517 0
 801 0008 7B68     		ldr	r3, [r7, #4]
 802 000a FB61     		str	r3, [r7, #28]
 803              	.LBB50:
 804              	.LBB51:
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 805              		.loc 2 253 0
 806              		.syntax unified
 807              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 808 000c EFF31182 			mrs r2, basepri											
 809 0010 4FF05003 		mov r3, #80												
 810 0014 83F31188 		msr basepri, r3											
 811 0018 BFF36F8F 		isb														
 812 001c BFF34F8F 		dsb														
 813              	
 814              	@ 0 "" 2
 815              		.thumb
 816              		.syntax unified
 817 0020 FA60     		str	r2, [r7, #12]
 818 0022 BB60     		str	r3, [r7, #8]
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 819              		.loc 2 265 0
 820 0024 FB68     		ldr	r3, [r7, #12]
 821              	.LBE51:
 822              	.LBE50:
 518:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
ARM GAS  /tmp/ccLpvFJA.s 			page 29


 519:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 520:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 823              		.loc 1 520 0
 824 0026 BB61     		str	r3, [r7, #24]
 521:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 522:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 825              		.loc 1 522 0
 826 0028 FB69     		ldr	r3, [r7, #28]
 827 002a 1B68     		ldr	r3, [r3]
 828 002c 7B61     		str	r3, [r7, #20]
 829 002e BB69     		ldr	r3, [r7, #24]
 830 0030 3B61     		str	r3, [r7, #16]
 831              	.LBB52:
 832              	.LBB53:
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 833              		.loc 2 271 0
 834 0032 3B69     		ldr	r3, [r7, #16]
 835              		.syntax unified
 836              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 837 0034 83F31188 			msr basepri, r3	
 838              	@ 0 "" 2
 839              		.thumb
 840              		.syntax unified
 841              	.LBE53:
 842              	.LBE52:
 523:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 524:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 525:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 526:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 843              		.loc 1 526 0
 844 0038 7B69     		ldr	r3, [r7, #20]
 527:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 845              		.loc 1 527 0
 846 003a 1846     		mov	r0, r3
 847 003c 2437     		adds	r7, r7, #36
 848              	.LCFI23:
 849              		.cfi_def_cfa_offset 4
 850 003e BD46     		mov	sp, r7
 851              	.LCFI24:
 852              		.cfi_def_cfa_register 13
 853              		@ sp needed
 854 0040 5DF8047B 		ldr	r7, [sp], #4
 855              	.LCFI25:
 856              		.cfi_restore 7
 857              		.cfi_def_cfa_offset 0
 858 0044 7047     		bx	lr
 859              		.cfi_endproc
 860              	.LFE9:
 862              		.section	.text.xEventGroupSetBits,"ax",%progbits
 863              		.align	1
 864              		.global	xEventGroupSetBits
 865              		.syntax unified
ARM GAS  /tmp/ccLpvFJA.s 			page 30


 866              		.thumb
 867              		.thumb_func
 868              		.fpu fpv4-sp-d16
 870              	xEventGroupSetBits:
 871              	.LFB10:
 528:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 529:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 530:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 531:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 872              		.loc 1 531 0
 873              		.cfi_startproc
 874              		@ args = 0, pretend = 0, frame = 56
 875              		@ frame_needed = 1, uses_anonymous_args = 0
 876 0000 80B5     		push	{r7, lr}
 877              	.LCFI26:
 878              		.cfi_def_cfa_offset 8
 879              		.cfi_offset 7, -8
 880              		.cfi_offset 14, -4
 881 0002 8EB0     		sub	sp, sp, #56
 882              	.LCFI27:
 883              		.cfi_def_cfa_offset 64
 884 0004 00AF     		add	r7, sp, #0
 885              	.LCFI28:
 886              		.cfi_def_cfa_register 7
 887 0006 7860     		str	r0, [r7, #4]
 888 0008 3960     		str	r1, [r7]
 532:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 533:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t const *pxListEnd;
 534:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** List_t *pxList;
 535:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 889              		.loc 1 535 0
 890 000a 0023     		movs	r3, #0
 891 000c 3B63     		str	r3, [r7, #48]
 536:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 892              		.loc 1 536 0
 893 000e 7B68     		ldr	r3, [r7, #4]
 894 0010 BB62     		str	r3, [r7, #40]
 537:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 895              		.loc 1 537 0
 896 0012 0023     		movs	r3, #0
 897 0014 FB62     		str	r3, [r7, #44]
 538:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 540:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 541:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 898              		.loc 1 541 0
 899 0016 7B68     		ldr	r3, [r7, #4]
 900 0018 002B     		cmp	r3, #0
 901 001a 09D1     		bne	.L58
 902              	.LBB54:
 903              	.LBB55:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 904              		.loc 2 237 0 discriminator 1
 905              		.syntax unified
 906              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 907 001c 4FF05003 			mov r3, #80												
 908 0020 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccLpvFJA.s 			page 31


 909 0024 BFF36F8F 		isb														
 910 0028 BFF34F8F 		dsb														
 911              	
 912              	@ 0 "" 2
 913              		.thumb
 914              		.syntax unified
 915 002c 3B61     		str	r3, [r7, #16]
 916              	.L59:
 917              	.LBE55:
 918              	.LBE54:
 919              		.loc 1 541 0 discriminator 1
 920 002e FEE7     		b	.L59
 921              	.L58:
 542:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 922              		.loc 1 542 0
 923 0030 3B68     		ldr	r3, [r7]
 924 0032 03F07F43 		and	r3, r3, #-16777216
 925 0036 002B     		cmp	r3, #0
 926 0038 09D0     		beq	.L60
 927              	.LBB56:
 928              	.LBB57:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 929              		.loc 2 237 0 discriminator 1
 930              		.syntax unified
 931              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 932 003a 4FF05003 			mov r3, #80												
 933 003e 83F31188 		msr basepri, r3											
 934 0042 BFF36F8F 		isb														
 935 0046 BFF34F8F 		dsb														
 936              	
 937              	@ 0 "" 2
 938              		.thumb
 939              		.syntax unified
 940 004a FB60     		str	r3, [r7, #12]
 941              	.L61:
 942              	.LBE57:
 943              	.LBE56:
 944              		.loc 1 542 0 discriminator 2
 945 004c FEE7     		b	.L61
 946              	.L60:
 543:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 544:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
 947              		.loc 1 544 0
 948 004e BB6A     		ldr	r3, [r7, #40]
 949 0050 0433     		adds	r3, r3, #4
 950 0052 7B62     		str	r3, [r7, #36]
 545:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as th
 951              		.loc 1 545 0
 952 0054 7B6A     		ldr	r3, [r7, #36]
 953 0056 0833     		adds	r3, r3, #8
 954 0058 3B62     		str	r3, [r7, #32]
 546:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 955              		.loc 1 546 0
 956 005a FFF7FEFF 		bl	vTaskSuspendAll
 547:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 548:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 549:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccLpvFJA.s 			page 32


 550:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 957              		.loc 1 550 0
 958 005e 7B6A     		ldr	r3, [r7, #36]
 959 0060 DB68     		ldr	r3, [r3, #12]
 960 0062 7B63     		str	r3, [r7, #52]
 551:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 552:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Set the bits. */
 553:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
 961              		.loc 1 553 0
 962 0064 BB6A     		ldr	r3, [r7, #40]
 963 0066 1A68     		ldr	r2, [r3]
 964 0068 3B68     		ldr	r3, [r7]
 965 006a 1A43     		orrs	r2, r2, r3
 966 006c BB6A     		ldr	r3, [r7, #40]
 967 006e 1A60     		str	r2, [r3]
 554:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 555:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 556:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( pxListItem != pxListEnd )
 968              		.loc 1 556 0
 969 0070 3CE0     		b	.L62
 970              	.L67:
 557:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 558:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
 971              		.loc 1 558 0
 972 0072 7B6B     		ldr	r3, [r7, #52]
 973 0074 5B68     		ldr	r3, [r3, #4]
 974 0076 FB61     		str	r3, [r7, #28]
 559:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 975              		.loc 1 559 0
 976 0078 7B6B     		ldr	r3, [r7, #52]
 977 007a 1B68     		ldr	r3, [r3]
 978 007c BB61     		str	r3, [r7, #24]
 560:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 979              		.loc 1 560 0
 980 007e 0023     		movs	r3, #0
 981 0080 FB62     		str	r3, [r7, #44]
 561:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 562:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 563:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 982              		.loc 1 563 0
 983 0082 BB69     		ldr	r3, [r7, #24]
 984 0084 03F07F43 		and	r3, r3, #-16777216
 985 0088 7B61     		str	r3, [r7, #20]
 564:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 986              		.loc 1 564 0
 987 008a BB69     		ldr	r3, [r7, #24]
 988 008c 23F07F43 		bic	r3, r3, #-16777216
 989 0090 BB61     		str	r3, [r7, #24]
 565:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 990              		.loc 1 566 0
 991 0092 7B69     		ldr	r3, [r7, #20]
 992 0094 03F08063 		and	r3, r3, #67108864
 993 0098 002B     		cmp	r3, #0
 994 009a 08D1     		bne	.L63
 567:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 568:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Just looking for single bit being set. */
ARM GAS  /tmp/ccLpvFJA.s 			page 33


 569:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 995              		.loc 1 569 0
 996 009c BB6A     		ldr	r3, [r7, #40]
 997 009e 1A68     		ldr	r2, [r3]
 998 00a0 BB69     		ldr	r3, [r7, #24]
 999 00a2 1340     		ands	r3, r3, r2
 1000 00a4 002B     		cmp	r3, #0
 1001 00a6 0BD0     		beq	.L64
 570:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 571:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					xMatchFound = pdTRUE;
 1002              		.loc 1 571 0
 1003 00a8 0123     		movs	r3, #1
 1004 00aa FB62     		str	r3, [r7, #44]
 1005 00ac 08E0     		b	.L64
 1006              	.L63:
 572:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 573:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 574:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 575:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 576:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 577:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 578:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 1007              		.loc 1 578 0
 1008 00ae BB6A     		ldr	r3, [r7, #40]
 1009 00b0 1A68     		ldr	r2, [r3]
 1010 00b2 BB69     		ldr	r3, [r7, #24]
 1011 00b4 1A40     		ands	r2, r2, r3
 1012 00b6 BB69     		ldr	r3, [r7, #24]
 1013 00b8 9A42     		cmp	r2, r3
 1014 00ba 01D1     		bne	.L64
 579:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 580:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* All bits are set. */
 581:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xMatchFound = pdTRUE;
 1015              		.loc 1 581 0
 1016 00bc 0123     		movs	r3, #1
 1017 00be FB62     		str	r3, [r7, #44]
 1018              	.L64:
 582:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 583:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 584:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 585:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 586:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 587:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 588:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xMatchFound != pdFALSE )
 1019              		.loc 1 588 0
 1020 00c0 FB6A     		ldr	r3, [r7, #44]
 1021 00c2 002B     		cmp	r3, #0
 1022 00c4 10D0     		beq	.L65
 589:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 590:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 591:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 1023              		.loc 1 591 0
 1024 00c6 7B69     		ldr	r3, [r7, #20]
 1025 00c8 03F08073 		and	r3, r3, #16777216
 1026 00cc 002B     		cmp	r3, #0
 1027 00ce 03D0     		beq	.L66
 592:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
ARM GAS  /tmp/ccLpvFJA.s 			page 34


 593:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
 1028              		.loc 1 593 0
 1029 00d0 3A6B     		ldr	r2, [r7, #48]
 1030 00d2 BB69     		ldr	r3, [r7, #24]
 1031 00d4 1343     		orrs	r3, r3, r2
 1032 00d6 3B63     		str	r3, [r7, #48]
 1033              	.L66:
 594:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 595:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 596:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 597:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 598:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 599:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the actual event flag value in the task's event list
 601:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				item before removing the task from the event list.  The
 602:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 603:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
 604:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				than because it timed out. */
 605:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCK
 1034              		.loc 1 605 0
 1035 00d8 BB6A     		ldr	r3, [r7, #40]
 1036 00da 1B68     		ldr	r3, [r3]
 1037 00dc 43F00073 		orr	r3, r3, #33554432
 1038 00e0 1946     		mov	r1, r3
 1039 00e2 786B     		ldr	r0, [r7, #52]
 1040 00e4 FFF7FEFF 		bl	xTaskRemoveFromUnorderedEventList
 1041              	.L65:
 606:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 607:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 608:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 609:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			used here as the list item may have been removed from the event list
 610:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and inserted into the ready/pending reading list. */
 611:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxListItem = pxNext;
 1042              		.loc 1 611 0
 1043 00e8 FB69     		ldr	r3, [r7, #28]
 1044 00ea 7B63     		str	r3, [r7, #52]
 1045              	.L62:
 556:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 1046              		.loc 1 556 0
 1047 00ec 7A6B     		ldr	r2, [r7, #52]
 1048 00ee 3B6A     		ldr	r3, [r7, #32]
 1049 00f0 9A42     		cmp	r2, r3
 1050 00f2 BED1     		bne	.L67
 612:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 613:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 614:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 615:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		bit was set in the control word. */
 616:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 1051              		.loc 1 616 0
 1052 00f4 BB6A     		ldr	r3, [r7, #40]
 1053 00f6 1A68     		ldr	r2, [r3]
 1054 00f8 3B6B     		ldr	r3, [r7, #48]
 1055 00fa DB43     		mvns	r3, r3
 1056 00fc 1A40     		ands	r2, r2, r3
 1057 00fe BB6A     		ldr	r3, [r7, #40]
 1058 0100 1A60     		str	r2, [r3]
 617:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
ARM GAS  /tmp/ccLpvFJA.s 			page 35


 618:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 1059              		.loc 1 618 0
 1060 0102 FFF7FEFF 		bl	xTaskResumeAll
 619:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 620:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return pxEventBits->uxEventBits;
 1061              		.loc 1 620 0
 1062 0106 BB6A     		ldr	r3, [r7, #40]
 1063 0108 1B68     		ldr	r3, [r3]
 621:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1064              		.loc 1 621 0
 1065 010a 1846     		mov	r0, r3
 1066 010c 3837     		adds	r7, r7, #56
 1067              	.LCFI29:
 1068              		.cfi_def_cfa_offset 8
 1069 010e BD46     		mov	sp, r7
 1070              	.LCFI30:
 1071              		.cfi_def_cfa_register 13
 1072              		@ sp needed
 1073 0110 80BD     		pop	{r7, pc}
 1074              		.cfi_endproc
 1075              	.LFE10:
 1077              		.section	.text.vEventGroupDelete,"ax",%progbits
 1078              		.align	1
 1079              		.global	vEventGroupDelete
 1080              		.syntax unified
 1081              		.thumb
 1082              		.thumb_func
 1083              		.fpu fpv4-sp-d16
 1085              	vEventGroupDelete:
 1086              	.LFB11:
 622:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 623:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 624:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 625:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 1087              		.loc 1 625 0
 1088              		.cfi_startproc
 1089              		@ args = 0, pretend = 0, frame = 24
 1090              		@ frame_needed = 1, uses_anonymous_args = 0
 1091 0000 80B5     		push	{r7, lr}
 1092              	.LCFI31:
 1093              		.cfi_def_cfa_offset 8
 1094              		.cfi_offset 7, -8
 1095              		.cfi_offset 14, -4
 1096 0002 86B0     		sub	sp, sp, #24
 1097              	.LCFI32:
 1098              		.cfi_def_cfa_offset 32
 1099 0004 00AF     		add	r7, sp, #0
 1100              	.LCFI33:
 1101              		.cfi_def_cfa_register 7
 1102 0006 7860     		str	r0, [r7, #4]
 626:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 1103              		.loc 1 626 0
 1104 0008 7B68     		ldr	r3, [r7, #4]
 1105 000a 7B61     		str	r3, [r7, #20]
 627:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 1106              		.loc 1 627 0
 1107 000c 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/ccLpvFJA.s 			page 36


 1108 000e 0433     		adds	r3, r3, #4
 1109 0010 3B61     		str	r3, [r7, #16]
 628:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 1110              		.loc 1 629 0
 1111 0012 FFF7FEFF 		bl	vTaskSuspendAll
 630:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 631:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 632:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 1112              		.loc 1 633 0
 1113 0016 16E0     		b	.L70
 1114              	.L73:
 634:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 635:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 636:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and	cannot therefore have any bits set. */
 637:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBit
 1115              		.loc 1 637 0
 1116 0018 3B69     		ldr	r3, [r7, #16]
 1117 001a DA68     		ldr	r2, [r3, #12]
 1118 001c 3B69     		ldr	r3, [r7, #16]
 1119 001e 0833     		adds	r3, r3, #8
 1120 0020 9A42     		cmp	r2, r3
 1121 0022 09D1     		bne	.L71
 1122              	.LBB58:
 1123              	.LBB59:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1124              		.loc 2 237 0 discriminator 1
 1125              		.syntax unified
 1126              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1127 0024 4FF05003 			mov r3, #80												
 1128 0028 83F31188 		msr basepri, r3											
 1129 002c BFF36F8F 		isb														
 1130 0030 BFF34F8F 		dsb														
 1131              	
 1132              	@ 0 "" 2
 1133              		.thumb
 1134              		.syntax unified
 1135 0034 FB60     		str	r3, [r7, #12]
 1136              	.L72:
 1137              	.LBE59:
 1138              	.LBE58:
 1139              		.loc 1 637 0 discriminator 1
 1140 0036 FEE7     		b	.L72
 1141              	.L71:
 638:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 1142              		.loc 1 638 0
 1143 0038 3B69     		ldr	r3, [r7, #16]
 1144 003a DB68     		ldr	r3, [r3, #12]
 1145 003c 4FF00071 		mov	r1, #33554432
 1146 0040 1846     		mov	r0, r3
 1147 0042 FFF7FEFF 		bl	xTaskRemoveFromUnorderedEventList
 1148              	.L70:
 633:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 1149              		.loc 1 633 0
 1150 0046 3B69     		ldr	r3, [r7, #16]
 1151 0048 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccLpvFJA.s 			page 37


 1152 004a 002B     		cmp	r3, #0
 1153 004c E4D1     		bne	.L73
 639:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 640:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 641:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 642:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 643:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group can only have been allocated dynamically - free
 644:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			it again. */
 645:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vPortFree( pxEventBits );
 1154              		.loc 1 645 0
 1155 004e 7869     		ldr	r0, [r7, #20]
 1156 0050 FFF7FEFF 		bl	vPortFree
 646:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 647:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 648:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 649:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group could have been allocated statically or
 650:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			dynamically, so check before attempting to free the memory. */
 651:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 652:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 653:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vPortFree( pxEventBits );
 654:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 655:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 656:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 657:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 658:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 659:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 660:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 661:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 662:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 1157              		.loc 1 662 0
 1158 0054 FFF7FEFF 		bl	xTaskResumeAll
 663:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1159              		.loc 1 663 0
 1160 0058 00BF     		nop
 1161 005a 1837     		adds	r7, r7, #24
 1162              	.LCFI34:
 1163              		.cfi_def_cfa_offset 8
 1164 005c BD46     		mov	sp, r7
 1165              	.LCFI35:
 1166              		.cfi_def_cfa_register 13
 1167              		@ sp needed
 1168 005e 80BD     		pop	{r7, pc}
 1169              		.cfi_endproc
 1170              	.LFE11:
 1172              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 1173              		.align	1
 1174              		.global	vEventGroupSetBitsCallback
 1175              		.syntax unified
 1176              		.thumb
 1177              		.thumb_func
 1178              		.fpu fpv4-sp-d16
 1180              	vEventGroupSetBitsCallback:
 1181              	.LFB12:
 664:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 665:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 666:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 667:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
ARM GAS  /tmp/ccLpvFJA.s 			page 38


 668:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
 669:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 1182              		.loc 1 669 0
 1183              		.cfi_startproc
 1184              		@ args = 0, pretend = 0, frame = 8
 1185              		@ frame_needed = 1, uses_anonymous_args = 0
 1186 0000 80B5     		push	{r7, lr}
 1187              	.LCFI36:
 1188              		.cfi_def_cfa_offset 8
 1189              		.cfi_offset 7, -8
 1190              		.cfi_offset 14, -4
 1191 0002 82B0     		sub	sp, sp, #8
 1192              	.LCFI37:
 1193              		.cfi_def_cfa_offset 16
 1194 0004 00AF     		add	r7, sp, #0
 1195              	.LCFI38:
 1196              		.cfi_def_cfa_register 7
 1197 0006 7860     		str	r0, [r7, #4]
 1198 0008 3960     		str	r1, [r7]
 670:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 1199              		.loc 1 670 0
 1200 000a 3968     		ldr	r1, [r7]
 1201 000c 7868     		ldr	r0, [r7, #4]
 1202 000e FFF7FEFF 		bl	xEventGroupSetBits
 671:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1203              		.loc 1 671 0
 1204 0012 00BF     		nop
 1205 0014 0837     		adds	r7, r7, #8
 1206              	.LCFI39:
 1207              		.cfi_def_cfa_offset 8
 1208 0016 BD46     		mov	sp, r7
 1209              	.LCFI40:
 1210              		.cfi_def_cfa_register 13
 1211              		@ sp needed
 1212 0018 80BD     		pop	{r7, pc}
 1213              		.cfi_endproc
 1214              	.LFE12:
 1216              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 1217              		.align	1
 1218              		.global	vEventGroupClearBitsCallback
 1219              		.syntax unified
 1220              		.thumb
 1221              		.thumb_func
 1222              		.fpu fpv4-sp-d16
 1224              	vEventGroupClearBitsCallback:
 1225              	.LFB13:
 672:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 673:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 674:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 675:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 676:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 677:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 1226              		.loc 1 677 0
 1227              		.cfi_startproc
 1228              		@ args = 0, pretend = 0, frame = 8
 1229              		@ frame_needed = 1, uses_anonymous_args = 0
 1230 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccLpvFJA.s 			page 39


 1231              	.LCFI41:
 1232              		.cfi_def_cfa_offset 8
 1233              		.cfi_offset 7, -8
 1234              		.cfi_offset 14, -4
 1235 0002 82B0     		sub	sp, sp, #8
 1236              	.LCFI42:
 1237              		.cfi_def_cfa_offset 16
 1238 0004 00AF     		add	r7, sp, #0
 1239              	.LCFI43:
 1240              		.cfi_def_cfa_register 7
 1241 0006 7860     		str	r0, [r7, #4]
 1242 0008 3960     		str	r1, [r7]
 678:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 1243              		.loc 1 678 0
 1244 000a 3968     		ldr	r1, [r7]
 1245 000c 7868     		ldr	r0, [r7, #4]
 1246 000e FFF7FEFF 		bl	xEventGroupClearBits
 679:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1247              		.loc 1 679 0
 1248 0012 00BF     		nop
 1249 0014 0837     		adds	r7, r7, #8
 1250              	.LCFI44:
 1251              		.cfi_def_cfa_offset 8
 1252 0016 BD46     		mov	sp, r7
 1253              	.LCFI45:
 1254              		.cfi_def_cfa_register 13
 1255              		@ sp needed
 1256 0018 80BD     		pop	{r7, pc}
 1257              		.cfi_endproc
 1258              	.LFE13:
 1260              		.section	.text.prvTestWaitCondition,"ax",%progbits
 1261              		.align	1
 1262              		.syntax unified
 1263              		.thumb
 1264              		.thumb_func
 1265              		.fpu fpv4-sp-d16
 1267              	prvTestWaitCondition:
 1268              	.LFB14:
 680:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 681:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 683:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 1269              		.loc 1 683 0
 1270              		.cfi_startproc
 1271              		@ args = 0, pretend = 0, frame = 24
 1272              		@ frame_needed = 1, uses_anonymous_args = 0
 1273              		@ link register save eliminated.
 1274 0000 80B4     		push	{r7}
 1275              	.LCFI46:
 1276              		.cfi_def_cfa_offset 4
 1277              		.cfi_offset 7, -4
 1278 0002 87B0     		sub	sp, sp, #28
 1279              	.LCFI47:
 1280              		.cfi_def_cfa_offset 32
 1281 0004 00AF     		add	r7, sp, #0
 1282              	.LCFI48:
 1283              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccLpvFJA.s 			page 40


 1284 0006 F860     		str	r0, [r7, #12]
 1285 0008 B960     		str	r1, [r7, #8]
 1286 000a 7A60     		str	r2, [r7, #4]
 684:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
 1287              		.loc 1 684 0
 1288 000c 0023     		movs	r3, #0
 1289 000e 7B61     		str	r3, [r7, #20]
 685:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
 1290              		.loc 1 686 0
 1291 0010 7B68     		ldr	r3, [r7, #4]
 1292 0012 002B     		cmp	r3, #0
 1293 0014 07D1     		bne	.L77
 687:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 688:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 689:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		set.  Is one already set? */
 690:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 1294              		.loc 1 690 0
 1295 0016 FA68     		ldr	r2, [r7, #12]
 1296 0018 BB68     		ldr	r3, [r7, #8]
 1297 001a 1340     		ands	r3, r3, r2
 1298 001c 002B     		cmp	r3, #0
 1299 001e 0AD0     		beq	.L78
 691:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 692:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 1300              		.loc 1 692 0
 1301 0020 0123     		movs	r3, #1
 1302 0022 7B61     		str	r3, [r7, #20]
 1303 0024 07E0     		b	.L78
 1304              	.L77:
 693:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 694:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 695:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 696:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 697:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 698:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 699:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	else
 700:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 701:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 702:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		Are they set already? */
 703:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 1305              		.loc 1 703 0
 1306 0026 FA68     		ldr	r2, [r7, #12]
 1307 0028 BB68     		ldr	r3, [r7, #8]
 1308 002a 1A40     		ands	r2, r2, r3
 1309 002c BB68     		ldr	r3, [r7, #8]
 1310 002e 9A42     		cmp	r2, r3
 1311 0030 01D1     		bne	.L78
 704:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 705:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 1312              		.loc 1 705 0
 1313 0032 0123     		movs	r3, #1
 1314 0034 7B61     		str	r3, [r7, #20]
 1315              	.L78:
 706:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 707:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 708:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
ARM GAS  /tmp/ccLpvFJA.s 			page 41


 709:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 710:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 711:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 712:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 713:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return xWaitConditionMet;
 1316              		.loc 1 713 0
 1317 0036 7B69     		ldr	r3, [r7, #20]
 714:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1318              		.loc 1 714 0
 1319 0038 1846     		mov	r0, r3
 1320 003a 1C37     		adds	r7, r7, #28
 1321              	.LCFI49:
 1322              		.cfi_def_cfa_offset 4
 1323 003c BD46     		mov	sp, r7
 1324              	.LCFI50:
 1325              		.cfi_def_cfa_register 13
 1326              		@ sp needed
 1327 003e 5DF8047B 		ldr	r7, [sp], #4
 1328              	.LCFI51:
 1329              		.cfi_restore 7
 1330              		.cfi_def_cfa_offset 0
 1331 0042 7047     		bx	lr
 1332              		.cfi_endproc
 1333              	.LFE14:
 1335              		.text
 1336              	.Letext0:
 1337              		.file 3 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 1338              		.file 4 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/sys/lock.h"
 1339              		.file 5 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/sys/_types.h"
 1340              		.file 6 "/opt/gcc4mbed/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1341              		.file 7 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/sys/reent.h"
 1342              		.file 8 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 1343              		.file 9 "Inc/FreeRTOSConfig.h"
 1344              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 1345              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h"
ARM GAS  /tmp/ccLpvFJA.s 			page 42


DEFINED SYMBOLS
                            *ABS*:0000000000000000 event_groups.c
     /tmp/ccLpvFJA.s:18     .text.xEventGroupCreate:0000000000000000 $t
     /tmp/ccLpvFJA.s:25     .text.xEventGroupCreate:0000000000000000 xEventGroupCreate
     /tmp/ccLpvFJA.s:77     .text.xEventGroupSync:0000000000000000 $t
     /tmp/ccLpvFJA.s:84     .text.xEventGroupSync:0000000000000000 xEventGroupSync
     /tmp/ccLpvFJA.s:870    .text.xEventGroupSetBits:0000000000000000 xEventGroupSetBits
     /tmp/ccLpvFJA.s:341    .text.xEventGroupSync:0000000000000150 $d
     /tmp/ccLpvFJA.s:346    .text.xEventGroupWaitBits:0000000000000000 $t
     /tmp/ccLpvFJA.s:353    .text.xEventGroupWaitBits:0000000000000000 xEventGroupWaitBits
     /tmp/ccLpvFJA.s:1267   .text.prvTestWaitCondition:0000000000000000 prvTestWaitCondition
     /tmp/ccLpvFJA.s:660    .text.xEventGroupWaitBits:000000000000018c $d
     /tmp/ccLpvFJA.s:665    .text.xEventGroupClearBits:0000000000000000 $t
     /tmp/ccLpvFJA.s:672    .text.xEventGroupClearBits:0000000000000000 xEventGroupClearBits
     /tmp/ccLpvFJA.s:775    .text.xEventGroupGetBitsFromISR:0000000000000000 $t
     /tmp/ccLpvFJA.s:782    .text.xEventGroupGetBitsFromISR:0000000000000000 xEventGroupGetBitsFromISR
     /tmp/ccLpvFJA.s:863    .text.xEventGroupSetBits:0000000000000000 $t
     /tmp/ccLpvFJA.s:1078   .text.vEventGroupDelete:0000000000000000 $t
     /tmp/ccLpvFJA.s:1085   .text.vEventGroupDelete:0000000000000000 vEventGroupDelete
     /tmp/ccLpvFJA.s:1173   .text.vEventGroupSetBitsCallback:0000000000000000 $t
     /tmp/ccLpvFJA.s:1180   .text.vEventGroupSetBitsCallback:0000000000000000 vEventGroupSetBitsCallback
     /tmp/ccLpvFJA.s:1217   .text.vEventGroupClearBitsCallback:0000000000000000 $t
     /tmp/ccLpvFJA.s:1224   .text.vEventGroupClearBitsCallback:0000000000000000 vEventGroupClearBitsCallback
     /tmp/ccLpvFJA.s:1261   .text.prvTestWaitCondition:0000000000000000 $t
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
xTaskGetSchedulerState
vTaskSuspendAll
vTaskPlaceOnUnorderedEventList
xTaskResumeAll
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
xTaskRemoveFromUnorderedEventList
vPortFree
